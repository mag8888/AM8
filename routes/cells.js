/**
 * API —Ä–æ—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–µ—Ç–∫–∞–º–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
 */

const express = require('express');
const router = express.Router();
const fs = require('fs').promises;
const path = require('path');

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–µ—Ç–æ–∫
const CELLS_CONFIG_PATH = path.join(__dirname, '../../assets/js/modules/game/BoardConfig.js');
const CELLS_BACKUP_DIR = path.join(__dirname, '../../backups/cells');

/**
 * GET /api/cells
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–µ—Ç–æ–∫
 */
router.get('/', async (req, res) => {
    try {
        console.log('üì° API: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–µ—Ç–æ–∫');
        
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª BoardConfig.js
        const configContent = await fs.readFile(CELLS_CONFIG_PATH, 'utf-8');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º BIG_CIRCLE –∏ SMALL_CIRCLE –∏–∑ —Ñ–∞–π–ª–∞
        const bigCircleMatch = configContent.match(/BIG_CIRCLE:\s*(\[[\s\S]*?\]),/);
        const smallCircleMatch = configContent.match(/SMALL_CIRCLE:\s*(\[[\s\S]*?\])/);
        
        if (!bigCircleMatch || !smallCircleMatch) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞');
        }
        
        // –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const bigCircle = eval(bigCircleMatch[1]);
        const smallCircle = eval(smallCircleMatch[1]);
        
        res.json({
            success: true,
            data: {
                outerCells: bigCircle,
                innerCells: smallCircle,
                totalCells: bigCircle.length + smallCircle.length
            }
        });
        
        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–µ—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–µ—Ç–æ–∫:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–µ—Ç–æ–∫',
            error: error.message
        });
    }
});

/**
 * PUT /api/cells
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–µ—Ç–æ–∫
 */
router.put('/', async (req, res) => {
    try {
        console.log('üì° API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–µ—Ç–æ–∫');
        
        const { outerCells, innerCells } = req.body;
        
        if (!outerCells || !innerCells) {
            return res.status(400).json({
                success: false,
                message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: outerCells, innerCells'
            });
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        await createBackup();
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Ñ–∞–π–ª–∞
        const newConfig = generateConfigFile(outerCells, innerCells);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        await fs.writeFile(CELLS_CONFIG_PATH, newConfig, 'utf-8');
        
        res.json({
            success: true,
            message: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–µ—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
            data: {
                outerCells: outerCells.length,
                innerCells: innerCells.length,
                totalCells: outerCells.length + innerCells.length
            }
        });
        
        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–µ—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–µ—Ç–æ–∫:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–µ—Ç–æ–∫',
            error: error.message
        });
    }
});

/**
 * POST /api/cells/backup
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
router.post('/backup', async (req, res) => {
    try {
        console.log('üì° API: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
        
        const backupPath = await createBackup();
        
        res.json({
            success: true,
            message: '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞',
            data: {
                backupPath: path.basename(backupPath)
            }
        });
        
        console.log('‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏',
            error: error.message
        });
    }
});

/**
 * GET /api/cells/backups
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
 */
router.get('/backups', async (req, res) => {
    try {
        console.log('üì° API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π');
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await fs.mkdir(CELLS_BACKUP_DIR, { recursive: true });
        
        // –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        const files = await fs.readdir(CELLS_BACKUP_DIR);
        const backups = [];
        
        for (const file of files) {
            if (file.endsWith('.js')) {
                const filePath = path.join(CELLS_BACKUP_DIR, file);
                const stats = await fs.stat(filePath);
                backups.push({
                    name: file,
                    size: stats.size,
                    created: stats.birthtime,
                    modified: stats.mtime
                });
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
        backups.sort((a, b) => b.created - a.created);
        
        res.json({
            success: true,
            data: backups
        });
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${backups.length} —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π',
            error: error.message
        });
    }
});

/**
 * POST /api/cells/restore
 * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
 */
router.post('/restore', async (req, res) => {
    try {
        console.log('üì° API: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
        
        const { backupName } = req.body;
        
        if (!backupName) {
            return res.status(400).json({
                success: false,
                message: '–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏'
            });
        }
        
        const backupPath = path.join(CELLS_BACKUP_DIR, backupName);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        try {
            await fs.access(backupPath);
        } catch {
            return res.status(404).json({
                success: false,
                message: '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await createBackup();
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
        await fs.copyFile(backupPath, CELLS_CONFIG_PATH);
        
        res.json({
            success: true,
            message: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏'
        });
        
        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è',
            error: error.message
        });
    }
});

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
 */
async function createBackup() {
    try {
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await fs.mkdir(CELLS_BACKUP_DIR, { recursive: true });
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
        const backupPath = path.join(CELLS_BACKUP_DIR, `BoardConfig-${timestamp}.js`);
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        await fs.copyFile(CELLS_CONFIG_PATH, backupPath);
        
        console.log(`üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupPath}`);
        return backupPath;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
        throw error;
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
function generateConfigFile(outerCells, innerCells) {
    const template = `/**
 * BoardConfig - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toISOString()}
 * –ù–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
 */

const BoardConfig = {
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫
    BIG_CIRCLE_CELLS: ${outerCells.length},
    SMALL_CIRCLE_CELLS: ${innerCells.length},
    
    // –í–Ω–µ—à–Ω–∏–π —Ç—Ä–µ–∫ (${outerCells.length} –∫–ª–µ—Ç–æ–∫)
    BIG_CIRCLE: ${JSON.stringify(outerCells, null, 4)},
    
    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ç—Ä–µ–∫ (${innerCells.length} –∫–ª–µ—Ç–æ–∫)
    SMALL_CIRCLE: ${JSON.stringify(innerCells, null, 4)}
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.BoardConfig = BoardConfig;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = BoardConfig;
}`;
    
    return template;
}

module.exports = router;
