/**
 * API —Ä–æ—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–Ω—ã–º–∏ –∫–æ–ª–æ–¥–∞–º–∏
 */

const express = require('express');
const router = express.Router();
const { Deck, Card } = require('../models/CardModel');
const DatabaseConfig = require('../auth/server/config/database');

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–æ–ª–æ–¥—ã –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ MongoDB
 */
async function getCardsConfig() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        const dbConfig = new DatabaseConfig();
        if (!dbConfig.isConnected) {
            console.log('üîç Cards API: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB...');
            await dbConfig.connect();
        }

        const decks = await Deck.find({ isActive: true })
            .populate('drawPile', 'id title description type value')
            .populate('discardPile', 'id title description type value')
            .lean();
        
        console.log('üîç Cards API: –ü–æ–ª—É—á–µ–Ω—ã –∫–æ–ª–æ–¥—ã –∏–∑ MongoDB:', {
            decksCount: decks.length,
            decks: decks.map(d => ({ id: d.id, name: d.name, drawCount: d.drawPile.length, discardCount: d.discardPile.length }))
        });
        
        return {
            version: 1,
            updatedAt: new Date().toISOString(),
            decks: decks.map(deck => ({
                id: deck.id,
                name: deck.name,
                drawPile: deck.drawPile || [],
                discardPile: deck.discardPile || []
            }))
        };
    } catch (error) {
        console.error('‚ùå Cards API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–æ–¥ –∏–∑ MongoDB:', error);
        throw error;
    }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–ª–æ–¥—ã –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ MongoDB
 */
async function saveCardsConfig(decks) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        const dbConfig = new DatabaseConfig();
        if (!dbConfig.isConnected) {
            console.log('üîç Cards API: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB...');
            await dbConfig.connect();
        }

        console.log('üîç Cards API: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–ª–æ–¥ –≤ MongoDB:', {
            decksCount: decks.length,
            decks: decks.map(d => ({ id: d.id, name: d.name }))
        });
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–¥—ã –∏ –∫–∞—Ä—Ç–æ—á–∫–∏
        await Deck.deleteMany({});
        await Card.deleteMany({});
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–¥—ã
        const savedDecks = await Promise.all(decks.map(async (deckData) => {
            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è drawPile
            const drawCards = await Promise.all(
                (deckData.drawPile || []).map(cardData => 
                    new Card(cardData).save()
                )
            );
            
            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è discardPile
            const discardCards = await Promise.all(
                (deckData.discardPile || []).map(cardData => 
                    new Card(cardData).save()
                )
            );
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É
            const deck = new Deck({
                id: deckData.id,
                name: deckData.name,
                drawPile: drawCards.map(card => card._id),
                discardPile: discardCards.map(card => card._id)
            });
            
            return await deck.save();
        }));
        
        console.log('‚úÖ Cards API: –ö–æ–ª–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ MongoDB:', {
            savedCount: savedDecks.length
        });
        
        return {
            version: 1,
            updatedAt: new Date().toISOString(),
            decks: savedDecks
        };
    } catch (error) {
        console.error('‚ùå Cards API: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–æ–¥ –≤ MongoDB:', error);
        throw error;
    }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ (–ø–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è MongoDB)
 */
async function createBackup() {
    console.log('‚ö†Ô∏è Cards API: –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è MongoDB');
    return null;
}

/**
 * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–∞—Ö –∏ –æ—Ç–±–æ–π–Ω—ã—Ö —Å—Ç–æ–ø–∫–∞—Ö
 */
function collectDeckStats(decks = []) {
    return decks.map((deck) => ({
        id: deck.id,
        name: deck.name,
        drawCount: Array.isArray(deck.drawPile) ? deck.drawPile.length : 0,
        discardCount: Array.isArray(deck.discardPile) ? deck.discardPile.length : 0
    }));
}

/**
 * GET /api/cards
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –∫–æ–ª–æ–¥
 */
router.get('/', async (req, res) => {
    try {
        const config = await getCardsConfig();
        res.json({
            success: true,
            data: {
                ...config,
                stats: collectDeckStats(config.decks)
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç:', error);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–æ–ª–æ–¥—ã –µ—Å–ª–∏ MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        const defaultConfig = {
            version: 1,
            updatedAt: new Date().toISOString(),
            decks: [
                {
                    id: 'deal',
                    name: '–ú–∞–ª–∞—è —Å–¥–µ–ª–∫–∞',
                    drawPile: [],
                    discardPile: []
                },
                {
                    id: 'big_deal',
                    name: '–ë–æ–ª—å—à–∏–µ —Å–¥–µ–ª–∫–∏',
                    drawPile: [],
                    discardPile: []
                },
                {
                    id: 'expenses',
                    name: '–†–∞—Å—Ö–æ–¥—ã',
                    drawPile: [],
                    discardPile: []
                },
                {
                    id: 'market',
                    name: '–†—ã–Ω–æ–∫',
                    drawPile: [],
                    discardPile: []
                }
            ]
        };
        
        res.json({
            success: true,
            data: {
                ...defaultConfig,
                stats: collectDeckStats(defaultConfig.decks)
            }
        });
    }
});

/**
 * PUT /api/cards
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –∫–æ–ª–æ–¥
 */
router.put('/', async (req, res) => {
    try {
        const { decks, version } = req.body;

        if (!Array.isArray(decks)) {
            return res.status(400).json({
                success: false,
                message: '–ü–æ–ª–µ decks –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º'
            });
        }

        await createBackup();

        const newConfig = await saveCardsConfig(decks);

        res.json({
            success: true,
            message: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –∫–æ–ª–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
            data: {
                ...newConfig,
                stats: collectDeckStats(newConfig.decks)
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç:', error);
        res.status(500).json({
            success: false,
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–Ω—ã–µ –∫–æ–ª–æ–¥—ã',
            error: error.message
        });
    }
});

/**
 * GET /api/cards/backups
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π (–æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è MongoDB)
 */
router.get('/backups', async (req, res) => {
    res.json({
        success: true,
        message: '–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è MongoDB',
        data: []
    });
});

/**
 * POST /api/cards/restore
 * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ (–æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è MongoDB)
 */
router.post('/restore', async (req, res) => {
    res.status(501).json({
        success: false,
        message: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è MongoDB'
    });
});

module.exports = router;
