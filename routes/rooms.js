const express = require('express');
const { v4: uuidv4 } = require('uuid');
const PushService = require('../services/PushService');
const RoomRepository = require('../repositories/RoomRepository');

const router = express.Router();
// –ü—Ä–æ—Å—Ç–æ–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã (–Ω–∞ –æ–¥–Ω–æ–º –∏–Ω—Å—Ç–∞–Ω—Å–µ). –î–ª—è –ø—Ä–æ–¥-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Redis/–ë–î/–≤–µ–±—Å–æ–∫–µ—Ç—ã
const gameStateByRoomId = new Map();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ (–¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º)
const STARTING_MONEY = 5000;
const STARTING_POSITION = 0;
const DEFAULT_TOKEN = 'üéØ';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã (–¥–ª—è –±–∞–Ω–∫ API)
function getRoomGameState(roomId) {
    return gameStateByRoomId.get(roomId) || null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã (–¥–ª—è –±–∞–Ω–∫ API)
function updateRoomGameState(roomId, state) {
    gameStateByRoomId.set(roomId, state);
    return true;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports.getRoomGameState = getRoomGameState;
module.exports.updateRoomGameState = updateRoomGameState;
module.exports.gameStateByRoomId = gameStateByRoomId;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PushService –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const pushService = new PushService();

function ensureGameState(db, roomId, cb) {
    if (gameStateByRoomId.has(roomId)) return cb(null, gameStateByRoomId.get(roomId));
    const q = `SELECT rp.user_id as userId, u.username as username
               FROM room_players rp LEFT JOIN users u ON u.id = rp.user_id
               WHERE rp.room_id = ? ORDER BY u.username ASC`;
    if (!db) {
        const state = { players: [], currentPlayerIndex: 0, activePlayer: null, lastDiceResult: null, canRoll: true, canMove: false, canEndTurn: false };
        gameStateByRoomId.set(roomId, state);
        return cb(null, state);
    }
    db.all(q, [roomId], (err, rows) => {
        if (err) return cb(err);
        const players = (rows || []).map((r, idx) => ({
            id: r.userId,
            userId: r.userId,
            username: r.username || `player${idx+1}`,
            position: STARTING_POSITION,
            isInner: true,
            token: DEFAULT_TOKEN,
            money: STARTING_MONEY,
            isReady: true
        }));
        const state = {
            players,
            currentPlayerIndex: 0,
            activePlayer: players[0] || null,
            lastDiceResult: null,
            canRoll: true,
            canMove: false,
            canEndTurn: false
        };
        gameStateByRoomId.set(roomId, state);
        cb(null, state);
    });
}

// --- Game sync endpoints ---
router.get('/:id/players', (req, res, next) => {
    const db = getDatabase();
    const { id } = req.params;
    if (!db) {
        // Mongo-first: –≤–µ—Ä–Ω—É—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ Mongo –∫–æ–º–Ω–∞—Ç—ã
        (async () => {
            try {
                const repo = new RoomRepository();
                const room = await repo.getById(id);
                const players = (room && Array.isArray(room.players)) ? room.players.map(p => ({ userId: p.userId || p.id, username: p.username })) : [];
                return res.json({ success: true, data: players });
            } catch (e) {
                console.warn('‚ö†Ô∏è Mongo get players error:', e?.message);
                return res.json({ success: true, data: [] });
            }
        })();
        return;
    }
    db.all(`SELECT rp.user_id as userId, u.username as username FROM room_players rp LEFT JOIN users u ON u.id = rp.user_id WHERE rp.room_id = ? ORDER BY u.username ASC`, [id], (err, rows) => {
        if (err) return next(err);
        res.json({ success:true, data: rows || [] });
    });
});

router.get('/:id/game-state', (req, res, next) => {
    const db = getDatabase();
    const { id } = req.params;
    if (!db) {
        // Mongo-first: —Å–æ–±–∏—Ä–∞–µ–º state –∏–∑ Mongo –∫–æ–º–Ω–∞—Ç—ã –∏ –∫—ç—à–∞
        (async () => {
            try {
                const repo = new RoomRepository();
                const room = await repo.getById(id);
                let state = gameStateByRoomId.get(id);
                if (!state) {
                    state = {
                        players: (room?.players || []).map(p => ({ id: p.id || p.userId, username: p.username, position: 0, isInner: true, token: p.token || 'üéØ', money: 5000, isReady: !!p.isReady })),
                        currentPlayerIndex: 0,
                        activePlayer: null,
                        lastDiceResult: null,
                        canRoll: true,
                        canMove: false,
                        canEndTurn: false
                    };
                    state.activePlayer = state.players[0] || null;
                    gameStateByRoomId.set(id, state);
                }
                return res.json({ success: true, state });
            } catch (e) {
                return res.json({ success: true, state: { players: [], currentPlayerIndex: 0, activePlayer: null } });
            }
        })();
        return;
    }
    ensureGameState(db, id, (err, state) => {
        if (err) return next(err);
        res.json({ success:true, state });
    });
});

router.post('/:id/roll', (req, res, next) => {
    const db = getDatabase();
    const { id } = req.params;
    ensureGameState(db, id, (err, state) => {
        if (err) return next(err);
        if (state.canRoll === false) {
            return res.status(400).json({ success:false, message:'–ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', state });
        }
        const value = Math.floor(Math.random()*6)+1;
        state.lastDiceResult = { value, at: Date.now() };
        state.canRoll = false;
        state.canMove = true;
        state.canEndTurn = false;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–∞
        pushService.broadcastPush('dice_rolled', { 
            roomId: id, 
            activePlayer: state.activePlayer,
            diceValue: value
        }).catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push –æ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–∞:', err));
        
        res.json({ success:true, diceResult:{ value }, state });
    });
});

router.post('/:id/move', (req, res, next) => {
    const db = getDatabase();
    const { id } = req.params;
    const { steps } = req.body || {};
    ensureGameState(db, id, (err, state) => {
        if (err) return next(err);
        const current = state.players[state.currentPlayerIndex];
        if (!current) return res.json({ success:true, moveResult:{ steps:0 }, state });
        if (state.canMove === false) {
            return res.status(400).json({ success:false, message:'–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', state });
        }
        const diceValue = Number(state?.lastDiceResult?.value);
        const requestedSteps = Number(steps);
        const moveSteps = Number.isFinite(diceValue) && diceValue > 0
            ? diceValue
            : (Number.isFinite(requestedSteps) && requestedSteps > 0 ? requestedSteps : null);
        if (!Number.isFinite(moveSteps) || moveSteps <= 0) {
            return res.status(400).json({ success:false, message:'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è', state });
        }
        const maxInner = 12;
        current.position = (current.position + moveSteps) % maxInner;
        state.canRoll = false;
        state.canMove = false;
        state.canEndTurn = true;
        state.lastMove = { steps: moveSteps, at: Date.now() };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–≤–∏–∂–µ–Ω–∏–∏
        pushService.broadcastPush('player_moved', { 
            roomId: id, 
            activePlayer: state.activePlayer,
            steps: moveSteps,
            newPosition: current.position
        }).catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push –æ –¥–≤–∏–∂–µ–Ω–∏–∏:', err));
        
        res.json({ success:true, moveResult:{ steps: moveSteps }, state });
    });
});

router.post('/:id/end-turn', (req, res, next) => {
    const db = getDatabase();
    const { id } = req.params;
    ensureGameState(db, id, (err, state) => {
        if (err) return next(err);
        if (state.canEndTurn === false) {
            return res.status(400).json({ success:false, message:'–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', state });
        }
        state.currentPlayerIndex = (state.currentPlayerIndex + 1) % (state.players.length || 1);
        state.activePlayer = state.players[state.currentPlayerIndex] || null;
        state.canRoll = true;
        state.canMove = false;
        state.canEndTurn = false;
        state.lastDiceResult = null;
        state.lastMove = null;
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Ö–æ–¥–∞
        pushService.broadcastPush('turn_changed', { 
            roomId: id, 
            activePlayer: state.activePlayer,
            previousPlayer: state.players[state.currentPlayerIndex - 1] || state.players[state.players.length - 1]
        }).catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push –æ —Å–º–µ–Ω–µ —Ö–æ–¥–∞:', err));
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Ö–æ–¥–∞
        pushService.sendRealPushNotification(
            'üîÑ –í–∞—à —Ö–æ–¥!',
            `–•–æ–¥ –∏–≥—Ä–æ–∫–∞ ${state.activePlayer.username || '–ò–≥—Ä–æ–∫'}. –ë—Ä–æ—Å–∞–π—Ç–µ –∫—É–±–∏–∫!`,
            {
                data: { roomId: id, action: 'turn_changed', playerId: state.activePlayer.id },
                actions: [
                    { action: 'open_game', title: '–û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É' }
                ],
                tag: 'turn_changed',
                requireInteraction: false
            }
        ).catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ push –æ —Å–º–µ–Ω–µ —Ö–æ–¥–∞:', err));
        
        res.json({ success:true, state, event: { type: 'turn_changed', activePlayer: state.activePlayer } });
    });
});

router.put('/:id/active-player', (req, res, next) => {
    const db = getDatabase();
    const { id } = req.params;
    const { playerId } = req.body || {};
    ensureGameState(db, id, (err, state) => {
        if (err) return next(err);
        const idx = state.players.findIndex(p => p.id === playerId);
        if (idx === -1) return res.status(404).json({ success:false, message:'–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        state.currentPlayerIndex = idx;
        state.activePlayer = state.players[idx];
        state.canRoll = true;
        state.canMove = false;
        state.canEndTurn = false;
        res.json({ success:true, state });
    });
});

// Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ
const fallbackRooms = [
    {
        id: 'room-demo-1',
        name: '–î–µ–º–æ –∫–æ–º–Ω–∞—Ç–∞ 1',
        description: '–ö–æ–º–Ω–∞—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–≥—Ä—ã',
        maxPlayers: 4,
        playerCount: 2,
        status: 'waiting',
        isStarted: false,
        isFull: false,
        creator: 'demo_user',
        turnTime: 30,
        assignProfessions: true,
        players: [
            { id: 'p1', username: 'demo_user', name: 'demo_user', isHost: true },
            { id: 'p2', username: 'player1', name: 'player1', isHost: false }
        ],
        createdAt: new Date(Date.now() - 60000).toISOString()
    },
    {
        id: 'room-tournament-1',
        name: '–¢—É—Ä–Ω–∏—Ä–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞',
        description: '–°–µ—Ä—å–µ–∑–Ω–∞—è –∏–≥—Ä–∞ –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤',
        maxPlayers: 6,
        playerCount: 3,
        status: 'waiting',
        isStarted: false,
        isFull: false,
        creator: 'tournament_master',
        turnTime: 60,
        assignProfessions: false,
        players: [
            { id: 'p3', username: 'tournament_master', name: 'tournament_master', isHost: true },
            { id: 'p4', username: 'player2', name: 'player2', isHost: false },
            { id: 'p5', username: 'player3', name: 'player3', isHost: false }
        ],
        createdAt: new Date(Date.now() - 30000).toISOString()
    }
];

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function getDatabase() {
    try {
        // –í –ø—Ä–æ–¥–µ –Ω–∞ Railway –∏—Å–ø–æ–ª—å–∑—É–µ–º MongoDB, –ª–æ–∫–∞–ª—å–Ω—É—é SQLite –Ω–µ –ø–æ–¥–Ω–∏–º–∞–µ–º
        if (process.env.MONGO_URL || process.env.MONGODB_URI || process.env.RAILWAY_STATIC_URL || process.env.RAILWAY_ENVIRONMENT) {
            console.log('üóÑÔ∏è DB: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∂–∏–º MongoDB/Remote (SQLite –æ—Ç–∫–ª—é—á–µ–Ω)');
            return null; // –æ—Ç–∫–ª—é—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é SQLite, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ
        }
        if (process.env.USE_SQLITE === 'true') {
        return require('../database/init').getDatabase();
        }
        console.warn('‚ö†Ô∏è DB: –õ–æ–∫–∞–ª—å–Ω–∞—è SQLite –æ—Ç–∫–ª—é—á–µ–Ω–∞. –î–ª—è Mongo –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å.');
        return null;
    } catch (error) {
        console.warn('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
        return null;
    }
}

/**
 * GET /api/rooms - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
 */
router.get('/', async (req, res, next) => {
    try {
        const db = getDatabase();
        
        // –ï—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ
        if (!db) {
            try {
                const repo = new RoomRepository();
                const rooms = await repo.list();
                return res.json({ success: true, data: rooms, count: rooms.length, mongo: true });
            } catch (e) {
            console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–Ω–∞—Ç');
            return res.json({
                success: true,
                data: fallbackRooms,
                count: fallbackRooms.length,
                fallback: true
            });
            }
        }

        const query = `
            SELECT 
                r.id,
                r.name,
                r.description,
                r.max_players,
                r.current_players,
                r.status,
                r.is_started,
                r.turn_time,
                r.assign_professions,
                r.creator_id,
                r.created_at,
                r.updated_at,
                u.username as creator_name
            FROM rooms r
            LEFT JOIN users u ON r.creator_id = u.id
            WHERE r.status != 'deleted'
            ORDER BY r.created_at DESC
        `;

        db.all(query, [], (err, rows) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:', err);
                // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ë–î
                console.log('üîÑ Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ');
                return res.json({
                    success: true,
                    data: fallbackRooms,
                    count: fallbackRooms.length,
                    fallback: true
                });
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            const playersQuery = `
                SELECT 
                    rp.room_id,
                    rp.user_id as id,
                    u.username,
                    u.username as name,
                    rp.is_host as isHost,
                    rp.is_ready as isReady,
                    rp.token,
                    rp.dream,
                    rp.dream_cost as dreamCost,
                    rp.dream_description as dreamDescription,
                    rp.position,
                    rp.money,
                    rp.salary
                FROM room_players rp
                JOIN users u ON rp.user_id = u.id
                WHERE rp.room_id IN (${rows.map(() => '?').join(',')})
            `;

            const roomIds = rows.map(row => row.id);
            
            db.all(playersQuery, roomIds, (err, allPlayers) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤:', err);
                    return next(err);
                }

                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
                const playersByRoom = {};
                allPlayers.forEach(player => {
                    if (!playersByRoom[player.room_id]) {
                        playersByRoom[player.room_id] = [];
                    }
                    // –£–¥–∞–ª—è–µ–º room_id –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∏–≥—Ä–æ–∫–∞
                    const { room_id, ...playerData } = player;
                    playersByRoom[player.room_id].push(playerData);
                });

                const rooms = rows.map(row => ({
                    id: row.id,
                    name: row.name,
                    description: row.description,
                    maxPlayers: row.max_players,
                    playerCount: row.current_players,
                    status: row.status,
                    isStarted: Boolean(row.is_started),
                    isFull: row.current_players >= row.max_players,
                    creator: row.creator_name,
                    creatorId: row.creator_id, // –î–æ–±–∞–≤–ª—è–µ–º creatorId –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–æ—Å—Ç–∞
                    turnTime: row.turn_time,
                    assignProfessions: Boolean(row.assign_professions),
                    minPlayers: 2, // –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
                    players: playersByRoom[row.id] || [],
                    createdAt: row.created_at,
                    updatedAt: row.updated_at
                }));

                res.json({
                    success: true,
                    data: rooms,
                    count: rooms.length
                });
            });
        });

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:', error);
        // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        res.json({
            success: true,
            data: fallbackRooms,
            count: fallbackRooms.length,
            fallback: true
        });
    }
});

/**
 * GET /api/rooms/stats - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–Ω–∞—Ç
 */
router.get('/stats', async (req, res, next) => {
    try {
        const db = getDatabase();
        if (!db) {
            console.log('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
            return res.json({
                success: true,
                data: {
                    totalRooms: 4,
                    activeRooms: 4,
                    gamesInProgress: 0,
                    playersOnline: 4
                },
                fallback: true
            });
        }

        const stats = await new Promise((resolve, reject) => {
            const query = `
                SELECT 
                    COUNT(*) as totalRooms,
                    SUM(CASE WHEN status = 'waiting' THEN 1 ELSE 0 END) as activeRooms,
                    SUM(CASE WHEN status = 'playing' THEN 1 ELSE 0 END) as gamesInProgress,
                    (SELECT COUNT(*) FROM room_players) as playersOnline
                FROM rooms 
                WHERE status != 'deleted'
            `;
            
            db.get(query, [], (err, row) => {
                if (err) reject(err);
                else resolve(row);
            });
        });

        res.json({
            success: true,
            data: stats,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–Ω–∞—Ç:', error);
        next(error);
    }
});

/**
 * GET /api/rooms/:id - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É –ø–æ ID
 */
router.get('/:id', async (req, res, next) => {
    try {
        const { id } = req.params;

        const db = getDatabase();
        if (!db) {
            try {
                const repo = new RoomRepository();
                const room = await repo.getById(id);
                if (room) return res.json({ success: true, data: room, mongo: true });
            } catch (e) {}
            console.log('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
            const fallbackRoom = fallbackRooms.find(r => r.id === id);
            if (fallbackRoom) {
                return res.json({ success: true, data: fallbackRoom, fallback: true });
            }
            return res.status(404).json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (fallback)' });
        }

        const query = `
            SELECT 
                r.*,
                u.username as creator_name
            FROM rooms r
            LEFT JOIN users u ON r.creator_id = u.id
            WHERE r.id = ? AND r.status != 'deleted'
        `;

        db.get(query, [id], (err, row) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', err);
                return next(err);
            }

            if (!row) {
                return res.status(404).json({
                    success: false,
                    message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                });
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            const playersQuery = `
                SELECT 
                    rp.user_id as id,
                    u.username,
                    u.username as name,
                    rp.is_host as isHost,
                    rp.is_ready as isReady,
                    rp.token,
                    rp.dream,
                    rp.dream_cost as dreamCost,
                    rp.dream_description as dreamDescription,
                    rp.position,
                    rp.money,
                    rp.salary
                FROM room_players rp
                JOIN users u ON rp.user_id = u.id
                WHERE rp.room_id = ?
            `;

            db.all(playersQuery, [id], (err, players) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤:', err);
                    return next(err);
                }

                const room = {
                    id: row.id,
                    name: row.name,
                    description: row.description,
                    maxPlayers: row.max_players,
                    playerCount: row.current_players,
                    status: row.status,
                    isStarted: Boolean(row.is_started),
                    isFull: row.current_players >= row.max_players,
                    creator: row.creator_name,
                    creatorId: row.creator_id, // –î–æ–±–∞–≤–ª—è–µ–º creatorId –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–æ—Å—Ç–∞
                    turnTime: row.turn_time,
                    assignProfessions: Boolean(row.assign_professions),
                    minPlayers: 2, // –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
                    players: players || [],
                    createdAt: row.created_at,
                    updatedAt: row.updated_at
                };

                res.json({
                    success: true,
                    data: room
                });
            });
        });

    } catch (error) {
        next(error);
    }
});

/**
 * POST /api/rooms - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
 */
router.post('/', async (req, res, next) => {
    try {
        const {
            name,
            description = '',
            maxPlayers = 4,
            turnTime = 30,
            assignProfessions = false,
            creator
        } = req.body;

        if (!name || !creator) {
            return res.status(400).json({
                success: false,
                message: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }

        const db = getDatabase();
        if (!db) {
            // Railway/Mongo-first path
            try {
                const repo = new RoomRepository();
                const room = await repo.create({ name, description, maxPlayers, turnTime, assignProfessions, creator });
                return res.status(201).json({ success: true, message: `–ö–æ–º–Ω–∞—Ç–∞ "${name}" —Å–æ–∑–¥–∞–Ω–∞`, data: room, mongo: true });
            } catch (e) {
                // Fallback: —Å–æ–∑–¥–∞—Ç—å –≤ –ø–∞–º—è—Ç–∏
                console.log('üß∞ Fallback create room (in-memory)');
                const roomId = uuidv4();
                const creatorId = uuidv4();
                const createdAt = new Date().toISOString();
                const room = {
                    id: roomId,
                    name,
                    description,
                    maxPlayers,
                    playerCount: 1,
                    status: 'waiting',
                    isStarted: false,
                    isFull: false,
                    creator: creator,
                    creatorId,
                    turnTime,
                    assignProfessions,
                    minPlayers: 2,
                    players: [ { id: creatorId, username: creator, name: creator, isHost: true, isReady: false } ],
                    createdAt,
                    updatedAt: createdAt
                };
                try {
                    const idx = fallbackRooms.findIndex(r => r.id === roomId);
                    if (idx === -1) fallbackRooms.unshift(room); else fallbackRooms[idx] = room;
                } catch (_) {}
                return res.status(201).json({ success: true, message: `–ö–æ–º–Ω–∞—Ç–∞ "${name}" —Å–æ–∑–¥–∞–Ω–∞ (fallback)`, data: room, fallback: true });
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        db.get('SELECT id FROM users WHERE username = ?', [creator], (err, user) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
                // Fallback: —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                const userId = uuidv4();
                db.run('INSERT OR IGNORE INTO users (id, username, created_at) VALUES (?, ?, ?)', 
                       [userId, creator, new Date().toISOString()], (insertErr) => {
                    if (insertErr) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', insertErr);
                        return res.status(500).json({
                            success: false,
                            message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                        });
                    }
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    createRoomWithUser({ id: userId, username: creator });
                });
                return;
            }

            if (!user) {
                console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ:', creator);
                // Fallback: —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                const userId = uuidv4();
                db.run('INSERT INTO users (id, username, created_at) VALUES (?, ?, ?)', 
                       [userId, creator, new Date().toISOString()], (insertErr) => {
                    if (insertErr) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', insertErr);
                        return res.status(500).json({
                            success: false,
                            message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                        });
                    }
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    createRoomWithUser({ id: userId, username: creator });
                });
                return;
            }

            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
            createRoomWithUser(user);
        });

        function createRoomWithUser(user) {

            const roomId = uuidv4();
            const playerId = uuidv4();

            // –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
            db.run(
                `INSERT INTO rooms (id, name, description, max_players, current_players, turn_time, assign_professions, creator_id) 
                 VALUES (?, ?, ?, ?, 1, ?, ?, ?)`,
                [roomId, name, description, maxPlayers, turnTime, assignProfessions ? 1 : 0, user.id],
                function(err) {
                    if (err) {
                        return next(err);
                    }

                    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
                    console.log('üîç –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ room_players:', { playerId, roomId, userId: user.id });
                    db.run(
                        `INSERT INTO room_players (id, room_id, user_id, is_host, is_ready) 
                         VALUES (?, ?, ?, 1, 0)`,
                        [playerId, roomId, user.id],
                        (err) => {
                            if (err) {
                                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –≤ room_players:', err);
                                return next(err);
                            }
                            console.log('‚úÖ –ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ room_players');

                            // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
                            const query = `
                                SELECT 
                                    r.*,
                                    u.username as creator_name,
                                    json_object(
                                        'id', rp.user_id,
                                        'username', u2.username,
                                        'name', u2.username,
                                        'isHost', rp.is_host,
                                        'isReady', rp.is_ready
                                    ) as player
                                FROM rooms r
                                LEFT JOIN users u ON r.creator_id = u.id
                                LEFT JOIN room_players rp ON r.id = rp.room_id AND rp.user_id = ?
                                LEFT JOIN users u2 ON rp.user_id = u2.id
                                WHERE r.id = ?
                            `;

                            db.get(query, [user.id, roomId], (err, row) => {
                                if (err) {
                                    return next(err);
                                }

                                const room = {
                                    id: row.id,
                                    name: row.name,
                                    description: row.description,
                                    maxPlayers: row.max_players,
                                    playerCount: row.current_players,
                                    status: row.status,
                                    isStarted: Boolean(row.is_started),
                                    isFull: row.current_players >= row.max_players,
                                    creator: row.creator_name,
                                    turnTime: row.turn_time,
                                    assignProfessions: Boolean(row.assign_professions),
                                    players: row.player ? [JSON.parse(row.player)] : [],
                                    createdAt: row.created_at,
                                    updatedAt: row.updated_at
                                };

                                res.status(201).json({
                                    success: true,
                                    message: `–ö–æ–º–Ω–∞—Ç–∞ "${name}" —Å–æ–∑–¥–∞–Ω–∞`,
                                    data: room
                                });
                            });
                        }
                    );
                }
            );
        }

    } catch (error) {
        next(error);
    }
});

/**
 * –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
 */
function proceedWithJoin(userId, player, roomId, res, next) {
    const db = getDatabase();
    if (!db) {
        return res.status(503).json({
            success: false,
            message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
        });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    db.get('SELECT id FROM room_players WHERE room_id = ? AND user_id = ?', [roomId, userId], (err, existingPlayer) => {
        if (err) {
            return next(err);
        }

        if (existingPlayer) {
            return res.status(409).json({
                success: false,
                message: '–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ',
                code: 'ALREADY_JOINED'
            });
        }

        const playerId = uuidv4();

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
        db.run(
            `INSERT INTO room_players (id, room_id, user_id, is_host, is_ready) 
             VALUES (?, ?, ?, 0, 0)`,
            [playerId, roomId, userId],
            (err) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –≤ room_players:', err);
                    return next(err);
                }

                console.log('‚úÖ –ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ room_players:', { playerId, roomId, userId, username: player.username });

                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
                db.run(
                    'UPDATE rooms SET current_players = current_players + 1, updated_at = CURRENT_TIMESTAMP WHERE id = ?',
                    [roomId],
                    (err) => {
                        if (err) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤:', err);
                            return next(err);
                        }

                        console.log('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã:', roomId);
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞
                        pushService.broadcastPush('player_joined', { 
                            roomId: roomId, 
                            player: {
                                id: playerId,
                                username: player.username,
                                token: player.token || '',
                                dream: player.dream || ''
                            }
                        }).catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏:', err));

                        res.status(201).json({
                            success: true,
                            message: '–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ',
                            data: {
                                roomId: roomId,
                                playerId: playerId
                            }
                        });
                    }
                );
            }
        );
    });
}

/**
 * POST /api/rooms/:id/join - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
 */
router.post('/:id/join', async (req, res, next) => {
    try {
        const { id } = req.params;
        const { player } = req.body;

        if (!player || !player.username) {
            return res.status(400).json({
                success: false,
                message: '–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }

        const db = getDatabase();
        if (!db) {
            // Mongo-first path (Railway): –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É –≤ Mongo
            try {
                const repo = new RoomRepository();
                let room = await repo.getById(id);
                if (!room) {
                    // —Å–æ–∑–¥–∞—ë–º –∫–æ–º–Ω–∞—Ç—É –º–∏–Ω–∏–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    room = { id, name: '–ö–æ–º–Ω–∞—Ç–∞', players: [], maxPlayers: 4, status: 'waiting' };
                }
                const players = Array.isArray(room.players) ? room.players.slice() : [];
                const exists = players.some(p => p.username === player.username || p.id === player.userId);
                if (exists) {
                    return res.status(409).json({ success: false, message: '–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ', code: 'ALREADY_JOINED' });
                }
                players.push({
                    id: player.userId || uuidv4(),
                    userId: player.userId,
                    username: player.username,
                    name: player.name || player.username,
                    avatar: player.avatar || '',
                    isHost: false,
                    isReady: !!player.isReady,
                    token: player.token || '',
                    dream: player.dream || null
                });
                await repo.updatePlayers(id, players);
                return res.status(201).json({ success: true, message: '–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ', data: { roomId: id } });
            } catch (e) {
                console.error('‚ùå Mongo join error:', e);
                return res.status(503).json({ success: false, message: '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' });
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
        db.get('SELECT * FROM rooms WHERE id = ? AND status != "deleted"', [id], (err, room) => {
            if (err) {
                return next(err);
            }

            if (!room) {
                return res.status(404).json({
                    success: false,
                    message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                });
            }

            if (room.current_players >= room.max_players) {
                return res.status(409).json({
                    success: false,
                    message: '–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞'
                });
            }

            // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
            // if (room.is_started) {
            //     return res.status(409).json({
            //         success: false,
            //         message: '–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å'
            //     });
            // }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            db.get('SELECT id FROM users WHERE username = ?', [player.username], (err, user) => {
                if (err) {
                    return next(err);
                }

                if (!user) {
                    console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ:', player.username);
                    // Fallback: —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    const userId = uuidv4();
                    db.run('INSERT INTO users (id, username, created_at) VALUES (?, ?, ?)', 
                           [userId, player.username, new Date().toISOString()], (insertErr) => {
                        if (insertErr) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', insertErr);
                            return res.status(500).json({
                                success: false,
                                message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                            });
                        }
                        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', player.username);
                        
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                        proceedWithJoin(userId, player, id, res, next);
                    });
                    return;
                }
                
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î:', user.id, player.username);
                proceedWithJoin(user.id, player, id, res, next);
            });
        });

    } catch (error) {
        next(error);
    }
});

/**
 * PUT /api/rooms/:id/player - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
 */
router.put('/:id/player', async (req, res, next) => {
    try {
        const { id } = req.params;
        const playerData = req.body;

        if (!playerData.username) {
            return res.status(400).json({
                success: false,
                message: 'Username –∏–≥—Ä–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            });
        }

        const db = getDatabase();
        if (!db) {
            // Mongo-first path (Railway)
            try {
                const repo = new RoomRepository();
                let room = await repo.getById(id);
                if (!room) {
                    // –ö–æ–º–Ω–∞—Ç—ã –Ω–µ—Ç –≤ Mongo ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ fallback –∏/–∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å
                    const fb = fallbackRooms.find(r => r.id === id);
                    if (fb) {
                        // –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –≤ Mongo
                        room = await repo.create({
                            name: fb.name || '–ö–æ–º–Ω–∞—Ç–∞',
                            description: fb.description || '',
                            maxPlayers: fb.maxPlayers || 4,
                            turnTime: fb.turnTime || 30,
                            assignProfessions: !!fb.assignProfessions,
                            creator: fb.creator || (playerData.username || 'player')
                        });
                        // –∑–∞–º–µ–Ω–∏—Ç—å —Å —Ç–µ–º –∂–µ id (create –≥–µ–Ω–µ—Ä–∏—Ç –Ω–æ–≤—ã–π id) ‚Äî –ø–æ—ç—Ç–æ–º—É –ª—É—á—à–µ —ç–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –∞–ø–¥–µ–π—Ç: –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º –ø–æ–ª—è
                        // –±—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å: –∏—Å–ø–æ–ª—å–∑—É–µ–º room –æ—Ç create, –Ω–æ –ø—Ä–æ—Å—Ç–∞–≤–∏–º –Ω—É–∂–Ω—ã–π id –¥–∞–ª–µ–µ –ø—Ä–∏ –∞–ø–¥–µ–π—Ç–µ –∏–≥—Ä–æ–∫–æ–≤
                        room.id = id;
                    } else {
                        // —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –∫–æ–º–Ω–∞—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å
                        room = { id, name: '–ö–æ–º–Ω–∞—Ç–∞', players: [], maxPlayers: 4, status: 'waiting' };
                    }
                }

                const players = Array.isArray(room.players) ? room.players.slice() : [];
                let idx = players.findIndex(p => p.username === playerData.username || p.id === playerData.userId);
                if (idx === -1) {
                    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
                    players.push({
                        id: playerData.userId || uuidv4(),
                        userId: playerData.userId,
                        username: playerData.username,
                        name: playerData.name || playerData.username,
                        avatar: playerData.avatar || '',
                        isHost: false,
                        isReady: !!playerData.isReady,
                        token: playerData.token || '',
                        dream: playerData.dream || null,
                        dreamCost: playerData.dreamCost,
                        dreamDescription: playerData.dreamDescription
                    });
                } else {
                    const upd = { ...players[idx] };
                    if (playerData.token !== undefined) upd.token = playerData.token;
                    if (playerData.dream !== undefined) upd.dream = playerData.dream;
                    if (playerData.dreamCost !== undefined) upd.dreamCost = playerData.dreamCost;
                    if (playerData.dreamDescription !== undefined) upd.dreamDescription = playerData.dreamDescription;
                    if (playerData.isReady !== undefined) upd.isReady = !!playerData.isReady;
                    players[idx] = upd;
                }

                await repo.updatePlayers(id, players);
                return res.json({ success: true, message: '–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (mongo)' });
            } catch (e) {
                console.error('‚ùå Mongo update player error:', e);
                return res.status(503).json({ success: false, message: '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' });
            }
        }

        // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
        const query = `
            SELECT rp.*, u.username 
            FROM room_players rp
            JOIN users u ON rp.user_id = u.id
            WHERE rp.room_id = ? AND u.username = ?
        `;

        db.get(query, [id, playerData.username], (err, player) => {
            if (err) {
                return next(err);
            }

            if (!player) {
                return res.status(404).json({
                    success: false,
                    message: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ'
                });
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
            const updateFields = [];
            const updateValues = [];

            if (playerData.token !== undefined) {
                updateFields.push('token = ?');
                updateValues.push(playerData.token);
            }

            // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ PlayerBundle: dream.id|description|cost
            if (playerData.dream !== undefined) {
                updateFields.push('dream = ?');
                updateValues.push(playerData.dream);
            }

            if (playerData.dreamCost !== undefined) {
                updateFields.push('dream_cost = ?');
                updateValues.push(playerData.dreamCost);
            }

            if (playerData.dreamDescription !== undefined) {
                updateFields.push('dream_description = ?');
                updateValues.push(playerData.dreamDescription);
            }

            if (playerData.isReady !== undefined) {
                updateFields.push('is_ready = ?');
                updateValues.push(playerData.isReady ? 1 : 0);
            }

            if (updateFields.length === 0) {
                return res.status(400).json({
                    success: false,
                    message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
                });
            }

            updateValues.push(player.id);

            db.run(
                `UPDATE room_players SET ${updateFields.join(', ')} WHERE id = ?`,
                updateValues,
                (err) => {
                    if (err) {
                        return next(err);
                    }

                    res.json({
                        success: true,
                        message: '–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
                    });
                }
            );
        });

    } catch (error) {
        next(error);
    }
});

// POST /api/rooms/:id/notifications - –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
router.post('/:id/notifications', (req, res, next) => {
    try {
        const roomId = req.params.id;
        const notification = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!notification.type || !notification.data) {
            return res.status(400).json({
                success: false,
                message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const db = getDatabase();
        if (!db) {
            // Fallback: –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            return res.json({
                success: true,
                message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (fallback mode)',
                data: {
                    roomId: roomId,
                    notificationId: `notif_${Date.now()}`
                }
            });
        }
        
        // Fallback: –µ—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ —Ç–∞–±–ª–∏—Ü–∞ notifications –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        // –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        return res.json({
            success: true,
            message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (fallback mode)',
            data: {
                roomId: roomId,
                notificationId: `notif_${Date.now()}`
            }
        });
        
    } catch (error) {
        next(error);
    }
});

/**
 * POST /api/rooms/:id/start - –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
 */
router.post('/:id/start', async (req, res, next) => {
    try {
        const { id } = req.params;
        const { userId } = req.body;

        console.log('üéÆ POST /:id/start - –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã:', { id, userId });

        const db = getDatabase();
        if (!db) {
            // Mongo-first start: –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º server-state
            try {
                const repo = new RoomRepository();
                const room = await repo.getById(id);
                if (!room) return res.status(404).json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

                await repo.updateStatus(id, { isStarted: true, status: 'playing' });

                // ensure game state
                const state = gameStateByRoomId.get(id) || {
                    players: (room.players || []).map(p => ({ id: p.id || p.userId, username: p.username, position: 0, isInner: true, token: p.token || 'üéØ', money: 5000, isReady: !!p.isReady })),
                    currentPlayerIndex: 0,
                    activePlayer: null,
                    lastDiceResult: null,
                    canRoll: true,
                    canMove: false,
                    canEndTurn: false
                };
                state.activePlayer = state.players[0] || null;
                gameStateByRoomId.set(id, state);

                // push notify (safe)
                pushService.broadcastPush('game_started', {
                    roomId: id,
                    players: state.players,
                    activePlayer: state.activePlayer
                }).catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã:', err));

                return res.json({ success: true, message: '–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞', data: { roomId: id, isStarted: true, status: 'playing' } });
            } catch (e) {
                console.error('‚ùå Mongo start error:', e);
                return res.status(503).json({ success: false, message: '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' });
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
        const roomQuery = `
            SELECT r.*, u.username as creator_name
            FROM rooms r
            LEFT JOIN users u ON r.creator_id = u.id
            WHERE r.id = ? AND r.status != 'deleted'
        `;

        db.get(roomQuery, [id], (err, room) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', err);
                return res.status(500).json({
                    success: false,
                    message: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
                    error: err.message
                });
            }

            if (!room) {
                return res.status(404).json({
                    success: false,
                    message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                });
            }

            // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞
            if (room.is_started) {
                return res.status(400).json({
                    success: false,
                    message: '–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞'
                });
            }

            // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ: —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å—Ç–∞—Ä—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é,
            // –Ω–æ –ª—é–±–æ–º—É –∏–≥—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ
            const ensureMemberThenStart = () => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
            const playersQuery = `
                SELECT COUNT(*) as ready_count, 
                       (SELECT COUNT(*) FROM room_players WHERE room_id = ?) as total_count
                FROM room_players 
                WHERE room_id = ? AND is_ready = 1
            `;

            db.get(playersQuery, [id, id], (err, counts) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∏–≥—Ä–æ–∫–æ–≤:', err);
                        return res.status(500).json({
                            success: false,
                            message: '–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∏–≥—Ä–æ–∫–æ–≤',
                            error: err.message
                        });
                    }

                    // –†–∞–∑—Ä–µ—à–∞–µ–º —Å—Ç–∞—Ä—Ç –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ö–æ—Ç—è –±—ã 1 –≥–æ—Ç–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
                    if (counts.ready_count < 1) {
                    return res.status(400).json({
                        success: false,
                            message: '–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –Ω—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã 1 –≥–æ—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫'
                    });
                }

                // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
                const updateQuery = `
                    UPDATE rooms 
                    SET is_started = 1, status = 'playing', updated_at = CURRENT_TIMESTAMP
                    WHERE id = ?
                `;

                db.run(updateQuery, [id], function(err) {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', err);
                            return res.status(500).json({
                                success: false,
                                message: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã',
                                error: err.message
                            });
                    }

                    console.log('üéÆ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ:', id);

                        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ server-state (–µ—Å–ª–∏ –µ—Å—Ç—å)
                        let startPlayers = [];
                        const state = gameStateByRoomId.get(id);
                        if (state && Array.isArray(state.players) && state.players.length) {
                            startPlayers = state.players;
                        } else {
                            startPlayers = [{ id: userId, username: room.creator_name || 'player1' }];
                        }

                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
                        pushService.broadcastPush('game_started', { 
                            roomId: id, 
                            players: startPlayers,
                            activePlayer: startPlayers[0] // –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç
                        }).catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã:', err));
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        pushService.sendRealPushNotification(
                            'üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!',
                            `–ò–≥—Ä–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ "${room.name}" –Ω–∞—á–∞–ª–∞—Å—å. –í–∞—à —Ö–æ–¥!`,
                            {
                                data: { roomId: id, action: 'game_started' },
                                actions: [
                                    { action: 'open_game', title: '–û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É' }
                                ],
                                tag: 'game_started',
                                requireInteraction: true
                            }
                        ).catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ push –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã:', err));

                    res.json({
                        success: true,
                        message: '–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞',
                        data: {
                            roomId: id,
                            isStarted: true,
                            status: 'playing'
                        }
                    });
                });
            });
            };

            if (room.creator_id !== userId) {
                // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å—Ç–∞—Ä—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–ª–µ–Ω—Å—Ç–≤–∞,
                // —Ç–∞–∫ –∫–∞–∫ —á–∞—Å—Ç–æ userId –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
                ensureMemberThenStart();
                return;
            }

            // –°–æ–∑–¥–∞—Ç–µ–ª—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
            ensureMemberThenStart();
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', error);
        return res.status(500).json({
            success: false,
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            error: error.message
        });
    }
});

// Endpoint –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ PushService
router.post('/push/register', (req, res) => {
    const { subscription, userInfo } = req.body;
    
    if (!subscription) {
        return res.status(400).json({
            success: false,
            message: 'subscription –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'
        });
    }
    
    const clientId = userInfo?.userId || `client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    pushService.registerClient(clientId, subscription, userInfo);
    
    res.json({
        success: true,
        message: '–ö–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
        clientId: clientId
    });
});

// Endpoint –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
router.post('/push/unregister', (req, res) => {
    const { clientId } = req.body;
    
    if (!clientId) {
        return res.status(400).json({
            success: false,
            message: 'clientId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
        });
    }
    
    pushService.unregisterClient(clientId);
    
    res.json({
        success: true,
        message: '–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
    });
});

// Endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
router.post('/push/send', async (req, res) => {
    try {
        const { title, message, options = {}, excludeClientId } = req.body;
        
        if (!title || !message) {
            return res.status(400).json({
                success: false,
                message: 'title –∏ message –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }
        
        const result = await pushService.sendRealPushNotification(title, message, options, excludeClientId);
        
        res.json({
            success: result.success,
            data: result,
            message: result.success ? 'Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
        });
        
    } catch (error) {
        console.error('‚ùå Push API: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        res.status(500).json({
            success: false,
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            error: error.message
        });
    }
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ PushService
router.get('/push/stats', (req, res) => {
    const stats = pushService.getStats();
    res.json({
        success: true,
        data: stats
    });
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º router –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
router.getRoomGameState = getRoomGameState;
router.updateRoomGameState = updateRoomGameState;
router.gameStateByRoomId = gameStateByRoomId;

module.exports = router;
/**
 * DELETE /api/rooms/:id/players/:playerId - –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã (—Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç)
 */
router.delete('/:id/players/:playerId', async (req, res, next) => {
    try {
        const { id, playerId } = req.params;
        const db = getDatabase();
        if (!db) {
            return res.status(503).json({ success: false, message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' });
        }

        // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ room_players
        db.run('DELETE FROM room_players WHERE room_id = ? AND user_id = ?', [id, playerId], (err) => {
            if (err) return next(err);

            // –£–º–µ–Ω—å—à–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤
            db.run('UPDATE rooms SET current_players = MAX(current_players - 1, 0), updated_at = CURRENT_TIMESTAMP WHERE id = ?', [id]);

            return res.json({ success: true, message: '–ò–≥—Ä–æ–∫ —É–¥–∞–ª—ë–Ω' });
        });
    } catch (error) {
        next(error);
    }
});
