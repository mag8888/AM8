/**
 * Bank API Routes
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
 */

const express = require('express');
const router = express.Router();

// –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
const PushService = require('../services/PushService');
const roomsModule = require('./rooms');

// –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ rooms module
const getRoomGameState = roomsModule.getRoomGameState;
const updateRoomGameState = roomsModule.updateRoomGameState;
const gameStateByRoomId = roomsModule.gameStateByRoomId || new Map();

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ routes/rooms.js –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
const bankTransactions = new Map(); // roomId -> transactions[]
const playerBalances = new Map(); // roomId -> playerId -> balance

/**
 * GET /api/bank/balance/:roomId/:playerId
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
 */
router.get('/balance/:roomId/:playerId', async (req, res) => {
    try {
        const { roomId, playerId } = req.params;
        
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ –∏–≥—Ä—ã
        const roomData = getRoomGameState(roomId);
        if (!roomData) {
            return res.status(404).json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        const player = roomData.players?.find(p => p.id === playerId);
        if (!player) {
            return res.status(404).json({ success: false, message: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json({
            success: true,
            data: {
                playerId: playerId,
                balance: player.money || 0,
                lastUpdated: new Date().toISOString()
            }
        });
    } catch (error) {
        console.error('‚ùå Bank API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
        res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

/**
 * POST /api/bank/transfer
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏
 */
router.post('/transfer', async (req, res) => {
    try {
        console.log('üè¶ Bank API: –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–≤–æ–¥–∞:', req.body);
        
        const { roomId, fromPlayerId, toPlayerId, amount, description } = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!roomId || !fromPlayerId || !toPlayerId || !amount) {
            console.log('‚ùå Bank API: –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { roomId, fromPlayerId, toPlayerId, amount });
            return res.status(400).json({ 
                success: false, 
                message: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' 
            });
        }
        
        if (amount <= 0) {
            console.log('‚ùå Bank API: –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞:', amount);
            return res.status(400).json({ 
                success: false, 
                message: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è' 
            });
        }
        
        if (fromPlayerId === toPlayerId) {
            console.log('‚ùå Bank API: –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–µ–±–µ:', fromPlayerId);
            return res.status(400).json({ 
                success: false, 
                message: '–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ' 
            });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
        console.log('üè¶ Bank API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', roomId);
        const roomData = getRoomGameState(roomId);
        if (!roomData) {
            console.log('‚ùå Bank API: –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', roomId);
            return res.status(404).json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        console.log('üè¶ Bank API: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', roomData);
        
        const fromPlayer = roomData.players?.find(p => p.id === fromPlayerId);
        const toPlayer = roomData.players?.find(p => p.id === toPlayerId);
        
        if (!fromPlayer || !toPlayer) {
            console.log('‚ùå Bank API: –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω:', { fromPlayer: !!fromPlayer, toPlayer: !!toPlayer });
            return res.status(404).json({ success: false, message: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        console.log('üè¶ Bank API: –ò–≥—Ä–æ–∫–∏ –Ω–∞–π–¥–µ–Ω—ã:', { 
            fromPlayer: fromPlayer.username, 
            fromBalance: fromPlayer.money,
            toPlayer: toPlayer.username,
            toBalance: toPlayer.money 
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
        if (fromPlayer.money < amount) {
            console.log('‚ùå Bank API: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:', { 
                current: fromPlayer.money, 
                required: amount 
            });
            return res.status(400).json({ 
                success: false, 
                message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞' 
            });
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        const oldFromBalance = fromPlayer.money;
        const oldToBalance = toPlayer.money;
        
        fromPlayer.money -= amount;
        toPlayer.money += amount;
        
        console.log('üè¶ Bank API: –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω:', {
            fromBalance: `${oldFromBalance} -> ${fromPlayer.money}`,
            toBalance: `${oldToBalance} -> ${toPlayer.money}`
        });
        
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const transaction = {
            id: `tx_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            roomId: roomId,
            fromPlayerId: fromPlayerId,
            toPlayerId: toPlayerId,
            amount: amount,
            description: description || `–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç ${fromPlayer.username} –∫ ${toPlayer.username}`,
            timestamp: new Date().toISOString(),
            status: 'completed'
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        if (!bankTransactions.has(roomId)) {
            bankTransactions.set(roomId, []);
        }
        bankTransactions.get(roomId).push(transaction);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
        console.log('üè¶ Bank API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
        updateRoomGameState(roomId, roomData);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        const pushData = {
            type: 'bank:transfer',
            roomId: roomId,
            transaction: transaction,
            players: roomData.players
        };
        
        try {
            console.log('üè¶ Bank API: –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
            // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä PushService –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            const pushService = new PushService();
            await pushService.broadcastPush('bank_transfer', pushData);
            console.log('‚úÖ Bank API: Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
        } catch (pushError) {
            console.warn('‚ö†Ô∏è Bank API: –û—à–∏–±–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', pushError);
        }
        
        const responseData = {
            success: true,
            data: {
                transaction: transaction,
                fromPlayerBalance: fromPlayer.money,
                toPlayerBalance: toPlayer.money
            }
        };
        
        console.log('‚úÖ Bank API: –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω:', responseData);
        
        res.json(responseData);
        
    } catch (error) {
        console.error('‚ùå Bank API: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
        console.error('‚ùå Bank API: Stack trace:', error.stack);
        res.status(500).json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            details: error.message 
        });
    }
});

/**
 * GET /api/bank/transactions/:roomId/:playerId?
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
router.get('/transactions/:roomId/:playerId?', async (req, res) => {
    try {
        const { roomId, playerId } = req.params;
        
        const transactions = bankTransactions.get(roomId) || [];
        
        let filteredTransactions = transactions;
        if (playerId) {
            filteredTransactions = transactions.filter(t => 
                t.fromPlayerId === playerId || t.toPlayerId === playerId
            );
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        filteredTransactions.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
        
        res.json({
            success: true,
            data: {
                transactions: filteredTransactions,
                total: filteredTransactions.length
            }
        });
        
    } catch (error) {
        console.error('‚ùå Bank API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
        res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

/**
 * POST /api/bank/update-balance
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞ (–¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
 */
router.post('/update-balance', async (req, res) => {
    try {
        const { roomId, playerId, newBalance, reason } = req.body;
        
        if (!roomId || !playerId || newBalance === undefined) {
            return res.status(400).json({ 
                success: false, 
                message: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' 
            });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
        const roomData = getRoomGameState(roomId);
        if (!roomData) {
            return res.status(404).json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        const player = roomData.players?.find(p => p.id === playerId);
        if (!player) {
            return res.status(404).json({ success: false, message: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const oldBalance = player.money;
        player.money = newBalance;
        
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        const transaction = {
            id: `tx_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            roomId: roomId,
            fromPlayerId: 'system',
            toPlayerId: playerId,
            amount: newBalance - oldBalance,
            description: reason || '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
            timestamp: new Date().toISOString(),
            status: 'completed'
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        if (!bankTransactions.has(roomId)) {
            bankTransactions.set(roomId, []);
        }
        bankTransactions.get(roomId).push(transaction);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
        updateRoomGameState(roomId, roomData);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const pushData = {
            type: 'bank:balanceUpdated',
            roomId: roomId,
            playerId: playerId,
            oldBalance: oldBalance,
            newBalance: newBalance,
            players: roomData.players
        };
        
        try {
            const pushService = new PushService();
            await pushService.broadcastPush('bank_balanceUpdated', pushData);
        } catch (pushError) {
            console.warn('‚ö†Ô∏è Bank API: –û—à–∏–±–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', pushError);
        }
        
        res.json({
            success: true,
            data: {
                playerId: playerId,
                oldBalance: oldBalance,
                newBalance: newBalance,
                transaction: transaction
            }
        });
        
        console.log(`‚úÖ Bank API: –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω ${playerId}: $${oldBalance} -> $${newBalance}`);
        
    } catch (error) {
        console.error('‚ùå Bank API: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
        res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

/**
 * GET /api/bank/room-balances/:roomId
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
 */
router.get('/room-balances/:roomId', async (req, res) => {
    try {
        const { roomId } = req.params;
        
        console.log('üè¶ Bank API: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –∫–æ–º–Ω–∞—Ç—ã:', roomId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ getRoomGameState —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
        if (typeof getRoomGameState !== 'function') {
            console.error('‚ùå Bank API: getRoomGameState –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π:', typeof getRoomGameState);
            return res.status(500).json({ 
                success: false, 
                message: '–§—É–Ω–∫—Ü–∏—è getRoomGameState –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' 
            });
        }
        
        const roomData = getRoomGameState(roomId);
        console.log('üè¶ Bank API: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:', {
            roomId,
            hasRoomData: !!roomData,
            roomDataType: typeof roomData,
            hasPlayers: !!(roomData && roomData.players),
            playersCount: roomData?.players?.length || 0,
            roomDataKeys: roomData ? Object.keys(roomData) : 'no roomData'
        });
        
        if (!roomData) {
            console.log('‚ùå Bank API: –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', roomId);
            return res.status(404).json({ 
                success: false, 
                message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                roomId: roomId 
            });
        }
        
        if (!roomData.players || !Array.isArray(roomData.players)) {
            console.log('‚ö†Ô∏è Bank API: –í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –∏–ª–∏ players –Ω–µ –º–∞—Å—Å–∏–≤:', roomData.players);
            return res.json({
                success: true,
                data: {
                    roomId: roomId,
                    balances: [],
                    totalPlayers: 0
                }
            });
        }
        
        const balances = roomData.players.map(player => {
            if (!player) {
                console.warn('‚ö†Ô∏è Bank API: –û–±–Ω–∞—Ä—É–∂–µ–Ω null/undefined –∏–≥—Ä–æ–∫');
                return null;
            }
            return {
                playerId: player.id || 'unknown',
                username: player.username || 'Unknown',
                balance: typeof player.money === 'number' ? player.money : 0,
                lastUpdated: new Date().toISOString()
            };
        }).filter(balance => balance !== null);
        
        console.log('‚úÖ Bank API: –ù–∞–π–¥–µ–Ω–æ –±–∞–ª–∞–Ω—Å–æ–≤:', balances.length);
        
        res.json({
            success: true,
            data: {
                roomId: roomId,
                balances: balances,
                totalPlayers: balances.length
            }
        });
        
    } catch (error) {
        console.error('‚ùå Bank API: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:', error);
        console.error('‚ùå Bank API: Stack trace:', error.stack);
        res.status(500).json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            details: error.message 
        });
    }
});

/**
 * GET /api/bank/debug/rooms
 * –û—Ç–ª–∞–¥–æ—á–Ω—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
 */
router.get('/debug/rooms', (req, res) => {
    try {
        console.log('üè¶ Bank API: –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ gameStateByRoomId
        const rooms = [];
        for (const [roomId, state] of gameStateByRoomId.entries()) {
            rooms.push({
                roomId,
                hasState: !!state,
                playersCount: state?.players?.length || 0,
                gameStarted: state?.gameStarted || false,
                activePlayer: state?.activePlayer?.username || 'none'
            });
        }
        
        res.json({
            success: true,
            data: {
                totalRooms: rooms.length,
                rooms: rooms
            }
        });
        
    } catch (error) {
        console.error('‚ùå Bank API: –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error);
        res.status(500).json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏',
            details: error.message 
        });
    }
});

/**
 * POST /api/bank/loan/take
 * –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç: –∑–∞—á–∏—Å–ª—è–µ—Ç –¥–µ–Ω—å–≥–∏ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
 */
router.post('/loan/take', async (req, res) => {
    try {
        const { roomId, playerId, amount } = req.body;
        if (!roomId || !playerId || !amount) return res.status(400).json({ success: false, message: 'roomId, playerId, amount –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        const roomData = getRoomGameState(roomId);
        if (!roomData) return res.status(404).json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        const player = roomData.players?.find(p => p.id === playerId);
        if (!player) return res.status(404).json({ success: false, message: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        const take = Math.max(0, Math.floor(Number(amount) / 1000) * 1000);
        // –ª–∏–º–∏—Ç: net*10 (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ player), –∏–Ω–∞—á–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        const net = Number(player.netIncome || 0);
        const maxLoan = Math.max(0, Math.floor((net * 10) / 1000) * 1000);
        const currentLoan = Number(player.currentLoan || 0);
        const available = maxLoan > 0 ? Math.max(0, maxLoan - currentLoan) : take;
        const finalAmount = maxLoan > 0 ? Math.min(take, available) : take;
        if (finalAmount <= 0) return res.status(400).json({ success: false, message: '–°—É–º–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' });
        player.currentLoan = currentLoan + finalAmount;
        player.money = Number(player.money || 0) + finalAmount;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º
        updateRoomGameState(roomId, roomData);
        // Push –≤—Å–µ–º
        try { await new PushService().broadcastPush('bank_balanceUpdated', { roomId, players: roomData.players }); } catch (_) {}
        return res.json({ success: true, data: { player, amount: finalAmount } });
    } catch (e) {
        console.error('‚ùå Bank API: loan/take error', e);
        return res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

/**
 * POST /api/bank/loan/repay
 * –ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞: —Å–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ–Ω—å–≥–∏ –∏ —É–º–µ–Ω—å—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–æ–ª–≥
 */
router.post('/loan/repay', async (req, res) => {
    try {
        const { roomId, playerId, amount } = req.body;
        if (!roomId || !playerId || !amount) return res.status(400).json({ success: false, message: 'roomId, playerId, amount –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        const roomData = getRoomGameState(roomId);
        if (!roomData) return res.status(404).json({ success: false, message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        const player = roomData.players?.find(p => p.id === playerId);
        if (!player) return res.status(404).json({ success: false, message: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        const repay = Math.max(0, Math.floor(Number(amount) / 1000) * 1000);
        const currentLoan = Number(player.currentLoan || 0);
        const balance = Number(player.money || 0);
        const finalAmount = Math.min(repay, currentLoan, balance);
        if (finalAmount <= 0) return res.status(400).json({ success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–∞ –∏–ª–∏ –±–∞–ª–∞–Ω—Å–∞' });
        player.currentLoan = currentLoan - finalAmount;
        player.money = balance - finalAmount;
        updateRoomGameState(roomId, roomData);
        try { await new PushService().broadcastPush('bank_balanceUpdated', { roomId, players: roomData.players }); } catch (_) {}
        return res.json({ success: true, data: { player, amount: finalAmount } });
    } catch (e) {
        console.error('‚ùå Bank API: loan/repay error', e);
        return res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

module.exports = router;
