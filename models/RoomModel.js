const mongoose = require('mongoose');
const crypto = require('crypto');

/**
 * –°—Ö–µ–º–∞ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
 */
const PlayerSchema = new mongoose.Schema({
    userId: { type: String, required: true },
    name: { type: String, required: true },
    username: { type: String, default: '' },
    avatar: { type: String, default: '' },
    isHost: { type: Boolean, default: false },
    isReady: { type: Boolean, default: false },
    position: { type: Number, default: 0 },
    profession: { type: String, default: null },
    joinedAt: { type: Date, default: Date.now }
}, {
    _id: false
});

/**
 * –°—Ö–µ–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
 */
const GameStateSchema = new mongoose.Schema({
    activePlayerIndex: { type: Number, default: 0 },
    hasRolledThisTurn: { type: Boolean, default: false },
    currentPhase: { type: String, default: 'waiting' },
    turnStartTime: { type: Number, default: Date.now },
    gameStartTime: { type: Number, default: Date.now },
    diceResult: { type: Number, default: null },
    lastMove: { type: mongoose.Schema.Types.Mixed, default: null },
    turnTimer: { type: Number, default: 30000 }
}, {
    _id: false
});

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ö–µ–º–∞ –∫–æ–º–Ω–∞—Ç—ã
 */
const RoomSchema = new mongoose.Schema({
    _id: { type: String, default: () => crypto.randomUUID() },
    name: { type: String, required: true, trim: true, maxlength: 100 },
    creatorId: { type: String, required: true },
    creatorName: { type: String, required: true },
    creatorAvatar: { type: String, default: '' },
    maxPlayers: { type: Number, required: true, min: 2, max: 8 },
    minPlayers: { type: Number, default: 2 },
    turnTime: { type: Number, required: true, min: 10, max: 120 },
    assignProfessions: { type: Boolean, default: false },
    players: [PlayerSchema],
    gameState: { type: GameStateSchema, default: null },
    isStarted: { type: Boolean, default: false },
    isFinished: { type: Boolean, default: false },
    createdAt: { type: Date, default: Date.now },
    updatedAt: { type: Date, default: Date.now }
}, {
    timestamps: false, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–∏ –ø–æ–ª—è createdAt/updatedAt
    versionKey: false
});

// –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
RoomSchema.index({ name: 1 }, { unique: true });
RoomSchema.index({ creatorId: 1 });
RoomSchema.index({ isStarted: 1, isFinished: 1 });
RoomSchema.index({ createdAt: 1 });
RoomSchema.index({ 'players.userId': 1 });

// Middleware –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updatedAt
RoomSchema.pre('save', function(next) {
    this.updatedAt = new Date();
    next();
});

// Middleware –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updatedAt –ø—Ä–∏ findOneAndUpdate
RoomSchema.pre('findOneAndUpdate', function(next) {
    this.set({ updatedAt: new Date() });
    next();
});

const Room = mongoose.model('Room', RoomSchema);

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é –∫–æ–º–Ω–∞—Ç—ã
 */
class RoomModel {
    constructor() {
        console.log('üè† RoomModel: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        console.log('‚úÖ RoomModel: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
     * @param {Object} roomData - –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Object} –°–æ–∑–¥–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞
     */
    async createRoom(roomData) {
        try {
            console.log('üíæ RoomModel: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', roomData.name);
            
            const room = new Room(roomData);
            await room.save();
            
            console.log('‚úÖ RoomModel: –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', room._id);
            return room;
            
        } catch (error) {
            console.error('‚ùå RoomModel: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ ID
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Object|null} –ö–æ–º–Ω–∞—Ç–∞ –∏–ª–∏ null
     */
    async findById(roomId) {
        try {
            console.log('üíæ RoomModel: –ü–æ–∏—Å–∫ –∫–æ–º–Ω–∞—Ç—ã –ø–æ ID:', roomId);
            
            const room = await Room.findById(roomId);
            
            if (room) {
                console.log('‚úÖ RoomModel: –ö–æ–º–Ω–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞:', roomId);
            } else {
                console.log('‚ùå RoomModel: –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', roomId);
            }
            
            return room;
            
        } catch (error) {
            console.error('‚ùå RoomModel: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç—ã:', error);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ –∏–º–µ–Ω–∏
     * @param {string} roomName - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Object|null} –ö–æ–º–Ω–∞—Ç–∞ –∏–ª–∏ null
     */
    async findByName(roomName) {
        try {
            console.log('üíæ RoomModel: –ü–æ–∏—Å–∫ –∫–æ–º–Ω–∞—Ç—ã –ø–æ –∏–º–µ–Ω–∏:', roomName);
            
            const room = await Room.findOne({ name: roomName });
            
            if (room) {
                console.log('‚úÖ RoomModel: –ö–æ–º–Ω–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –∏–º–µ–Ω–∏:', roomName);
            } else {
                console.log('‚ùå RoomModel: –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –∏–º–µ–Ω–∏:', roomName);
            }
            
            return room;
            
        } catch (error) {
            console.error('‚ùå RoomModel: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç—ã –ø–æ –∏–º–µ–Ω–∏:', error);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
     * @param {Object} filter - –§–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –∫–æ–º–Ω–∞—Ç
     */
    async findAll(filter = {}) {
        try {
            console.log('üíæ RoomModel: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç');
            
            const rooms = await Room.find(filter)
                .sort({ createdAt: -1 })
                .lean();
            
            console.log(`‚úÖ RoomModel: –ù–∞–π–¥–µ–Ω–æ ${rooms.length} –∫–æ–º–Ω–∞—Ç`);
            return rooms;
            
        } catch (error) {
            console.error('‚ùå RoomModel: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:', error);
            return [];
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {Object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @returns {Object|null} –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ –∏–ª–∏ null
     */
    async updateRoom(roomId, updateData) {
        try {
            console.log('üíæ RoomModel: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', roomId);
            
            const room = await Room.findByIdAndUpdate(
                roomId,
                { $set: updateData },
                { new: true, runValidators: true }
            );
            
            if (room) {
                console.log('‚úÖ RoomModel: –ö–æ–º–Ω–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', roomId);
            } else {
                console.log('‚ùå RoomModel: –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', roomId);
            }
            
            return room;
            
        } catch (error) {
            console.error('‚ùå RoomModel: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            throw error;
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @returns {boolean} true - —É—Å–ø–µ—à–Ω–æ, false - –æ—à–∏–±–∫–∞
     */
    async deleteRoom(roomId) {
        try {
            console.log('üíæ RoomModel: –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', roomId);
            
            const result = await Room.findByIdAndDelete(roomId);
            
            if (result) {
                console.log('‚úÖ RoomModel: –ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞:', roomId);
                return true;
            } else {
                console.log('‚ùå RoomModel: –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', roomId);
                return false;
            }
            
        } catch (error) {
            console.error('‚ùå RoomModel: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç –ø–æ —Å—Ç–∞—Ç—É—Å—É
     * @param {boolean} isStarted - –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
     * @param {boolean} isFinished - –°—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –∫–æ–º–Ω–∞—Ç
     */
    async findByStatus(isStarted, isFinished) {
        try {
            console.log('üíæ RoomModel: –ü–æ–∏—Å–∫ –∫–æ–º–Ω–∞—Ç –ø–æ —Å—Ç–∞—Ç—É—Å—É');
            
            const rooms = await Room.find({ isStarted, isFinished })
                .sort({ createdAt: -1 })
                .lean();
            
            console.log(`‚úÖ RoomModel: –ù–∞–π–¥–µ–Ω–æ ${rooms.length} –∫–æ–º–Ω–∞—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º`);
            return rooms;
            
        } catch (error) {
            console.error('‚ùå RoomModel: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç –ø–æ —Å—Ç–∞—Ç—É—Å—É:', error);
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç –ø–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é
     * @param {string} creatorId - ID —Å–æ–∑–¥–∞—Ç–µ–ª—è
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –∫–æ–º–Ω–∞—Ç
     */
    async findByCreator(creatorId) {
        try {
            console.log('üíæ RoomModel: –ü–æ–∏—Å–∫ –∫–æ–º–Ω–∞—Ç –ø–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é:', creatorId);
            
            const rooms = await Room.find({ creatorId })
                .sort({ createdAt: -1 })
                .lean();
            
            console.log(`‚úÖ RoomModel: –ù–∞–π–¥–µ–Ω–æ ${rooms.length} –∫–æ–º–Ω–∞—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è`);
            return rooms;
            
        } catch (error) {
            console.error('‚ùå RoomModel: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç –ø–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é:', error);
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç –ø–æ –∏–≥—Ä–æ–∫—É
     * @param {string} userId - ID –∏–≥—Ä–æ–∫–∞
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –∫–æ–º–Ω–∞—Ç
     */
    async findByPlayer(userId) {
        try {
            console.log('üíæ RoomModel: –ü–æ–∏—Å–∫ –∫–æ–º–Ω–∞—Ç –ø–æ –∏–≥—Ä–æ–∫—É:', userId);
            
            const rooms = await Room.find({ 'players.userId': userId })
                .sort({ createdAt: -1 })
                .lean();
            
            console.log(`‚úÖ RoomModel: –ù–∞–π–¥–µ–Ω–æ ${rooms.length} –∫–æ–º–Ω–∞—Ç –∏–≥—Ä–æ–∫–∞`);
            return rooms;
            
        } catch (error) {
            console.error('‚ùå RoomModel: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç –ø–æ –∏–≥—Ä–æ–∫—É:', error);
            return [];
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç
     * @param {Date} cutoffDate - –î–∞—Ç–∞ –æ—Ç—Å–µ—á–µ–Ω–∏—è
     * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
     */
    async cleanupOldRooms(cutoffDate) {
        try {
            console.log('üíæ RoomModel: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç');
            
            const result = await Room.deleteMany({
                createdAt: { $lt: cutoffDate },
                isStarted: false
            });
            
            console.log(`‚úÖ RoomModel: –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç`);
            return result.deletedCount;
            
        } catch (error) {
            console.error('‚ùå RoomModel: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç:', error);
            return 0;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–Ω–∞—Ç
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    async getStats() {
        try {
            console.log('üíæ RoomModel: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–Ω–∞—Ç');
            
            const stats = await Room.aggregate([
                {
                    $group: {
                        _id: null,
                        totalRooms: { $sum: 1 },
                        activeRooms: {
                            $sum: { $cond: [{ $eq: ['$isFinished', false] }, 1, 0] }
                        },
                        startedGames: {
                            $sum: { 
                                $cond: [
                                    { $and: [{ $eq: ['$isStarted', true] }, { $eq: ['$isFinished', false] }] }, 
                                    1, 
                                    0
                                ] 
                            }
                        },
                        totalPlayers: { $sum: { $size: '$players' } },
                        averagePlayersPerRoom: { $avg: { $size: '$players' } }
                    }
                }
            ]);
            
            const result = stats[0] || {
                totalRooms: 0,
                activeRooms: 0,
                startedGames: 0,
                totalPlayers: 0,
                averagePlayersPerRoom: 0
            };
            
            console.log('‚úÖ RoomModel: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞');
            return result;
            
        } catch (error) {
            console.error('‚ùå RoomModel: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return {
                totalRooms: 0,
                activeRooms: 0,
                startedGames: 0,
                totalPlayers: 0,
                averagePlayersPerRoom: 0
            };
        }
    }
}

module.exports = RoomModel;
