/**
 * CardEditor v1.0.0
 * -----------------------------------------------------------------------------
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–Ω—ã–º–∏ –∫–æ–ª–æ–¥–∞–º–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç)
 * –†–∞–±–æ—Ç–∞–µ—Ç —Å API /api/cards –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ config/cards.json
 */

class CardEditor {
    constructor(config = {}) {
        this.apiBaseUrl = config.apiBaseUrl || '/api/cards';
        this.sidebarId = config.sidebarId || 'cards-deck-list';
        this.editorId = config.editorId || 'cards-editor';

        this.sidebarElement = document.getElementById(this.sidebarId);
        this.editorElement = document.getElementById(this.editorId);

        if (!this.sidebarElement || !this.editorElement) {
            console.warn('‚ö†Ô∏è CardEditor: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
            return;
        }

        this.decks = [];
        this.version = 1;
        this.currentDeckId = null;
        this.currentCardId = null;
        this.currentCardLocation = null;
        this.cardFormState = null;
        this.cardFormDirty = false;
        this.unsavedChanges = false;

        this.isLoading = false;

        this.loadDecks();
        this.setupBeforeUnloadWarning();
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–ª–æ–¥ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async loadDecks() {
        if (this.isLoading) return;
        this.isLoading = true;
        try {
            this.renderSidebarLoading();
            const response = await fetch(this.apiBaseUrl, {
                method: 'GET',
                credentials: 'same-origin',
                headers: { 'Accept': 'application/json' }
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç (HTTP ${response.status})`);
            }

            const payload = await response.json();
            if (!payload.success) {
                throw new Error(payload.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–Ω—ã–µ –∫–æ–ª–æ–¥—ã');
            }

            const data = payload.data || {};
            this.version = data.version || this.version;
            this.decks = Array.isArray(data.decks)
                ? data.decks.map((deck) => this.normalizeDeck(deck))
                : [];

            if (!this.currentDeckId && this.decks.length > 0) {
                this.currentDeckId = this.decks[0].id;
            }

            this.renderSidebar();
            this.renderDeckEditor(this.getCurrentDeck());
        } catch (error) {
            console.error('‚ùå CardEditor: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–æ–¥:', error);
            this.renderSidebarError(error);
            this.renderEditorError(error);
        } finally {
            this.isLoading = false;
        }
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–¥—ã
     */
    normalizeDeck(deck = {}) {
        return {
            id: deck.id || this.generateId(),
            name: deck.name || '–ù–æ–≤–∞—è –∫–æ–ª–æ–¥–∞',
            subtitle: deck.subtitle || '',
            drawDescription: deck.drawDescription || '',
            discardDescription: deck.discardDescription || '',
            drawPile: Array.isArray(deck.drawPile) ? deck.drawPile.map((card) => this.normalizeCard(card)) : [],
            discardPile: Array.isArray(deck.discardPile) ? deck.discardPile.map((card) => this.normalizeCard(card)) : []
        };
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
     */
    normalizeCard(card = {}) {
        return {
            ...card,
            id: card.id || this.generateId('card'),
            title: card.title || card.name || '–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞',
            description: card.description || '',
            amount: this.normalizeNumber(card.amount),
            income: this.normalizeNumber(card.income),
            expense: this.normalizeNumber(card.expense),
            notes: card.notes || '',
            tags: Array.isArray(card.tags)
                ? card.tags
                : (typeof card.tags === 'string' && card.tags.length ? card.tags.split(',').map((tag) => tag.trim()).filter(Boolean) : []),
            metadata: typeof card.metadata === 'object' && card.metadata !== null ? card.metadata : {}
        };
    }

    normalizeNumber(value) {
        if (value === null || value === undefined || value === '') {
            return null;
        }
        const num = Number(value);
        return Number.isFinite(num) ? num : null;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
     */
    generateId(prefix = 'deck') {
        if (window.crypto?.randomUUID) {
            return window.crypto.randomUUID();
        }
        return `${prefix}-${Math.random().toString(36).slice(2, 10)}`;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–ª–æ–¥—É
     */
    getCurrentDeck() {
        if (!this.currentDeckId) return null;
        return this.decks.find((deck) => deck.id === this.currentDeckId) || null;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ id –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é
     */
    findCard(deck, cardId, location = 'draw') {
        if (!deck || !cardId) return null;
        const pile = location === 'discard' ? deck.discardPile : deck.drawPile;
        return pile.find((card) => card.id === cardId) || null;
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
     */
    renderSidebarLoading() {
        if (!this.sidebarElement) return;
        this.sidebarElement.innerHTML = `
            <div class="cards-sidebar-header">
                <h3>–ö–æ–ª–æ–¥—ã</h3>
                <div class="deck-counter">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            </div>
            <div class="cards-deck-list">
                <div class="cards-empty-state">
                    <strong>–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ</strong>
                    –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫.
                </div>
            </div>
        `;
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –æ—à–∏–±–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
     */
    renderSidebarError(error) {
        if (!this.sidebarElement) return;
        this.sidebarElement.innerHTML = `
            <div class="cards-sidebar-header">
                <h3>–ö–æ–ª–æ–¥—ã</h3>
                <div class="deck-counter">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>
            </div>
            <div class="cards-deck-list">
                <div class="cards-empty-state">
                    <strong>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</strong>
                    ${this.escapeHTML(error?.message || '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.')}
                </div>
            </div>
        `;
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
     */
    renderSidebar() {
        if (!this.sidebarElement) return;

        const listHtml = this.decks.map((deck) => {
            const isActive = deck.id === this.currentDeckId;
            return `
                <div class="deck-item${isActive ? ' active' : ''}" data-deck-id="${deck.id}">
                    <div class="deck-item-title">${this.escapeHTML(deck.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</div>
                    ${deck.subtitle ? `<div class="deck-item-subtitle">${this.escapeHTML(deck.subtitle)}</div>` : ''}
                    <div class="deck-item-stats">
                        <span title="–í –∫–æ–ª–æ–¥–µ">üì¶ ${deck.drawPile.length}</span>
                        <span title="–í –æ—Ç–±–æ–µ">‚ôªÔ∏è ${deck.discardPile.length}</span>
                    </div>
                </div>
            `;
        }).join('');

        this.sidebarElement.innerHTML = `
            <div class="cards-sidebar-header">
                <h3>–ö–æ–ª–æ–¥—ã</h3>
                <div class="deck-counter">${this.decks.length} / ${DEFAULT_DECK_COUNT}</div>
            </div>
            <div class="cards-deck-list">
                ${listHtml || `
                    <div class="cards-empty-state">
                        <strong>–ù–µ—Ç –∫–æ–ª–æ–¥</strong>
                        –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–æ–ª–æ–¥—É –≤ config/cards.json
                    </div>
                `}
            </div>
        `;

        this.sidebarElement.querySelectorAll('.deck-item').forEach((item) => {
            item.addEventListener('click', () => {
                const deckId = item.dataset.deckId;
                this.handleDeckSelection(deckId);
            });
        });
    }

    handleDeckSelection(deckId) {
        if (!deckId || deckId === this.currentDeckId) return;

        if (this.cardFormDirty && !confirm('–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ. –ü–µ—Ä–µ–π—Ç–∏ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è?')) {
            return;
        }

        this.currentDeckId = deckId;
        this.currentCardId = null;
        this.currentCardLocation = null;
        this.cardFormState = null;
        this.cardFormDirty = false;

        this.renderSidebar();
        this.renderDeckEditor(this.getCurrentDeck());
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –æ—à–∏–±–æ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
     */
    renderEditorError(error) {
        if (!this.editorElement) return;
        this.editorElement.innerHTML = `
            <div class="cards-editor">
                <div class="cards-empty-state">
                    <strong>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</strong>
                    ${this.escapeHTML(error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}
                </div>
            </div>
        `;
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–æ–ª–æ–¥—ã
     */
    renderDeckEditor(deck) {
        if (!this.editorElement) return;

        if (!deck) {
            this.editorElement.innerHTML = `
                <div class="cards-editor">
                    <div class="cards-empty-state">
                        <strong>–ö–æ–ª–æ–¥–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞</strong>
                        –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–¥—É —Å–ª–µ–≤–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.
                    </div>
                </div>
            `;
            return;
        }

        const totalCards = deck.drawPile.length + deck.discardPile.length;

        this.editorElement.innerHTML = `
            <div class="cards-editor-header">
                <div>
                    <h2>${this.escapeHTML(deck.name || '–ö–æ–ª–æ–¥–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</h2>
                    <p>${this.escapeHTML(deck.subtitle || '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –∫–æ–ª–æ–¥—ã')} ‚Ä¢ ${totalCards} –∫–∞—Ä—Ç–æ—á–µ–∫</p>
                </div>
                <div class="cards-editor-actions">
                    <button type="button" class="btn btn-ghost" data-action="add-card" data-location="draw">
                        ‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–ª–æ–¥—É
                    </button>
                    <button type="button" class="btn btn-ghost" data-action="add-card" data-location="discard">
                        ‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç–±–æ–π
                    </button>
                    <button type="button" class="btn btn-primary" data-action="save-decks" ${this.unsavedChanges ? '' : 'disabled'}>
                        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    </button>
                </div>
            </div>
            <div class="cards-columns">
                ${this.renderCardsColumn(deck.drawPile, 'draw', '–ö–∞—Ä—Ç–æ—á–∫–∏ –≤ –∫–æ–ª–æ–¥–µ')}
                ${this.renderCardsColumn(deck.discardPile, 'discard', '–ö–∞—Ä—Ç–æ—á–∫–∏ –≤ –æ—Ç–±–æ–µ')}
            </div>
            <div id="card-editor-container"></div>
            <div class="cards-footer-note" id="cards-editor-status" data-status="${this.unsavedChanges ? 'info' : 'success'}">
                ${this.unsavedChanges ? '–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'}
            </div>
        `;

        this.bindEditorEvents();
        this.renderCardFormSection();
    }

    /**
     * –†–µ–Ω–¥–µ—Ä —Å–µ–∫—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ (–∫–æ–ª–æ–¥–∞/–æ—Ç–±–æ–π)
     */
    renderCardsColumn(cards, location, title) {
        const isDraw = location === 'draw';
        const listHtml = cards.length
            ? cards.map((card) => this.renderCardItem(card, location)).join('')
            : `<div class="cards-empty-state">
                    <strong>–ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫</strong>
                    ${isDraw ? '–î–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∫–æ–ª–æ–¥—É.' : '–ó–¥–µ—Å—å –±—É–¥—É—Ç –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–µ—Ä–Ω—É–ª–∏ –∏–≥—Ä–æ–∫–∏.'}
               </div>`;

        return `
            <section class="cards-column" data-location="${location}">
                <h3>
                    ${this.escapeHTML(title)}
                    <button type="button" class="btn btn-ghost" data-action="add-card" data-location="${location}" title="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É">
                        ‚ûï
                    </button>
                </h3>
                <div class="card-list" data-location="${location}">
                    ${listHtml}
                </div>
            </section>
        `;
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Å–ø–∏—Å–∫–µ
     */
    renderCardItem(card, location) {
        const isActive = this.currentCardId === card.id && this.currentCardLocation === location;
        const metaParts = [];

        if (card.amount !== null && card.amount !== undefined) {
            metaParts.push(`üíµ ${this.formatCurrency(card.amount)}`);
        }
        if (card.income !== null && card.income !== undefined) {
            metaParts.push(`‚¨ÜÔ∏è ${this.formatCurrency(card.income)}`);
        }
        if (card.expense !== null && card.expense !== undefined) {
            metaParts.push(`‚¨áÔ∏è ${this.formatCurrency(card.expense)}`);
        }
        if (Array.isArray(card.tags) && card.tags.length > 0) {
            metaParts.push(`#${this.escapeHTML(card.tags.slice(0, 2).join(', #'))}`);
        }

        const description = card.description
            ? `<div class="card-item-description">${this.escapeHTML(this.truncate(card.description, 120))}</div>`
            : '';

        return `
            <article class="card-item${isActive ? ' active' : ''}" data-card-id="${card.id}" data-location="${location}">
                <div class="card-item-title">${this.escapeHTML(card.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</div>
                ${description}
                ${metaParts.length ? `<div class="card-item-meta">${metaParts.map((part) => `<span>${part}</span>`).join('')}</div>` : ''}
            </article>
        `;
    }

    /**
     * –†–µ–Ω–¥–µ—Ä —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
     */
    renderCardFormSection() {
        if (!this.editorElement) return;
        const container = this.editorElement.querySelector('#card-editor-container');
        if (!container) return;

        const deck = this.getCurrentDeck();
        if (!deck || !this.currentCardId) {
            container.innerHTML = `
                <div class="card-editor-form">
                    <div class="cards-empty-state">
                        <strong>–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞</strong>
                        –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é.
                    </div>
                </div>
            `;
            return;
        }

        const card = this.findCard(deck, this.currentCardId, this.currentCardLocation);
        if (!card) {
            container.innerHTML = `
                <div class="card-editor-form">
                    <div class="cards-empty-state">
                        <strong>–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</strong>
                        –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞. –û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫.
                    </div>
                </div>
            `;
            return;
        }

        if (!this.cardFormState || this.cardFormState.id !== card.id) {
            this.cardFormState = this.createFormStateFromCard(card, this.currentCardLocation);
            this.cardFormDirty = false;
        }

        const state = this.cardFormState;

        container.innerHTML = `
            <div class="card-editor-form" data-card-id="${state.id}">
                <div class="card-editor-toolbar">
                    <div class="status-badge">
                        ID: ${this.escapeHTML(state.id)}
                    </div>
                    <div class="card-editor-actions">
                        <button type="button" class="btn btn-danger" data-action="delete-card">
                            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
                        </button>
                        <button type="button" class="btn btn-success" data-action="save-card">
                            üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
                        </button>
                    </div>
                </div>

                <div class="card-editor-grid">
                    <div class="form-group full-width">
                        <label for="card-title">–ù–∞–∑–≤–∞–Ω–∏–µ *</label>
                        <input type="text" id="card-title" data-field="title" value="${this.escapeHTML(state.title)}" required>
                    </div>

                    <div class="form-group full-width">
                        <label for="card-description">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                        <textarea id="card-description" data-field="description" rows="4">${this.escapeHTML(state.description)}</textarea>
                    </div>

                    <div class="form-group">
                        <label for="card-amount">–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏</label>
                        <input type="number" id="card-amount" data-field="amount" value="${state.amount}">
                    </div>

                    <div class="form-group">
                        <label for="card-income">–î–æ—Ö–æ–¥</label>
                        <input type="number" id="card-income" data-field="income" value="${state.income}">
                    </div>

                    <div class="form-group">
                        <label for="card-expense">–†–∞—Å—Ö–æ–¥</label>
                        <input type="number" id="card-expense" data-field="expense" value="${state.expense}">
                    </div>

                    <div class="form-group">
                        <label for="card-location">–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ</label>
                        <select id="card-location" data-field="location">
                            <option value="draw"${state.location === 'draw' ? ' selected' : ''}>–ö–æ–ª–æ–¥–∞</option>
                            <option value="discard"${state.location === 'discard' ? ' selected' : ''}>–û—Ç–±–æ–π</option>
                        </select>
                    </div>

                    <div class="form-group full-width">
                        <label for="card-notes">–ó–∞–º–µ—Ç–∫–∏</label>
                        <input type="text" id="card-notes" data-field="notes" value="${this.escapeHTML(state.notes)}">
                    </div>

                    <div class="form-group full-width">
                        <label for="card-tags">–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</label>
                        <input type="text" id="card-tags" data-field="tagsRaw" value="${this.escapeHTML(state.tagsRaw)}" placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –ø–∞—Å—Å–∏–≤">
                    </div>

                    <div class="form-group full-width">
                        <label for="card-metadata">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (JSON)</label>
                        <textarea id="card-metadata" data-field="metadataRaw" rows="6">${this.escapeHTML(state.metadataRaw)}</textarea>
                    </div>
                </div>
            </div>
        `;

        this.bindCardFormEvents();
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ
     */
    createFormStateFromCard(card, location) {
        const metadata = typeof card.metadata === 'object' && card.metadata !== null ? card.metadata : {};
        const tagsArray = Array.isArray(card.tags) ? card.tags : [];

        return {
            id: card.id,
            title: card.title || '',
            description: card.description || '',
            amount: card.amount ?? '',
            income: card.income ?? '',
            expense: card.expense ?? '',
            notes: card.notes || '',
            tagsRaw: tagsArray.join(', '),
            metadataRaw: JSON.stringify(metadata, null, 2),
            location: location || 'draw'
        };
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
     */
    bindEditorEvents() {
        if (!this.editorElement) return;

        this.editorElement.querySelectorAll('[data-action="add-card"]').forEach((btn) => {
            btn.addEventListener('click', () => {
                const location = btn.dataset.location || 'draw';
                this.addCard(location);
            });
        });

        const saveBtn = this.editorElement.querySelector('[data-action="save-decks"]');
        if (saveBtn) {
            saveBtn.addEventListener('click', () => this.saveAll());
        }

        this.editorElement.querySelectorAll('.card-item').forEach((item) => {
            item.addEventListener('click', () => {
                const cardId = item.dataset.cardId;
                const location = item.dataset.location || 'draw';
                this.selectCard(cardId, location);
            });
        });
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ñ–æ—Ä–º—ã –∫–∞—Ä—Ç–æ—á–∫–∏
     */
    bindCardFormEvents() {
        if (!this.editorElement) return;

        const form = this.editorElement.querySelector('.card-editor-form');
        if (!form) return;

        const saveBtn = form.querySelector('[data-action="save-card"]');
        const deleteBtn = form.querySelector('[data-action="delete-card"]');

        if (saveBtn) {
            saveBtn.addEventListener('click', () => this.saveCurrentCard());
        }

        if (deleteBtn) {
            deleteBtn.addEventListener('click', () => this.deleteCurrentCard());
        }

        form.querySelectorAll('[data-field]').forEach((field) => {
            field.addEventListener('input', () => {
                this.handleCardFieldChange(field);
            });
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
     */
    handleCardFieldChange(field) {
        if (!this.cardFormState) return;
        const key = field.dataset.field;
        const value = field.value;

        switch (key) {
            case 'amount':
            case 'income':
            case 'expense':
                this.cardFormState[key] = value;
                break;
            case 'title':
            case 'description':
            case 'notes':
            case 'tagsRaw':
            case 'metadataRaw':
                this.cardFormState[key] = value;
                break;
            case 'location':
                this.cardFormState.location = value === 'discard' ? 'discard' : 'draw';
                break;
            default:
                this.cardFormState[key] = value;
                break;
        }

        this.cardFormDirty = true;
    }

    /**
     * –í—ã–±–æ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
     */
    selectCard(cardId, location = 'draw') {
        if (!cardId) return;

        if (this.cardFormDirty && !confirm('–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è?')) {
            return;
        }

        const deck = this.getCurrentDeck();
        if (!deck) return;

        const card = this.findCard(deck, cardId, location);
        if (!card) return;

        this.currentCardId = card.id;
        this.currentCardLocation = location;
        this.cardFormState = this.createFormStateFromCard(card, location);
        this.cardFormDirty = false;

        this.renderDeckEditor(deck);
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
     */
    addCard(location = 'draw') {
        const deck = this.getCurrentDeck();
        if (!deck) return;

        const newCard = this.normalizeCard({
            id: this.generateId('card'),
            title: '–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞',
            description: '',
            amount: null,
            income: null,
            expense: null,
            notes: '',
            tags: [],
            metadata: {}
        });

        if (location === 'discard') {
            deck.discardPile.unshift(newCard);
        } else {
            deck.drawPile.unshift(newCard);
            location = 'draw';
        }

        this.currentCardId = newCard.id;
        this.currentCardLocation = location;
        this.cardFormState = this.createFormStateFromCard(newCard, location);
        this.cardFormDirty = true;
        this.setUnsavedChanges(true);

        this.renderSidebar();
        this.renderDeckEditor(deck);
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
     */
    deleteCurrentCard() {
        const deck = this.getCurrentDeck();
        if (!deck || !this.currentCardId) return;

        if (!confirm('–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
            return;
        }

        const removeFromPile = (pile) => {
            const index = pile.findIndex((card) => card.id === this.currentCardId);
            if (index !== -1) {
                pile.splice(index, 1);
                return true;
            }
            return false;
        };

        if (!removeFromPile(deck.drawPile)) {
            removeFromPile(deck.discardPile);
        }

        this.currentCardId = null;
        this.cardFormState = null;
        this.cardFormDirty = false;
        this.setUnsavedChanges(true);

        this.renderSidebar();
        this.renderDeckEditor(deck);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    saveCurrentCard() {
        if (!this.cardFormState) return;
        const deck = this.getCurrentDeck();
        if (!deck || !this.currentCardId) return;

        const state = this.cardFormState;
        const title = (state.title || '').trim();
        if (!title) {
            alert('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
            return;
        }

        const parseNumber = (value) => {
            if (value === null || value === undefined || value === '') return null;
            const num = Number(value);
            return Number.isFinite(num) ? num : null;
        };

        let metadata = {};
        try {
            metadata = state.metadataRaw ? JSON.parse(state.metadataRaw) : {};
            if (metadata === null || typeof metadata !== 'object') {
                throw new Error('metadata –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º');
            }
        } catch (error) {
            alert(`–û—à–∏–±–∫–∞ –≤ JSON –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
            return;
        }

        const tags = state.tagsRaw
            ? state.tagsRaw.split(',').map((tag) => tag.trim()).filter(Boolean)
            : [];

        const updatedCard = {
            ...this.findCard(deck, this.currentCardId, this.currentCardLocation) || {},
            title,
            description: state.description || '',
            amount: parseNumber(state.amount),
            income: parseNumber(state.income),
            expense: parseNumber(state.expense),
            notes: state.notes || '',
            tags,
            metadata
        };

        const prevLocation = this.currentCardLocation || 'draw';
        const newLocation = state.location === 'discard' ? 'discard' : 'draw';

        const removeFromPile = (pile) => {
            const index = pile.findIndex((card) => card.id === updatedCard.id);
            if (index !== -1) {
                pile.splice(index, 1);
            }
            return index;
        };

        if (prevLocation === 'draw') {
            removeFromPile(deck.drawPile);
        } else {
            removeFromPile(deck.discardPile);
        }

        if (newLocation === 'discard') {
            deck.discardPile.unshift(updatedCard);
        } else {
            deck.drawPile.unshift(updatedCard);
        }

        this.currentCardLocation = newLocation;
        this.cardFormState = this.createFormStateFromCard(updatedCard, newLocation);
        this.cardFormDirty = false;
        this.setUnsavedChanges(true);
        this.showStatus('–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', 'success');

        this.renderSidebar();
        this.renderDeckEditor(deck);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
     */
    async saveAll() {
        const payload = {
            version: this.version,
            decks: this.decks.map((deck) => ({
                id: deck.id,
                name: deck.name,
                subtitle: deck.subtitle,
                drawDescription: deck.drawDescription,
                discardDescription: deck.discardDescription,
                drawPile: deck.drawPile,
                discardPile: deck.discardPile
            }))
        };

        this.showStatus('–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...', 'info');

        try {
            const response = await fetch(this.apiBaseUrl, {
                method: 'PUT',
                credentials: 'same-origin',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (HTTP ${response.status})`);
            }

            const result = await response.json();
            if (!result.success) {
                throw new Error(result.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
            }

            const data = result.data || {};
            this.version = data.version || this.version;
            this.decks = Array.isArray(data.decks)
                ? data.decks.map((deck) => this.normalizeDeck(deck))
                : this.decks;

            this.setUnsavedChanges(false);
            this.cardFormDirty = false;
            this.renderSidebar();
            this.renderDeckEditor(this.getCurrentDeck());
            this.showStatus('–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
        } catch (error) {
            console.error('‚ùå CardEditor: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
            this.showStatus(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è', 'error');
        }
    }

    /**
     * –ü–æ–º–µ—Ç–∫–∞ Dirty —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setUnsavedChanges(value) {
        this.unsavedChanges = Boolean(value);
        const statusEl = this.editorElement?.querySelector('#cards-editor-status');
        if (statusEl) {
            statusEl.dataset.status = this.unsavedChanges ? 'info' : 'success';
            statusEl.textContent = this.unsavedChanges
                ? '–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è'
                : '–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã';
        }
        const saveBtn = this.editorElement?.querySelector('[data-action="save-decks"]');
        if (saveBtn) {
            saveBtn.disabled = !this.unsavedChanges;
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞
     */
    showStatus(message, type = 'info') {
        const statusEl = this.editorElement?.querySelector('#cards-editor-status');
        if (!statusEl) return;
        statusEl.dataset.status = type;
        statusEl.textContent = message;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    setupBeforeUnloadWarning() {
        window.addEventListener('beforeunload', (event) => {
            if (this.unsavedChanges) {
                event.preventDefault();
                event.returnValue = '';
            }
        });
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Dirty –∏–∑–≤–Ω–µ
     */
    markDirty() {
        this.setUnsavedChanges(true);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª –≤ –≤–∞–ª—é—Ç—É
     */
    formatCurrency(value) {
        if (value === null || value === undefined) return '0';
        const number = Number(value);
        if (Number.isNaN(number)) return String(value);
        return number.toLocaleString('ru-RU');
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
     */
    escapeHTML(value) {
        if (value === null || value === undefined) return '';
        return String(value)
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;');
    }

    /**
     * –û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞
     */
    truncate(text, maxLength = 120) {
        if (!text) return '';
        if (text.length <= maxLength) return text;
        return `${text.slice(0, maxLength - 1)}‚Ä¶`;
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    refresh() {
        this.loadDecks();
    }
}

const DEFAULT_DECK_COUNT = 4;

window.CardEditor = CardEditor;
