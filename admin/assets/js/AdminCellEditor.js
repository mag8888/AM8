/**
 * AdminCellEditor - –†–µ–¥–∞–∫—Ç–æ—Ä –∫–ª–µ—Ç–æ–∫ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –∫–ª–µ—Ç–æ–∫ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
 * 
 * @version 1.0.0
 */

class AdminCellEditor {
    constructor() {
        this.cells = [];
        this.currentCell = null;
        this.unsavedChanges = false;
        
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
     */
    init() {
        console.log('‚öôÔ∏è AdminCellEditor: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–µ—Ç–∫–∏ –∏–∑ BoardConfig
        this.loadCellsFromConfig();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventListeners();
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏—Å–æ–∫ –∫–ª–µ—Ç–æ–∫
        this.renderCellsList();
        
        console.log('‚úÖ AdminCellEditor: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–µ—Ç–æ–∫ –∏–∑ BoardConfig
     */
    loadCellsFromConfig() {
        if (typeof window.BoardConfig === 'undefined') {
            console.error('‚ùå BoardConfig –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        const config = window.BoardConfig;
        this.cells = [];
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–µ—Ç–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ —Ç—Ä–µ–∫–∞
        config.BIG_CIRCLE.forEach((cell, index) => {
            this.cells.push({
                id: `outer-${index}`,
                track: 'outer',
                position: index,
                name: cell.name || `–ö–ª–µ—Ç–∫–∞ ${index}`,
                description: cell.description || '',
                icon: cell.icon || 'üìç',
                color: cell.color || '#6366f1',
                income: cell.income || 0,
                expense: cell.expense || 0,
                price: cell.price || 0,
                rent: cell.rent || 0,
                actionType: cell.actionType || 'none',
                actionText: cell.actionText || '',
                purchasable: cell.purchasable || false,
                special: cell.special || false,
                mandatoryStop: cell.mandatoryStop || false,
                customData: cell.customData || {}
            });
        });
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–µ—Ç–∫–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ç—Ä–µ–∫–∞
        config.SMALL_CIRCLE.forEach((cell, index) => {
            this.cells.push({
                id: `inner-${index}`,
                track: 'inner',
                position: index,
                name: cell.name || `–ö–ª–µ—Ç–∫–∞ ${index}`,
                description: cell.description || '',
                icon: cell.icon || 'üìç',
                color: cell.color || '#6366f1',
                income: cell.income || 0,
                expense: cell.expense || 0,
                price: cell.price || 0,
                rent: cell.rent || 0,
                actionType: cell.actionType || 'none',
                actionText: cell.actionText || '',
                purchasable: cell.purchasable || false,
                special: cell.special || false,
                mandatoryStop: cell.mandatoryStop || false,
                customData: cell.customData || {}
            });
        });
        
        console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.cells.length} –∫–ª–µ—Ç–æ–∫`);
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –§–∏–ª—å—Ç—Ä –ø–æ —Ç—Ä–µ–∫—É
        const trackFilter = document.getElementById('track-filter');
        if (trackFilter) {
            trackFilter.addEventListener('change', () => this.filterCells());
        }
        
        // –ü–æ–∏—Å–∫
        const searchInput = document.getElementById('search-cells');
        if (searchInput) {
            searchInput.addEventListener('input', () => this.filterCells());
        }
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–µ
        const formInputs = document.querySelectorAll('#cell-editor-form input, #cell-editor-form textarea, #cell-editor-form select');
        formInputs.forEach(input => {
            input.addEventListener('input', () => {
                this.unsavedChanges = true;
                this.updatePreview();
            });
        });
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        window.addEventListener('beforeunload', (e) => {
            if (this.unsavedChanges) {
                e.preventDefault();
                e.returnValue = '';
            }
        });
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –∫–ª–µ—Ç–æ–∫
     */
    renderCellsList(filteredCells = null) {
        const cellsList = document.getElementById('cells-list');
        if (!cellsList) return;
        
        const cells = filteredCells || this.cells;
        
        cellsList.innerHTML = cells.map(cell => `
            <div class="cell-item ${this.currentCell?.id === cell.id ? 'active' : ''}" 
                 onclick="adminEditor.selectCell('${cell.id}')">
                <div class="cell-item-icon" style="background-color: ${cell.color}">
                    ${cell.icon}
                </div>
                <div class="cell-item-info">
                    <div class="cell-item-name">${cell.name}</div>
                    <div class="cell-item-meta">
                        <span class="badge badge-${cell.track}">${cell.track === 'outer' ? '–í–Ω–µ—à–Ω–∏–π' : '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π'}</span>
                        <span class="badge badge-position">#${cell.position}</span>
                    </div>
                </div>
            </div>
        `).join('');
        
        console.log(`‚úÖ –û—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ ${cells.length} –∫–ª–µ—Ç–æ–∫`);
    }
    
    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–ª–µ—Ç–æ–∫
     */
    filterCells() {
        const trackFilter = document.getElementById('track-filter')?.value || 'all';
        const searchQuery = document.getElementById('search-cells')?.value.toLowerCase() || '';
        
        let filtered = this.cells;
        
        // –§–∏–ª—å—Ç—Ä –ø–æ —Ç—Ä–µ–∫—É
        if (trackFilter !== 'all') {
            filtered = filtered.filter(cell => cell.track === trackFilter);
        }
        
        // –ü–æ–∏—Å–∫
        if (searchQuery) {
            filtered = filtered.filter(cell => 
                cell.name.toLowerCase().includes(searchQuery) ||
                cell.description.toLowerCase().includes(searchQuery)
            );
        }
        
        this.renderCellsList(filtered);
    }
    
    /**
     * –í—ã–±–æ—Ä –∫–ª–µ—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    selectCell(cellId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (this.unsavedChanges) {
            if (!confirm('–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
                return;
            }
        }
        
        this.currentCell = this.cells.find(cell => cell.id === cellId);
        if (!this.currentCell) {
            console.error('‚ùå –ö–ª–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', cellId);
            return;
        }
        
        this.unsavedChanges = false;
        this.renderCellEditor();
        this.renderCellsList(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–ª–µ—Ç–∫–∏
        
        console.log('‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–ª–µ—Ç–∫–∞:', this.currentCell);
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–ª–µ—Ç–∫–∏
     */
    renderCellEditor() {
        if (!this.currentCell) return;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        const emptyState = document.querySelector('.empty-state');
        const editorForm = document.getElementById('cell-editor-form');
        const saveBtn = document.getElementById('save-cell-btn');
        const editorTitle = document.getElementById('editor-title');
        
        if (emptyState) emptyState.style.display = 'none';
        if (editorForm) editorForm.style.display = 'block';
        if (saveBtn) saveBtn.disabled = false;
        if (editorTitle) editorTitle.textContent = `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${this.currentCell.name}`;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
        this.fillForm();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        this.updatePreview();
    }
    
    /**
     * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–µ—Ç–∫–∏
     */
    fillForm() {
        const cell = this.currentCell;
        
        document.getElementById('cell-id').value = cell.id;
        document.getElementById('cell-track').value = cell.track === 'outer' ? '–í–Ω–µ—à–Ω–∏–π —Ç—Ä–µ–∫' : '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ç—Ä–µ–∫';
        document.getElementById('cell-name').value = cell.name;
        document.getElementById('cell-description').value = cell.description;
        document.getElementById('cell-icon').value = cell.icon;
        document.getElementById('cell-color').value = cell.color;
        document.getElementById('cell-income').value = cell.income;
        document.getElementById('cell-expense').value = cell.expense;
        document.getElementById('cell-price').value = cell.price;
        document.getElementById('cell-rent').value = cell.rent;
        document.getElementById('cell-action-type').value = cell.actionType;
        document.getElementById('cell-action-text').value = cell.actionText;
        document.getElementById('cell-purchasable').checked = cell.purchasable;
        document.getElementById('cell-special').checked = cell.special;
        document.getElementById('cell-mandatory-stop').checked = cell.mandatoryStop;
        document.getElementById('cell-custom-data').value = JSON.stringify(cell.customData, null, 2);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–ª–µ—Ç–∫–∏
     */
    updatePreview() {
        const preview = document.getElementById('cell-preview');
        if (!preview) return;
        
        const name = document.getElementById('cell-name').value;
        const icon = document.getElementById('cell-icon').value;
        const color = document.getElementById('cell-color').value;
        const description = document.getElementById('cell-description').value;
        const income = document.getElementById('cell-income').value;
        const expense = document.getElementById('cell-expense').value;
        
        preview.innerHTML = `
            <div class="preview-cell" style="background-color: ${color}">
                <div class="preview-icon">${icon}</div>
                <div class="preview-name">${name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</div>
                ${description ? `<div class="preview-description">${description}</div>` : ''}
                <div class="preview-finances">
                    ${income > 0 ? `<span class="preview-income">+$${income}</span>` : ''}
                    ${expense > 0 ? `<span class="preview-expense">-$${expense}</span>` : ''}
                </div>
            </div>
        `;
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–ª–µ—Ç–∫–∏
     */
    saveCurrentCell() {
        if (!this.currentCell) return;
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
            const updatedCell = {
                ...this.currentCell,
                name: document.getElementById('cell-name').value,
                description: document.getElementById('cell-description').value,
                icon: document.getElementById('cell-icon').value,
                color: document.getElementById('cell-color').value,
                income: parseFloat(document.getElementById('cell-income').value) || 0,
                expense: parseFloat(document.getElementById('cell-expense').value) || 0,
                price: parseFloat(document.getElementById('cell-price').value) || 0,
                rent: parseFloat(document.getElementById('cell-rent').value) || 0,
                actionType: document.getElementById('cell-action-type').value,
                actionText: document.getElementById('cell-action-text').value,
                purchasable: document.getElementById('cell-purchasable').checked,
                special: document.getElementById('cell-special').checked,
                mandatoryStop: document.getElementById('cell-mandatory-stop').checked,
                customData: JSON.parse(document.getElementById('cell-custom-data').value || '{}')
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–µ—Ç–∫—É –≤ –º–∞—Å—Å–∏–≤–µ
            const index = this.cells.findIndex(c => c.id === this.currentCell.id);
            if (index !== -1) {
                this.cells[index] = updatedCell;
                this.currentCell = updatedCell;
            }
            
            this.unsavedChanges = false;
            this.renderCellsList();
            this.showNotification('‚úÖ –ö–ª–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'success');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤ BoardConfig
            this.saveToLocalStorage();
            
            console.log('‚úÖ –ö–ª–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', updatedCell);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–µ—Ç–∫–∏:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message, 'error');
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ localStorage
     */
    saveToLocalStorage() {
        try {
            const config = {
                outerCells: this.cells.filter(c => c.track === 'outer'),
                innerCells: this.cells.filter(c => c.track === 'inner'),
                lastUpdate: new Date().toISOString()
            };
            
            localStorage.setItem('aura_money_cells_config', JSON.stringify(config));
            console.log('üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error);
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
     */
    async saveToServer() {
        try {
            const config = {
                outerCells: this.cells.filter(c => c.track === 'outer').map(c => ({
                    name: c.name,
                    description: c.description,
                    icon: c.icon,
                    color: c.color,
                    income: c.income,
                    expense: c.expense,
                    price: c.price,
                    rent: c.rent,
                    actionType: c.actionType,
                    actionText: c.actionText,
                    purchasable: c.purchasable,
                    special: c.special,
                    mandatoryStop: c.mandatoryStop,
                    customData: c.customData
                })),
                innerCells: this.cells.filter(c => c.track === 'inner').map(c => ({
                    name: c.name,
                    description: c.description,
                    icon: c.icon,
                    color: c.color,
                    income: c.income,
                    expense: c.expense,
                    price: c.price,
                    rent: c.rent,
                    actionType: c.actionType,
                    actionText: c.actionText,
                    purchasable: c.purchasable,
                    special: c.special,
                    mandatoryStop: c.mandatoryStop,
                    customData: c.customData
                }))
            };
            
            const response = await fetch('/api/cells', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(config)
            });
            
            const data = await response.json();
            
            if (data.success) {
                this.showNotification('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä', 'success');
                console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä', 'error');
        }
    }
    
    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    exportConfig() {
        const config = {
            outerCells: this.cells.filter(c => c.track === 'outer'),
            innerCells: this.cells.filter(c => c.track === 'inner'),
            version: '1.0.0',
            exportDate: new Date().toISOString()
        };
        
        const json = JSON.stringify(config, null, 2);
        const blob = new Blob([json], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `cells-config-${Date.now()}.json`;
        a.click();
        URL.revokeObjectURL(url);
        
        this.showNotification('üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞', 'success');
        console.log('üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞');
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–º–ø–æ—Ä—Ç–∞
     */
    importConfig() {
        const modal = document.getElementById('import-modal');
        if (modal) {
            modal.style.display = 'flex';
        }
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–º–ø–æ—Ä—Ç–∞
     */
    closeImportModal() {
        const modal = document.getElementById('import-modal');
        if (modal) {
            modal.style.display = 'none';
        }
        document.getElementById('import-json').value = '';
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
     */
    processImport() {
        try {
            const json = document.getElementById('import-json').value;
            const config = JSON.parse(json);
            
            if (!config.outerCells || !config.innerCells) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–µ—Ç–∫–∏
            this.cells = [
                ...config.outerCells.map((c, i) => ({ ...c, id: `outer-${i}`, track: 'outer', position: i })),
                ...config.innerCells.map((c, i) => ({ ...c, id: `inner-${i}`, track: 'inner', position: i }))
            ];
            
            this.renderCellsList();
            this.saveToLocalStorage();
            this.closeImportModal();
            this.showNotification('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞', 'success');
            
            console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ' + error.message, 'error');
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => notification.classList.add('show'), 10);
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
if (typeof window !== 'undefined') {
    window.AdminCellEditor = AdminCellEditor;
}
