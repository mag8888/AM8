/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
 * –í–µ—Ä—Å–∏—è: 2.0.0
 * –î–∞—Ç–∞: 16 –æ–∫—Ç—è–±—Ä—è 2024
 */

const webpush = require('web-push');

class PushService {
    constructor() {
        this.connectedClients = new Map(); // Map<clientId, {subscription, userInfo, lastPing}>
        this.pushQueue = []; // –û—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è offline –∫–ª–∏–µ–Ω—Ç–æ–≤
        this.isInitialized = false;
        
        // VAPID –∫–ª—é—á–∏ –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.vapidKeys = {
            publicKey: 'BEl62iUYgUivxIkv69yViEuiBIa40HI8QyVgQmc0e2OmjQH_s0xXgJXJN3Hk1N7vKzdaT0HfQ7UG1qZJ0u7g2c',
            privateKey: 'your-private-key-here' // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        };
        
        console.log('üì° PushService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
     */
    init() {
        try {
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º web-push
            webpush.setVapidDetails(
                'mailto:admin@auramoney.com',
                this.vapidKeys.publicKey,
                this.vapidKeys.privateKey
            );
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
            this.startCleanupInterval();
            
            this.isInitialized = true;
            console.log('‚úÖ PushService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå PushService: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
     * @param {string} clientId - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–ª–∏–µ–Ω—Ç–∞
     * @param {Object} subscription - Push-–ø–æ–¥–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
     * @param {Object} userInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    registerClient(clientId, subscription, userInfo = {}) {
        this.connectedClients.set(clientId, {
            id: clientId,
            subscription,
            userInfo,
            registeredAt: new Date(),
            lastPing: Date.now(),
            isActive: true
        });
        
        console.log(`üì± PushService: –ö–ª–∏–µ–Ω—Ç ${clientId} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`, {
            hasSubscription: !!subscription,
            userInfo
        });
        console.log(`üìä PushService: –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${this.connectedClients.size}`);
    }

    /**
     * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
     * @param {string} clientId - ID –∫–ª–∏–µ–Ω—Ç–∞
     */
    unregisterClient(clientId) {
        if (this.connectedClients.has(clientId)) {
            this.connectedClients.delete(clientId);
            console.log(`üì± PushService: –ö–ª–∏–µ–Ω—Ç ${clientId} –æ—Ç–∫–ª—é—á–µ–Ω`);
            console.log(`üìä PushService: –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${this.connectedClients.size}`);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
     * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {string} excludeClientId - ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
     */
    async broadcastPush(type, data, excludeClientId = null) {
        try {
            const pushData = {
                type,
                data,
                timestamp: new Date().toISOString(),
                id: this.generatePushId()
            };

            console.log(`üì° PushService: –û—Ç–ø—Ä–∞–≤–∫–∞ broadcast push (${type}) –¥–ª—è ${this.connectedClients.size} –∫–ª–∏–µ–Ω—Ç–æ–≤`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
            for (const [clientId, clientInfo] of this.connectedClients.entries()) {
                if (excludeClientId && clientId === excludeClientId) {
                    continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                }

                try {
                    await this.sendPushToClient(clientId, pushData);
                } catch (error) {
                    console.error(`‚ùå PushService: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push –∫–ª–∏–µ–Ω—Ç—É ${clientId}:`, error);
                    // –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                    this.unregisterClient(clientId);
                }
            }

            console.log(`‚úÖ PushService: Broadcast push –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
            return pushData;
        } catch (error) {
            console.error('‚ùå PushService: –û—à–∏–±–∫–∞ broadcast push:', error);
            throw error;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
     * @param {string} clientId - ID –∫–ª–∏–µ–Ω—Ç–∞
     * @param {Object} pushData - –î–∞–Ω–Ω—ã–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    async sendPushToClient(clientId, pushData) {
        const clientInfo = this.connectedClients.get(clientId);
        if (!clientInfo || !clientInfo.isActive) {
            throw new Error(`–ö–ª–∏–µ–Ω—Ç ${clientId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω`);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ping
        clientInfo.lastPing = Date.now();
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã WebSocket
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —á–µ—Ä–µ–∑ API endpoint
        console.log(`üì± PushService: Push –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É ${clientId}:`, pushData.type);
        
        return true;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    generatePushId() {
        return `push_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
     */
    getActiveClients() {
        const activeClients = [];
        for (const [clientId, clientInfo] of this.connectedClients.entries()) {
            if (clientInfo.isActive) {
                activeClients.push({
                    id: clientId,
                    registeredAt: clientInfo.registeredAt,
                    userInfo: clientInfo.userInfo
                });
            }
        }
        return activeClients;
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
     */
    startCleanupInterval() {
        setInterval(() => {
            const now = Date.now();
            const timeout = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
            
            for (const [clientId, clientInfo] of this.connectedClients.entries()) {
                if (now - clientInfo.lastPing > timeout) {
                    console.log(`üßπ PushService: –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}`);
                    this.unregisterClient(clientId);
                }
            }
        }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ web-push
     * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
     * @param {string} excludeClientId - ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
     */
    async sendRealPushNotification(title, message, options = {}, excludeClientId = null) {
        try {
            const notificationPayload = JSON.stringify({
                title,
                message,
                icon: '/assets/images/icon-192x192.png',
                badge: '/assets/images/badge-72x72.png',
                vibrate: [200, 100, 200],
                data: options.data || {},
                actions: options.actions || [],
                tag: options.tag || 'game-notification',
                requireInteraction: options.requireInteraction || false,
                silent: options.silent || false
            });

            console.log(`üì° PushService: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è "${title}" –¥–ª—è ${this.connectedClients.size} –∫–ª–∏–µ–Ω—Ç–æ–≤`);

            let successCount = 0;
            let errorCount = 0;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
            for (const [clientId, clientInfo] of this.connectedClients.entries()) {
                if (excludeClientId && clientId === excludeClientId) {
                    continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                }

                if (!clientInfo.subscription) {
                    console.warn(`‚ö†Ô∏è PushService: –£ –∫–ª–∏–µ–Ω—Ç–∞ ${clientId} –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏`);
                    continue;
                }

                try {
                    await webpush.sendNotification(clientInfo.subscription, notificationPayload);
                    successCount++;
                    console.log(`‚úÖ PushService: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${clientId}`);
                } catch (error) {
                    errorCount++;
                    console.error(`‚ùå PushService: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É ${clientId}:`, error);
                    
                    // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, —É–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                    if (error.statusCode === 410) {
                        console.log(`üóëÔ∏è PushService: –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}`);
                        this.unregisterClient(clientId);
                    }
                }
            }

            console.log(`‚úÖ PushService: –†–µ–∞–ª—å–Ω–æ–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`);
            return { 
                success: true, 
                sentTo: successCount, 
                errors: errorCount,
                totalClients: this.connectedClients.size
            };

        } catch (error) {
            console.error('‚ùå PushService: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
     */
    getStats() {
        return {
            connectedClients: this.connectedClients.size,
            isInitialized: this.isInitialized,
            queueSize: this.pushQueue.length
        };
    }
}

module.exports = PushService;
