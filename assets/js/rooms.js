/**
 * Rooms Page Controller v1.0.1
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –≤—ã–±–æ—Ä–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let roomService;
let router;
let selectedRoom = null;

// –§–ª–∞–≥–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
let isLoadingRooms = false;
let isLoadingStats = false;
let lastRoomsRequest = 0;
let lastStatsRequest = 0;
const MIN_REQUEST_INTERVAL = 5000; // 5 —Å–µ–∫—É–Ω–¥ –º–∏–Ω–∏–º—É–º –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üè† Rooms: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–º–Ω–∞—Ç');
    
    // –û—á–∏—â–∞–µ–º localStorage –æ—Ç —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
    if (localStorage.getItem('aura_money_dynamic_rooms')) {
        console.log('üßπ –û—á–∏—â–∞–µ–º localStorage –æ—Ç —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç');
        localStorage.removeItem('aura_money_dynamic_rooms');
    }
    
    initializeServices();
    setupEventListeners();
    loadRooms();
    loadStats();
    updateUserInfo();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
    startRoomsPolling();
});

/**
 * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
 */
function startRoomsPolling() {
    let lastRefreshAttempt = 0;
    const minRefreshInterval = 10000; // –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –∫–∞–∂–¥—ã–µ 120 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
    setInterval(async () => {
        const now = Date.now();
        if (now - lastRefreshAttempt < minRefreshInterval) {
            console.log('‚è≥ Rooms: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ');
            return;
        }
        
        try {
            lastRefreshAttempt = now;
            await refreshRoomsList();
        } catch (error) {
            console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            handleRefreshError(error);
        }
    }, 45000); // –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 45 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
    
    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –æ–∫–Ω–µ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è)
    window.addEventListener('focus', async () => {
        const now = Date.now();
        if (now - lastRefreshAttempt < minRefreshInterval) {
            console.log('‚è≥ Rooms: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ - —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ');
            return;
        }
        
        try {
            console.log('üîÑ Rooms: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –æ–∫–Ω–∞');
            lastRefreshAttempt = now;
            await refreshRoomsList();
        } catch (error) {
            console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ:', error);
            handleRefreshError(error);
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏)
    document.addEventListener('visibilitychange', async () => {
        if (!document.hidden) {
            const now = Date.now();
            if (now - lastRefreshAttempt < minRefreshInterval) {
                console.log('‚è≥ Rooms: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ - —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ');
                return;
            }
            
            try {
                console.log('üîÑ Rooms: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É');
                lastRefreshAttempt = now;
                await refreshRoomsList();
            } catch (error) {
                console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏:', error);
                handleRefreshError(error);
            }
        }
    });
    
    console.log('üîÑ Rooms: –ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç');
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ 429 (Rate Limited)
 */
function handleRefreshError(error) {
    if (error.message && error.message.includes('429')) {
        console.warn('‚è≥ Rooms: Rate limited - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        if (!window.rateLimitWarningShown) {
            showNotification('–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏.', 'warning');
            window.rateLimitWarningShown = true;
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                window.rateLimitWarningShown = false;
            }, 30000);
        }
    } else if (error.message && error.message.includes('Rate limited')) {
        console.warn('‚è≥ Rooms: Rate limited —Å backoff. –ñ–¥–µ–º...');
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
 */
async function refreshRoomsList() {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const now = Date.now();
    if (isLoadingRooms || (now - lastRoomsRequest < MIN_REQUEST_INTERVAL)) {
        console.log('‚è≥ Rooms: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –∑–∞–ø—Ä–æ—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ');
        return;
    }
    
    isLoadingRooms = true;
    lastRoomsRequest = now;
    
    try {
        console.log('üîÑ Rooms: –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç');
        const rooms = await roomService.getAllRooms();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç
        const currentRoomsContainer = document.querySelector('.rooms-list');
        const currentRooms = Array.from(currentRoomsContainer?.querySelectorAll('.room-card') || []);
        const currentRoomsData = currentRooms.map(card => ({
            id: card.dataset.roomId,
            players: card.querySelector('.players-list')?.children.length || 0,
            status: card.querySelector('.room-status')?.textContent || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        }));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const hasChanges = checkRoomsChanges(currentRoomsData, rooms);
        
        if (hasChanges.hasNewRooms || hasChanges.hasRemovedRooms || hasChanges.hasStatusChanges || hasChanges.hasPlayerChanges) {
            console.log('üîÑ Rooms: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ –∫–æ–º–Ω–∞—Ç:', hasChanges);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç
            renderRooms(rooms, hasChanges.hasNewRooms);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–Ω–∞—Ç
            const roomsCount = document.getElementById('rooms-count');
            if (roomsCount) {
                roomsCount.textContent = `${rooms.length} –∫–æ–º–Ω–∞—Ç`;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            // —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏—à–Ω—é—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            if (hasChanges.hasNewRooms || hasChanges.hasRemovedRooms) {
                try {
                    await loadStats();
                } catch (statsError) {
                    console.warn('‚ö†Ô∏è Rooms: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', statsError);
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
                }
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if (hasChanges.hasNewRooms) {
                const newRoomsCount = rooms.length - currentRoomsData.length;
                showNotification(`–ü–æ—è–≤–∏–ª–∞—Å—å${newRoomsCount > 1 ? '—Å—å –Ω–æ–≤—ã–µ –∫–æ–º–Ω–∞—Ç—ã' : ' –Ω–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞'}! –í—Å–µ–≥–æ –∫–æ–º–Ω–∞—Ç: ${rooms.length}`, 'success');
            }
            
            if (hasChanges.hasRemovedRooms) {
                showNotification('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–Ω–∞—Ç—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã', 'info');
            }
            
            if (hasChanges.hasStatusChanges) {
                console.log('üîÑ Rooms: –ò–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç');
            }
            
            if (hasChanges.hasPlayerChanges) {
                console.log('üîÑ Rooms: –ò–∑–º–µ–Ω–∏–ª–æ—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö');
            }
        }
        
    } catch (error) {
        console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç:', error);
        
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ 429 –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º UI, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        if (error.message && (error.message.includes('429') || error.message.includes('Rate limited'))) {
            console.warn('‚è≥ Rooms: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ rate limiting');
            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        }
    } finally {
        // –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
        isLoadingRooms = false;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ –∫–æ–º–Ω–∞—Ç
 */
function checkRoomsChanges(currentRooms, newRooms) {
    const changes = {
        hasNewRooms: false,
        hasRemovedRooms: false,
        hasStatusChanges: false,
        hasPlayerChanges: false
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
    if (newRooms.length > currentRooms.length) {
        changes.hasNewRooms = true;
    } else if (newRooms.length < currentRooms.length) {
        changes.hasRemovedRooms = true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö
    currentRooms.forEach(currentRoom => {
        const newRoom = newRooms.find(room => room.id === currentRoom.id);
        if (newRoom) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            const currentStatus = currentRoom.status;
            const newStatus = getRoomStatus(newRoom);
            if (currentStatus !== newStatus) {
                changes.hasStatusChanges = true;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
            const currentPlayerCount = currentRoom.players;
            const newPlayerCount = newRoom.playerCount || 0;
            if (currentPlayerCount !== newPlayerCount) {
                changes.hasPlayerChanges = true;
            }
        }
    });
    
    return changes;
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
 */
function initializeServices() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        roomService = new RoomService(window.logger || null, window.errorHandler || null);
        // notificationService –∏ userModel –¥–æ—Å—Ç—É–ø–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ –∫–∞–∫ window.notificationService –∏ window.userModel
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        if (window.router) {
            router = window.router;
        } else if (window.Router) {
            console.log('‚úÖ Rooms: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å Router');
            router = new window.Router();
        } else {
            console.warn('‚ö†Ô∏è Rooms: –ö–ª–∞—Å—Å Router –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç');
            router = { navigate: () => {}, route: () => {} }; // Fallback
        }
        
        console.log('‚úÖ Rooms: –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
        console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', 'error');
    }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const refreshBtn = document.getElementById('refresh-rooms');
    const backBtn = document.getElementById('back-to-auth');
    const createRoomBtn = document.getElementById('create-room-btn');
    const quickCreateBtn = document.getElementById('quick-create-room');
    const quickRefreshBtn = document.getElementById('quick-refresh');
    const logoutBtn = document.getElementById('logout-btn');
    
    if (refreshBtn) {
        refreshBtn.addEventListener('click', refreshRoomsWithAnimation);
    }
    
    if (backBtn) {
        backBtn.addEventListener('click', () => {
            // –ù–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            window.location.href = '/auth';
        });
    }
    
    if (createRoomBtn) {
        createRoomBtn.addEventListener('click', showCreateRoomModal);
    }
    
    if (quickCreateBtn) {
        quickCreateBtn.addEventListener('click', showCreateRoomModal);
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è quick-create-room –¥–æ–±–∞–≤–ª–µ–Ω');
    } else {
        console.warn('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ quick-create-room –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    if (quickRefreshBtn) {
        quickRefreshBtn.addEventListener('click', refreshRoomsWithAnimation);
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è quick-refresh –¥–æ–±–∞–≤–ª–µ–Ω');
    } else {
        console.warn('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ quick-refresh –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    if (logoutBtn) {
        logoutBtn.addEventListener('click', handleLogout);
    }
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
    const createModal = document.getElementById('create-room-modal');
    const closeModalBtn = document.getElementById('close-modal');
    const cancelCreateBtn = document.getElementById('cancel-create');
    const createRoomForm = document.getElementById('create-room-form');
    
    if (closeModalBtn) {
        closeModalBtn.addEventListener('click', hideCreateRoomModal);
    }
    
    if (cancelCreateBtn) {
        cancelCreateBtn.addEventListener('click', hideCreateRoomModal);
    }
    
    if (createRoomForm) {
        createRoomForm.addEventListener('submit', handleCreateRoom);
    }
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    const joinModal = document.getElementById('join-room-modal');
    const closeJoinBtn = document.getElementById('close-join-modal');
    const cancelJoinBtn = document.getElementById('cancel-join');
    const joinRoomForm = document.getElementById('join-room-form');
    
    if (closeJoinBtn) {
        closeJoinBtn.addEventListener('click', hideJoinRoomModal);
    }
    
    if (cancelJoinBtn) {
        cancelJoinBtn.addEventListener('click', hideJoinRoomModal);
    }
    
    if (joinRoomForm) {
        joinRoomForm.addEventListener('submit', handleJoinRoom);
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
    if (createModal) {
        createModal.addEventListener('click', (e) => {
            if (e.target === createModal) {
                hideCreateRoomModal();
            }
        });
    }
    
    if (joinModal) {
        joinModal.addEventListener('click', (e) => {
            if (e.target === joinModal) {
                hideJoinRoomModal();
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö –∫–Ω–æ–ø–æ–∫
    setupDynamicEventListeners();
    
    console.log('‚úÖ Rooms: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
function setupDynamicEventListeners() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
    const roomsList = document.getElementById('rooms-list');
    if (roomsList) {
        roomsList.addEventListener('click', (e) => {
            const button = e.target.closest('[data-action]');
            if (!button) return;
            
            const action = button.dataset.action;
            const roomId = button.dataset.roomId;
            
            switch (action) {
                case 'start-game':
                    startGame(roomId);
                    break;
                case 'join-room':
                    // –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: —Å—Ä–∞–∑—É –≤ –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—á—Ç—ã –∏ —Ñ–∏—à–∫–∏
                    if (typeof window.quickJoinRoom === 'function') {
                        window.quickJoinRoom(roomId);
                    } else {
                        console.error('‚ùå quickJoinRoom is not defined on window');
                    }
                    break;
                case 'view-details':
                    viewRoomDetails(roomId);
                    break;
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ empty state
    document.addEventListener('click', (e) => {
        if (e.target.id === 'retry-load-rooms') {
            loadRooms();
        } else if (e.target.id === 'create-room-from-empty') {
            showCreateRoomModal();
        }
    });
}

/**
 * –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–º–Ω–∞—Ç—ã
 */
async function quickJoinRoom(roomId) {
    try {
        if (!roomId) return;
        const currentUser = getCurrentUser();
        if (!currentUser) {
            showNotification('–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É', 'warning');
            window.location.href = '/auth';
            return;
        }

        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ (–ø–æ–ª–Ω—ã–π PlayerBundle –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ)
        const playerData = {
            userId: currentUser.id,
            username: currentUser.username,
            name: currentUser.name || currentUser.username,
            avatar: currentUser.avatar || '',
            token: '',
            dream: '',
            dreamCost: 0,
            dreamDescription: '',
            isReady: false
        };

        try {
            // joinRoom(roomId, player)
            await roomService.joinRoom(roomId, playerData);
        } catch (_) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ –∏–ª–∏ –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º
        }

        console.log('üéÆ Rooms: –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É –ø–æ—Å–ª–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', roomId);
        window.location.href = `room.html?id=${roomId}`;
    } catch (error) {
        console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ', 'error');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ inline-–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
if (typeof window !== 'undefined') {
    window.quickJoinRoom = quickJoinRoom;
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
 */
async function loadRooms() {
    try {
        showLoadingState();
        
        const rooms = await roomService.getAllRooms();
        // –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ/–º–æ–∫-–¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å 0 –∫–æ–º–Ω–∞—Ç
        const safeRooms = rooms && rooms.length > 0 ? rooms : (roomService.state?.rooms || roomService.mockRooms || []);
        renderRooms(safeRooms);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–Ω–∞—Ç
        const roomsCount = document.getElementById('rooms-count');
        if (roomsCount) {
            roomsCount.textContent = `${(safeRooms || []).length} –∫–æ–º–Ω–∞—Ç`;
        }
        
    } catch (error) {
        console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç:', error);
        showErrorState('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç');
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç', 'error');
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
async function loadStats() {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const now = Date.now();
    if (isLoadingStats || (now - lastStatsRequest < MIN_REQUEST_INTERVAL)) {
        console.log('‚è≥ Rooms: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - –∑–∞–ø—Ä–æ—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ');
        return;
    }
    
    isLoadingStats = true;
    lastStatsRequest = now;
    
    try {
        console.log('üìä Rooms: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
        const stats = await roomService.getStats();
        renderStats(stats);
    } catch (error) {
        console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ 429 –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—à–∏–±–∫—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        // –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (error.message && (error.message.includes('429') || error.message.includes('Rate limited'))) {
            console.warn('‚è≥ Rooms: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑-–∑–∞ rate limiting');
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            renderStats({
                totalRooms: 0,
                activeRooms: 0,
                gamesInProgress: 0,
                playersOnline: 0
            });
        }
    } finally {
        // –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
        isLoadingStats = false;
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
 */
function showLoadingState() {
    const roomsList = document.getElementById('rooms-list');
    if (roomsList) {
        roomsList.innerHTML = `
            <div class="loading-state">
                <div class="loading-spinner"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–Ω–∞—Ç...</p>
            </div>
        `;
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—à–∏–±–∫–∏
 */
function showErrorState(message) {
    const roomsList = document.getElementById('rooms-list');
    if (roomsList) {
        roomsList.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">‚ö†Ô∏è</div>
                <h3>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h3>
                <p>${message}</p>
                <button class="btn btn-secondary btn-lg" id="retry-load-rooms">
                    üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        `;
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
function showEmptyState() {
    const roomsList = document.getElementById('rooms-list');
    if (roomsList) {
        roomsList.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üè†</div>
                <h3>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç</h3>
                <p>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –∏–≥—Ä—ã.</p>
                <button class="btn btn-primary btn-lg" id="create-room-from-empty">
                    ‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É
                </button>
            </div>
        `;
    }
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
 */
function renderRooms(rooms, animateNewRooms = false) {
    const roomsList = document.getElementById('rooms-list');
    if (!roomsList) {
        return;
    }
    
    if (!rooms || rooms.length === 0) {
        showEmptyState();
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ ID –∫–æ–º–Ω–∞—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö
    const currentRoomIds = Array.from(roomsList.querySelectorAll('.room-card'))
        .map(card => card.dataset.roomId);
    
    const roomsHTML = rooms.map(room => {
        const isNewRoom = animateNewRooms && !currentRoomIds.includes(room.id);
        return createRoomCard(room, isNewRoom);
    }).join('');
    
    roomsList.innerHTML = roomsHTML;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç
    if (animateNewRooms) {
        const newRoomCards = roomsList.querySelectorAll('.room-card.new-room');
        newRoomCards.forEach((card, index) => {
            setTimeout(() => {
                card.classList.remove('new-room');
            }, 500 + (index * 100)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
        });
    }
    
    console.log(`‚úÖ Rooms: –û—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ ${rooms.length} –∫–æ–º–Ω–∞—Ç`);
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
function updateUserInfo() {
    try {
        const user = getCurrentUser();
        const username = user?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

        const usernameElement = document.getElementById('current-username');
        const userAvatarElement = document.getElementById('user-avatar');
        const userNameElement = document.getElementById('user-name');

        if (usernameElement) {
            usernameElement.textContent = username;
        }
        
        if (userAvatarElement) {
            userAvatarElement.textContent = (username || 'U').charAt(0).toUpperCase();
        }
        
        if (userNameElement) {
            userNameElement.textContent = username;
        }
        
        console.log('‚úÖ Rooms: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞:', username);
    } catch (error) {
        console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
    }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–º–Ω–∞—Ç—ã
 */
function createRoomCard(room, isNewRoom = false) {
    const status = getRoomStatus(room);
    const statusClass = getRoomStatusClass(room);
    const animationClass = isNewRoom ? 'new-room' : '';
    
    return `
        <div class="room-card ${statusClass} ${animationClass}" data-room-id="${room.id}">
            <div class="room-header">
                <h3 class="room-name">${escapeHtml(room.name)}</h3>
                <span class="room-status ${status}">${getStatusText(status)}</span>
            </div>
            
            <div class="room-info">
                <div class="room-creator">üëë ${escapeHtml(room.creator || room.creatorName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ö–æ—Å—Ç')}</div>
                <div class="room-details">
                    <span class="room-detail players">${room.playerCount}/${room.maxPlayers}</span>
                    <span class="room-detail time">${room.turnTime}—Å</span>
                    ${room.assignProfessions ? '<span class="room-detail professions">–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏</span>' : ''}
                </div>
            </div>
            
            ${room.players && room.players.length > 0 ? `
                <div class="room-players">
                    <div class="players-list">
                        ${room.players.map(player => `
                            <span class="player-tag ${player.isHost ? 'host' : ''}">
                                ${escapeHtml(player.name)}
                            </span>
                        `).join('')}
                    </div>
                </div>
            ` : ''}
            
            <div class="room-actions">
                ${createRoomActions(room)}
            </div>
        </div>
    `;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
 */
function createRoomActions(room) {
    const currentUser = getCurrentUser();
    if (!currentUser) {
        return '<button class="room-action view" disabled>–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É</button>';
    }
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç–µ
    const isInRoom = checkIfPlayerInRoom(currentUser, room);
    const canJoin = !isInRoom && roomService.canJoinRoom(currentUser.id, room);
    const canStart = isInRoom && roomService.canStartGame(currentUser.id, room);
    
    let actions = '';
    
    if (isInRoom) {
        if (canStart) {
            actions += `<button class="room-action join" data-action="start-game" data-room-id="${room.id}">–ù–∞—á–∞—Ç—å –∏–≥—Ä—É</button>`;
        } else {
            actions += `<button class="room-action view" disabled>–í—ã –≤ –∫–æ–º–Ω–∞—Ç–µ</button>`;
        }
    } else if (canJoin) {
        actions += `<button class="room-action join" data-action="join-room" data-room-id="${room.id}">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è</button>`;
    } else {
        actions += `<button class="room-action view" disabled>${getJoinDisabledReason(room)}</button>`;
    }
    
    actions += `<button class="room-action view" data-action="view-details" data-room-id="${room.id}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>`;
    
    return actions;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤ –∫–æ–º–Ω–∞—Ç–µ
 */
function checkIfPlayerInRoom(user, room) {
    if (!user || !room || !room.players) {
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ userId, id –∏–ª–∏ username
    return room.players.some(player => 
        player.userId === user.id || 
        player.id === user.id || 
        player.username === user.username ||
        player.name === user.username
    );
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–Ω–∞—Ç—ã
 */
function getRoomStatus(room) {
    if (room.isStarted) {
        return 'started';
    } else if (room.isFull) {
        return 'full';
    } else if (room.canStart) {
        return 'ready';
    } else {
        return 'waiting';
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ CSS –∫–ª–∞—Å—Å–∞ —Å—Ç–∞—Ç—É—Å–∞
 */
function getRoomStatusClass(room) {
    const status = getRoomStatus(room);
    const classes = [];
    
    if (status === 'started') {
        classes.push('started');
    } else if (status === 'ready') {
        classes.push('ready-to-start');
    } else if (status === 'full') {
        classes.push('full');
    }
    
    return classes.join(' ');
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
 */
function getStatusText(status) {
    const statusTexts = {
        'waiting': '–û–∂–∏–¥–∞–Ω–∏–µ',
        'ready': '–ì–æ—Ç–æ–≤–æ',
        'started': '–ò–≥—Ä–∞',
        'full': '–ó–∞–ø–æ–ª–Ω–µ–Ω–æ'
    };
    
    return statusTexts[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */
function getJoinDisabledReason(room) {
    if (room.isFull) {
        return '–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞';
    } else if (room.isStarted) {
        return '–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å';
    } else {
        return '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
    }
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function renderStats(stats) {
    const elements = {
        'total-rooms': stats.totalRooms || 0,
        'active-rooms': stats.activeRooms || 0,
        'started-games': stats.startedGames || 0,
        'total-players': stats.totalPlayers || 0
    };
    
    Object.entries(elements).forEach(([id, value]) => {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    });
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
 */
function showCreateRoomModal() {
    const modal = document.getElementById('create-room-modal');
    if (modal) {
        modal.classList.add('show');
        document.body.style.overflow = 'hidden';
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        const nameInput = document.getElementById('room-name');
        if (nameInput) {
            setTimeout(() => nameInput.focus(), 100);
        }
    }
}

/**
 * –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
 */
function hideCreateRoomModal() {
    const modal = document.getElementById('create-room-modal');
    if (modal) {
        modal.classList.remove('show');
        document.body.style.overflow = '';
        
        // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
        const form = document.getElementById('create-room-form');
        if (form) {
            form.reset();
            clearFormErrors();
        }
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
 */
function showJoinRoomModal(roomId) {
    const room = roomService.getCachedRooms().find(r => r.id === roomId);
    if (!room) {
        showNotification('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
        return;
    }
    
    selectedRoom = room;
    
    const modal = document.getElementById('join-room-modal');
    if (modal) {
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
        const nameElement = document.getElementById('join-room-name');
        const playersElement = document.getElementById('join-room-players');
        const maxPlayersElement = document.getElementById('join-room-max-players');
        const timeElement = document.getElementById('join-room-turn-time');
        
        if (nameElement) nameElement.textContent = room.name;
        if (playersElement) playersElement.textContent = `–ò–≥—Ä–æ–∫–æ–≤: ${room.playerCount}`;
        if (maxPlayersElement) maxPlayersElement.textContent = `–ú–∞–∫—Å–∏–º—É–º: ${room.maxPlayers}`;
        if (timeElement) timeElement.textContent = `–í—Ä–µ–º—è —Ö–æ–¥–∞: ${room.turnTime}—Å`;
        
        modal.classList.add('show');
        document.body.style.overflow = 'hidden';
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –∏–º–µ–Ω–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ–æ–∫—É—Å
        const nameInput = document.getElementById('player-name');
        if (nameInput) {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
            const currentUser = getCurrentUser();
            if (currentUser && currentUser.username) {
                nameInput.value = currentUser.username;
                console.log('üë§ Rooms: –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentUser.username);
            } else {
                console.log('‚ö†Ô∏è Rooms: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }
            
            setTimeout(() => nameInput.focus(), 100);
        }
    }
}

/**
 * –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
 */
function hideJoinRoomModal() {
    const modal = document.getElementById('join-room-modal');
    if (modal) {
        modal.classList.remove('show');
        document.body.style.overflow = '';
        
        // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
        const form = document.getElementById('join-room-form');
        if (form) {
            form.reset();
        }
        
        selectedRoom = null;
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
 */
async function handleCreateRoom(event) {
    event.preventDefault();
    
    const form = event.target;
    const formData = new FormData(form);
    
    const roomData = {
        name: formData.get('name').trim(),
        maxPlayers: parseInt(formData.get('maxPlayers')),
        turnTime: parseInt(formData.get('turnTime')),
        assignProfessions: formData.get('assignProfessions') === 'on'
    };
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!validateRoomData(roomData)) {
        return;
    }
    
    const currentUser = getCurrentUser();
    if (!currentUser) {
        showNotification('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', 'error');
        return;
    }
    
    const creator = {
        id: currentUser.id,
        name: currentUser.name,
        username: currentUser.username,
        avatar: currentUser.avatar
    };
    
    try {
        showButtonLoading('create-room-submit', true);
        
        const room = await roomService.createRoom(roomData, creator);
        
        hideCreateRoomModal();
        showNotification('–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
        await loadRooms();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await forceRefreshRooms();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º –æ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
        // await sendRoomNotification('room_created', { roomId: room.id, roomName: room.name });
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–µ
        setTimeout(() => {
            navigateToGame(room);
        }, 1000);
        
    } catch (error) {
        console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è 429 –æ—à–∏–±–æ–∫
        if (error.message && error.message.includes('429')) {
            showNotification('–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.', 'error');
        } else if (error.message && error.message.includes('Rate limited')) {
            const retryTime = error.message.match(/(\d+)ms/);
            const time = retryTime ? Math.ceil(parseInt(retryTime[1]) / 1000) : 5;
            showNotification(`–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ ${time} —Å–µ–∫—É–Ω–¥.`, 'error');
        } else {
            showNotification(error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã', 'error');
        }
    } finally {
        showButtonLoading('create-room-submit', false);
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
 */
async function handleJoinRoom(event) {
    event.preventDefault();
    
    const form = event.target;
    const formData = new FormData(form);
    
    const playerName = formData.get('name').trim();
    
    if (!playerName) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è', 'error');
        return;
    }
    
    if (!selectedRoom) {
        showNotification('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞', 'error');
        return;
    }
    
    const currentUser = getCurrentUser();
    if (!currentUser || !currentUser.id) {
        console.error('‚ùå Rooms: currentUser –∏–ª–∏ currentUser.id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç:', currentUser);
        showNotification('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', 'error');
        return;
    }
    
    const player = {
        userId: currentUser.id,
        name: playerName,
        username: currentUser.username,
        avatar: currentUser.avatar
    };
    
    try {
        showButtonLoading('join-room-submit', true);
        
        const room = await roomService.joinRoom(selectedRoom.id, player);
        
        hideJoinRoomModal();
        showNotification('–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–º–Ω–∞—Ç—É...', 'success');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
        await loadRooms();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await forceRefreshRooms();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–º–Ω–∞—Ç—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
        console.log('üéÆ Rooms: –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É –ø–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', selectedRoom.id);
        window.location.href = `room.html?id=${selectedRoom.id}`;
        
        // –ï—Å–ª–∏ –∏–≥—Ä–∞ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å—Å—è –∏ –º—ã —Ö–æ—Å—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å
        const userId = currentUser.id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ setTimeout
        if (userId && roomService.canStartGame(userId, room)) {
            setTimeout(() => {
                if (confirm('–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É —Å–µ–π—á–∞—Å?')) {
                    startGame(room.id);
                }
            }, 1000);
        }
        
    } catch (error) {
        console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
        showNotification(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ', 'error');
    } finally {
        showButtonLoading('join-room-submit', false);
    }
}

/**
 * –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
 */
async function startGame(roomId) {
    const currentUser = getCurrentUser();
    if (!currentUser) {
        showNotification('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', 'error');
        return;
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã
    window.location.href = `room.html?id=${roomId}`;
}

/**
 * –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–Ω–∞—Ç—ã
 */
function viewRoomDetails(roomId) {
    const room = roomService.getCachedRooms().find(r => r.id === roomId);
    if (!room) {
        showNotification('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
        return;
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–º–Ω–∞—Ç—ã
    window.location.href = `room.html?id=${roomId}`;
}

/**
 * –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–≥—Ä–µ
 */
function navigateToGame(room) {
    console.log('üéÆ Rooms: –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–≥—Ä–µ –≤ –∫–æ–º–Ω–∞—Ç–µ:', room.id);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É
    roomService.setCurrentRoom(room);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–º–Ω–∞—Ç—ã
    window.location.href = `room.html?id=${room.id}`;
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
 */
function validateRoomData(roomData) {
    let isValid = true;
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
    clearFormErrors();
    
    if (!roomData.name || roomData.name.length < 3) {
        showFieldError('room-name-error', '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
        isValid = false;
    }
    
    if (roomData.name && roomData.name.length > 50) {
        showFieldError('room-name-error', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤');
        isValid = false;
    }
    
    return isValid;
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—è
 */
function showFieldError(fieldId, message) {
    const errorElement = document.getElementById(fieldId);
    if (errorElement) {
        errorElement.textContent = message;
        errorElement.classList.add('show');
    }
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã
 */
function clearFormErrors() {
    const errorElements = document.querySelectorAll('.field-error');
    errorElements.forEach(element => {
        element.textContent = '';
        element.classList.remove('show');
    });
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–æ–ø–∫–∏
 */
function showButtonLoading(buttonId, loading) {
    const button = document.getElementById(buttonId);
    if (button) {
        if (loading) {
            button.disabled = true;
            button.dataset.originalText = button.textContent;
            button.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
        } else {
            button.disabled = false;
            if (button.dataset.originalText) {
                button.textContent = button.dataset.originalText;
                delete button.dataset.originalText;
            }
        }
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 */
function showNotification(message, type = 'info') {
    if (window.notificationService) {
        window.notificationService.show(message, type);
    } else {
        // Fallback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        alert(message);
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
 */
function getCurrentUser() {
    try {
        // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const raw = localStorage.getItem('currentUser') || localStorage.getItem('aura_money_user');
        if (!raw) return null;
        const user = JSON.parse(raw);
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
        if (user && user.isLoggedIn) {
            return {
                id: user.id || user.userId || 'admin',
                username: user.username || user.name || 'admin',
                name: user.name || user.username || 'admin',
                email: user.email || '',
                avatar: user.avatar || '',
                isLoggedIn: true
            };
        }
        
        return null;
    } catch (error) {
        console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return null;
    }
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
 */
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
function displayUserInfo() {
    try {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ localStorage
        const storedUser = localStorage.getItem('currentUser') || localStorage.getItem('aura_money_user');
        const storedToken = localStorage.getItem('aura_money_token') || 'ok'; // –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç–æ–∫–µ–Ω –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
        
        if (storedUser && storedToken) {
            const user = JSON.parse(storedUser);
            const userAvatar = document.getElementById('user-avatar');
            const userName = document.getElementById('user-name');
            
            if (userAvatar && userName) {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const username = user.username || user.name || user.email || 'User';
                const firstLetter = username.charAt(0).toUpperCase();
                userAvatar.textContent = firstLetter;
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                userName.textContent = username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                
                console.log('‚úÖ Rooms: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞:', user.username);
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ sidebar
            updateUserStatsInSidebar(user);
        } else {
            console.log('‚ö†Ô∏è Rooms: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ –∏–ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        }
    } catch (error) {
        console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ sidebar
 */
function updateUserStatsInSidebar(user) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const stats = user.stats || {
            gamesPlayed: 0,
            wins: 0,
            level: 1,
            rating: 1200
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ sidebar
        const userGames = document.getElementById('user-games');
        const userWins = document.getElementById('user-wins');
        const userLevel = document.getElementById('user-level');
        const userRating = document.getElementById('user-rating');
        
        if (userGames) userGames.textContent = stats.gamesPlayed || 0;
        if (userWins) userWins.textContent = stats.wins || 0;
        if (userLevel) userLevel.textContent = stats.level || 1;
        if (userRating) userRating.textContent = stats.rating || 1200;
        
        console.log('‚úÖ Rooms: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ sidebar:', stats);
    } catch (error) {
        console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
 */
async function forceRefreshRooms() {
    try {
        console.log('üîÑ Rooms: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç');
        
        // –û—á–∏—â–∞–µ–º –∫–µ—à –∫–æ–º–Ω–∞—Ç –≤ RoomService
        if (roomService && typeof roomService.clearCache === 'function') {
            roomService.clearCache();
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        await refreshRoomsList();
        
        console.log('‚úÖ Rooms: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    } catch (error) {
        console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
 */
async function refreshRoomsWithAnimation() {
    const roomsList = document.getElementById('rooms-list');
    if (!roomsList) return;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏
    roomsList.classList.add('refreshing');
    
    try {
        await refreshRoomsList();
    } finally {
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
            roomsList.classList.remove('refreshing');
        }, 500);
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —Å –æ—á–∏—Å—Ç–∫–æ–π –∫–µ—à–∞
 */
async function handleLogout() {
    try {
        console.log('üö™ Rooms: –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        const confirmed = confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã?');
        if (!confirmed) {
            return;
        }
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ localStorage
        const keysToRemove = [
            'aura_money_token',
            'aura_money_user', 
            'currentUser',
            'aura_money_dynamic_rooms',
            'aura_money_rooms_cache',
            'aura_money_stats_cache'
        ];
        
        keysToRemove.forEach(key => {
            localStorage.removeItem(key);
            sessionStorage.removeItem(key);
        });
        
        console.log('üßπ Rooms: –ö–µ—à —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showNotification('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'success');
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
        window.location.href = '/auth';
        
    } catch (error) {
        console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'error');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.loadRooms = loadRooms;
window.showCreateRoomModal = showCreateRoomModal;
window.showJoinRoomModal = showJoinRoomModal;
window.startGame = startGame;
window.viewRoomDetails = viewRoomDetails;
window.displayUserInfo = displayUserInfo;
window.forceRefreshRooms = forceRefreshRooms;
window.refreshRoomsWithAnimation = refreshRoomsWithAnimation;
