/**
 * Rooms Page Controller v1.0.0
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –≤—ã–±–æ—Ä–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let roomService;
let router;
let selectedRoom = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üè† Rooms: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–º–Ω–∞—Ç');
    
    initializeServices();
    setupEventListeners();
    loadRooms();
    loadStats();
    displayUserInfo();
});

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
 */
function initializeServices() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        roomService = new RoomService();
        // notificationService –∏ userModel –¥–æ—Å—Ç—É–ø–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ –∫–∞–∫ window.notificationService –∏ window.userModel
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        if (window.router) {
            router = window.router;
        } else {
            console.warn('‚ö†Ô∏è Rooms: –†–æ—É—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π');
            router = new Router();
        }
        
        console.log('‚úÖ Rooms: –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
        console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', 'error');
    }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const refreshBtn = document.getElementById('refresh-rooms');
    const backBtn = document.getElementById('back-to-auth');
    const createRoomBtn = document.getElementById('create-room-btn');
    
    if (refreshBtn) {
        refreshBtn.addEventListener('click', loadRooms);
    }
    
    if (backBtn) {
        backBtn.addEventListener('click', () => {
            if (router) {
                router.navigate('/auth');
            } else {
                window.location.href = '/auth';
            }
        });
    }
    
    if (createRoomBtn) {
        createRoomBtn.addEventListener('click', showCreateRoomModal);
    }
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
    const createModal = document.getElementById('create-room-modal');
    const closeModalBtn = document.getElementById('close-modal');
    const cancelCreateBtn = document.getElementById('cancel-create');
    const createRoomForm = document.getElementById('create-room-form');
    
    if (closeModalBtn) {
        closeModalBtn.addEventListener('click', hideCreateRoomModal);
    }
    
    if (cancelCreateBtn) {
        cancelCreateBtn.addEventListener('click', hideCreateRoomModal);
    }
    
    if (createRoomForm) {
        createRoomForm.addEventListener('submit', handleCreateRoom);
    }
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    const joinModal = document.getElementById('join-room-modal');
    const closeJoinBtn = document.getElementById('close-join-modal');
    const cancelJoinBtn = document.getElementById('cancel-join');
    const joinRoomForm = document.getElementById('join-room-form');
    
    if (closeJoinBtn) {
        closeJoinBtn.addEventListener('click', hideJoinRoomModal);
    }
    
    if (cancelJoinBtn) {
        cancelJoinBtn.addEventListener('click', hideJoinRoomModal);
    }
    
    if (joinRoomForm) {
        joinRoomForm.addEventListener('submit', handleJoinRoom);
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
    if (createModal) {
        createModal.addEventListener('click', (e) => {
            if (e.target === createModal) {
                hideCreateRoomModal();
            }
        });
    }
    
    if (joinModal) {
        joinModal.addEventListener('click', (e) => {
            if (e.target === joinModal) {
                hideJoinRoomModal();
            }
        });
    }
    
    console.log('‚úÖ Rooms: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
 */
async function loadRooms() {
    try {
        showLoadingState();
        
        const rooms = await roomService.getAllRooms();
        renderRooms(rooms);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–Ω–∞—Ç
        const roomsCount = document.getElementById('rooms-count');
        if (roomsCount) {
            roomsCount.textContent = `${rooms.length} –∫–æ–º–Ω–∞—Ç`;
        }
        
    } catch (error) {
        console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç:', error);
        showErrorState('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç');
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç', 'error');
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
async function loadStats() {
    try {
        const stats = await roomService.getStats();
        renderStats(stats);
    } catch (error) {
        console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
 */
function showLoadingState() {
    const roomsList = document.getElementById('rooms-list');
    if (roomsList) {
        roomsList.innerHTML = `
            <div class="loading-state">
                <div class="loading-spinner"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–Ω–∞—Ç...</p>
            </div>
        `;
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—à–∏–±–∫–∏
 */
function showErrorState(message) {
    const roomsList = document.getElementById('rooms-list');
    if (roomsList) {
        roomsList.innerHTML = `
            <div class="empty-state">
                <h3>‚ùå –û—à–∏–±–∫–∞</h3>
                <p>${message}</p>
                <button class="btn btn-primary" onclick="loadRooms()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
            </div>
        `;
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
function showEmptyState() {
    const roomsList = document.getElementById('rooms-list');
    if (roomsList) {
        roomsList.innerHTML = `
            <div class="empty-state">
                <h3>üè† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç</h3>
                <p>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –∏–≥—Ä—ã.</p>
                <button class="btn btn-primary" onclick="showCreateRoomModal()">–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É</button>
            </div>
        `;
    }
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
 */
function renderRooms(rooms) {
    const roomsList = document.getElementById('rooms-list');
    if (!roomsList) {
        return;
    }
    
    if (!rooms || rooms.length === 0) {
        showEmptyState();
        return;
    }
    
    const roomsHTML = rooms.map(room => createRoomCard(room)).join('');
    roomsList.innerHTML = roomsHTML;
    
    console.log(`‚úÖ Rooms: –û—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ ${rooms.length} –∫–æ–º–Ω–∞—Ç`);
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–º–Ω–∞—Ç—ã
 */
function createRoomCard(room) {
    const status = getRoomStatus(room);
    const statusClass = getRoomStatusClass(room);
    
    return `
        <div class="room-card ${statusClass}" data-room-id="${room.id}">
            <div class="room-header">
                <h3 class="room-name">${escapeHtml(room.name)}</h3>
                <span class="room-status ${status}">${getStatusText(status)}</span>
            </div>
            
            <div class="room-info">
                <div class="room-creator">${escapeHtml(room.creatorName)}</div>
                <div class="room-details">
                    <span class="room-detail players">${room.playerCount}/${room.maxPlayers}</span>
                    <span class="room-detail time">${room.turnTime}—Å</span>
                    ${room.assignProfessions ? '<span class="room-detail professions">–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏</span>' : ''}
                </div>
            </div>
            
            ${room.players && room.players.length > 0 ? `
                <div class="room-players">
                    <div class="players-list">
                        ${room.players.map(player => `
                            <span class="player-tag ${player.isHost ? 'host' : ''}">
                                ${escapeHtml(player.name)}
                            </span>
                        `).join('')}
                    </div>
                </div>
            ` : ''}
            
            <div class="room-actions">
                ${createRoomActions(room)}
            </div>
        </div>
    `;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
 */
function createRoomActions(room) {
    const currentUser = getCurrentUser();
    if (!currentUser) {
        return '<button class="room-action view" disabled>–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É</button>';
    }
    
    const canJoin = roomService.canJoinRoom(currentUser.id, room);
    const canStart = roomService.canStartGame(currentUser.id, room);
    const isInRoom = roomService.getPlayer(currentUser.id, room) !== null;
    
    let actions = '';
    
    if (isInRoom) {
        if (canStart) {
            actions += `<button class="room-action join" onclick="startGame('${room.id}')">–ù–∞—á–∞—Ç—å –∏–≥—Ä—É</button>`;
        } else {
            actions += `<button class="room-action view" disabled>–í—ã –≤ –∫–æ–º–Ω–∞—Ç–µ</button>`;
        }
    } else if (canJoin) {
        actions += `<button class="room-action join" onclick="showJoinRoomModal('${room.id}')">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è</button>`;
    } else {
        actions += `<button class="room-action view" disabled>${getJoinDisabledReason(room)}</button>`;
    }
    
    actions += `<button class="room-action view" onclick="viewRoomDetails('${room.id}')">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>`;
    
    return actions;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–Ω–∞—Ç—ã
 */
function getRoomStatus(room) {
    if (room.isStarted) {
        return 'started';
    } else if (room.isFull) {
        return 'full';
    } else if (room.canStart) {
        return 'ready';
    } else {
        return 'waiting';
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ CSS –∫–ª–∞—Å—Å–∞ —Å—Ç–∞—Ç—É—Å–∞
 */
function getRoomStatusClass(room) {
    const status = getRoomStatus(room);
    const classes = [];
    
    if (status === 'started') {
        classes.push('started');
    } else if (status === 'ready') {
        classes.push('ready-to-start');
    } else if (status === 'full') {
        classes.push('full');
    }
    
    return classes.join(' ');
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
 */
function getStatusText(status) {
    const statusTexts = {
        'waiting': '–û–∂–∏–¥–∞–Ω–∏–µ',
        'ready': '–ì–æ—Ç–æ–≤–æ',
        'started': '–ò–≥—Ä–∞',
        'full': '–ó–∞–ø–æ–ª–Ω–µ–Ω–æ'
    };
    
    return statusTexts[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */
function getJoinDisabledReason(room) {
    if (room.isFull) {
        return '–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞';
    } else if (room.isStarted) {
        return '–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å';
    } else {
        return '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
    }
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function renderStats(stats) {
    const elements = {
        'total-rooms': stats.totalRooms || 0,
        'active-rooms': stats.activeRooms || 0,
        'started-games': stats.startedGames || 0,
        'total-players': stats.totalPlayers || 0
    };
    
    Object.entries(elements).forEach(([id, value]) => {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    });
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
 */
function showCreateRoomModal() {
    const modal = document.getElementById('create-room-modal');
    if (modal) {
        modal.classList.add('show');
        document.body.style.overflow = 'hidden';
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        const nameInput = document.getElementById('room-name');
        if (nameInput) {
            setTimeout(() => nameInput.focus(), 100);
        }
    }
}

/**
 * –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
 */
function hideCreateRoomModal() {
    const modal = document.getElementById('create-room-modal');
    if (modal) {
        modal.classList.remove('show');
        document.body.style.overflow = '';
        
        // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
        const form = document.getElementById('create-room-form');
        if (form) {
            form.reset();
            clearFormErrors();
        }
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
 */
function showJoinRoomModal(roomId) {
    const room = roomService.getCachedRooms().find(r => r.id === roomId);
    if (!room) {
        showNotification('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
        return;
    }
    
    selectedRoom = room;
    
    const modal = document.getElementById('join-room-modal');
    if (modal) {
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
        const nameElement = document.getElementById('join-room-name');
        const playersElement = document.getElementById('join-room-players');
        const maxPlayersElement = document.getElementById('join-room-max-players');
        const timeElement = document.getElementById('join-room-turn-time');
        
        if (nameElement) nameElement.textContent = room.name;
        if (playersElement) playersElement.textContent = `–ò–≥—Ä–æ–∫–æ–≤: ${room.playerCount}`;
        if (maxPlayersElement) maxPlayersElement.textContent = `–ú–∞–∫—Å–∏–º—É–º: ${room.maxPlayers}`;
        if (timeElement) timeElement.textContent = `–í—Ä–µ–º—è —Ö–æ–¥–∞: ${room.turnTime}—Å`;
        
        modal.classList.add('show');
        document.body.style.overflow = 'hidden';
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –∏–º–µ–Ω–∏
        const nameInput = document.getElementById('player-name');
        if (nameInput) {
            setTimeout(() => nameInput.focus(), 100);
        }
    }
}

/**
 * –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
 */
function hideJoinRoomModal() {
    const modal = document.getElementById('join-room-modal');
    if (modal) {
        modal.classList.remove('show');
        document.body.style.overflow = '';
        
        // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
        const form = document.getElementById('join-room-form');
        if (form) {
            form.reset();
        }
        
        selectedRoom = null;
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
 */
async function handleCreateRoom(event) {
    event.preventDefault();
    
    const form = event.target;
    const formData = new FormData(form);
    
    const roomData = {
        name: formData.get('name').trim(),
        maxPlayers: parseInt(formData.get('maxPlayers')),
        turnTime: parseInt(formData.get('turnTime')),
        assignProfessions: formData.get('assignProfessions') === 'on'
    };
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!validateRoomData(roomData)) {
        return;
    }
    
    const currentUser = getCurrentUser();
    if (!currentUser) {
        showNotification('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', 'error');
        return;
    }
    
    const creator = {
        id: currentUser.id,
        name: currentUser.name,
        username: currentUser.username,
        avatar: currentUser.avatar
    };
    
    try {
        showButtonLoading('create-room-submit', true);
        
        const room = await roomService.createRoom(roomData, creator);
        
        hideCreateRoomModal();
        showNotification('–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
        await loadRooms();
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–µ
        setTimeout(() => {
            navigateToGame(room);
        }, 1000);
        
    } catch (error) {
        console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
        showNotification(error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã', 'error');
    } finally {
        showButtonLoading('create-room-submit', false);
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
 */
async function handleJoinRoom(event) {
    event.preventDefault();
    
    const form = event.target;
    const formData = new FormData(form);
    
    const playerName = formData.get('name').trim();
    
    if (!playerName) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è', 'error');
        return;
    }
    
    if (!selectedRoom) {
        showNotification('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞', 'error');
        return;
    }
    
    const currentUser = getCurrentUser();
    if (!currentUser) {
        showNotification('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', 'error');
        return;
    }
    
    const player = {
        userId: currentUser.id,
        name: playerName,
        username: currentUser.username,
        avatar: currentUser.avatar
    };
    
    try {
        showButtonLoading('join-room-submit', true);
        
        const room = await roomService.joinRoom(selectedRoom.id, player);
        
        hideJoinRoomModal();
        showNotification('–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ!', 'success');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
        await loadRooms();
        
        // –ï—Å–ª–∏ –∏–≥—Ä–∞ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å—Å—è –∏ –º—ã —Ö–æ—Å—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å
        if (roomService.canStartGame(currentUser.id, room)) {
            setTimeout(() => {
                if (confirm('–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É —Å–µ–π—á–∞—Å?')) {
                    startGame(room.id);
                }
            }, 1000);
        }
        
    } catch (error) {
        console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
        showNotification(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ', 'error');
    } finally {
        showButtonLoading('join-room-submit', false);
    }
}

/**
 * –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
 */
async function startGame(roomId) {
    const currentUser = getCurrentUser();
    if (!currentUser) {
        showNotification('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', 'error');
        return;
    }
    
    try {
        const room = await roomService.startGame(roomId, currentUser.id);
        
        showNotification('–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞!', 'success');
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–µ
        setTimeout(() => {
            navigateToGame(room);
        }, 1000);
        
    } catch (error) {
        console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', error);
        showNotification(error.message || '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã', 'error');
    }
}

/**
 * –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–Ω–∞—Ç—ã
 */
function viewRoomDetails(roomId) {
    const room = roomService.getCachedRooms().find(r => r.id === roomId);
    if (!room) {
        showNotification('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
    const details = `
–ö–æ–º–Ω–∞—Ç–∞: ${room.name}
–°–æ–∑–¥–∞—Ç–µ–ª—å: ${room.creatorName}
–ò–≥—Ä–æ–∫–æ–≤: ${room.playerCount}/${room.maxPlayers}
–í—Ä–µ–º—è —Ö–æ–¥–∞: ${room.turnTime} —Å–µ–∫—É–Ω–¥
–°—Ç–∞—Ç—É—Å: ${getStatusText(getRoomStatus(room))}
${room.assignProfessions ? '–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–∞–∑–Ω–∞—á–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏' : '–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é'}
    `.trim();
    
    alert(details);
}

/**
 * –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–≥—Ä–µ
 */
function navigateToGame(room) {
    console.log('üéÆ Rooms: –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–≥—Ä–µ –≤ –∫–æ–º–Ω–∞—Ç–µ:', room.id);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É
    roomService.setCurrentRoom(room);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã
    if (router) {
        router.navigate('/game', { roomId: room.id });
    } else {
        window.location.href = '/';
    }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
 */
function validateRoomData(roomData) {
    let isValid = true;
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
    clearFormErrors();
    
    if (!roomData.name || roomData.name.length < 3) {
        showFieldError('room-name-error', '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
        isValid = false;
    }
    
    if (roomData.name && roomData.name.length > 50) {
        showFieldError('room-name-error', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤');
        isValid = false;
    }
    
    return isValid;
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—è
 */
function showFieldError(fieldId, message) {
    const errorElement = document.getElementById(fieldId);
    if (errorElement) {
        errorElement.textContent = message;
        errorElement.classList.add('show');
    }
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã
 */
function clearFormErrors() {
    const errorElements = document.querySelectorAll('.field-error');
    errorElements.forEach(element => {
        element.textContent = '';
        element.classList.remove('show');
    });
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–æ–ø–∫–∏
 */
function showButtonLoading(buttonId, loading) {
    const button = document.getElementById(buttonId);
    if (button) {
        if (loading) {
            button.disabled = true;
            button.dataset.originalText = button.textContent;
            button.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
        } else {
            button.disabled = false;
            if (button.dataset.originalText) {
                button.textContent = button.dataset.originalText;
                delete button.dataset.originalText;
            }
        }
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 */
function showNotification(message, type = 'info') {
    if (window.notificationService) {
        window.notificationService.show(message, type);
    } else {
        // Fallback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        alert(message);
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
 */
function getCurrentUser() {
    try {
        const storedUser = localStorage.getItem('aura_money_user');
        if (!storedUser) {
            return null;
        }
        return JSON.parse(storedUser);
    } catch (error) {
        console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return null;
    }
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
 */
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
function displayUserInfo() {
    try {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ localStorage
        const storedUser = localStorage.getItem('aura_money_user');
        const storedToken = localStorage.getItem('aura_money_token');
        
        if (storedUser && storedToken) {
            const user = JSON.parse(storedUser);
            const userAvatar = document.getElementById('user-avatar');
            const userName = document.getElementById('user-name');
            
            if (userAvatar && userName) {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const firstLetter = user.username ? user.username.charAt(0).toUpperCase() : 'U';
                userAvatar.textContent = firstLetter;
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                userName.textContent = user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                
                console.log('‚úÖ Rooms: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞:', user.username);
            }
        } else {
            console.log('‚ö†Ô∏è Rooms: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ –∏–ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        }
    } catch (error) {
        console.error('‚ùå Rooms: –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.loadRooms = loadRooms;
window.showCreateRoomModal = showCreateRoomModal;
window.showJoinRoomModal = showJoinRoomModal;
window.startGame = startGame;
window.viewRoomDetails = viewRoomDetails;
window.displayUserInfo = displayUserInfo;
