/**
 * PushClient v1.0.0
 * –ö–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏
 */

class PushClient {
    constructor(gameStateManager, options = {}) {
        this.gameStateManager = gameStateManager;
        this.options = {
            reconnectInterval: 5000,
            maxReconnectAttempts: 10,
            enableLogging: true,
            ...options
        };
        
        this.eventSource = null;
        this.reconnectAttempts = 0;
        this.isConnected = false;
        this.roomId = null;
        
        console.log('üì° PushClient: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     */
    connect(roomId) {
        this.roomId = roomId;
        
        if (this.eventSource) {
            this.disconnect();
        }
        
        try {
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            this.registerClient(roomId).then(() => {
                this.setupEventSource();
            }).catch(error => {
                console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
                this.scheduleReconnect();
            });
        } catch (error) {
            console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            this.scheduleReconnect();
        }
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     */
    async registerClient(roomId) {
        const clientId = this.generateClientId();
        const userInfo = this.getCurrentUserInfo();
        
        const response = await fetch('/api/rooms/push/register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                clientId,
                userInfo: {
                    ...userInfo,
                    roomId
                }
            })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        this.clientId = clientId;
        console.log('üì° PushClient: –ö–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', clientId);
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ EventSource –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    setupEventSource() {
        if (!this.roomId) {
            console.error('‚ùå PushClient: roomId –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            return;
        }
        
        try {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã WebSocket –∏–ª–∏ Server-Sent Events
            // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            this.startPolling();
            
            console.log('üì° PushClient: –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º');
        } catch (error) {
            console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ EventSource:', error);
            this.scheduleReconnect();
        }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
     * –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã WebSocket
     */
    startPolling() {
        this.pollingInterval = setInterval(async () => {
            try {
                await this.checkForUpdates();
            } catch (error) {
                console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ polling:', error);
            }
        }, 2000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        
        this.isConnected = true;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async checkForUpdates() {
        if (!this.roomId) return;
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            const response = await fetch(`/api/rooms/${this.roomId}/game-state`);
            if (response.ok) {
                const data = await response.json();
                if (data.success && data.state) {
                    this.handleServerUpdate(data.state);
                }
            }
        } catch (error) {
            console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
     * @param {Object} serverState - –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    handleServerUpdate(serverState) {
        // –û–±–Ω–æ–≤–ª—è–µ–º GameStateManager
        this.gameStateManager.updateFromServer(serverState);
        
        if (this.options.enableLogging) {
            console.log('üì° PushClient: –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ push-—Å–æ–±—ã—Ç–∏—è
     * @param {Object} eventData - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    handlePushEvent(eventData) {
        const { type, data } = eventData;
        
        switch (type) {
            case 'turn_changed':
                this.handleTurnChanged(data);
                break;
            case 'player_joined':
                this.handlePlayerJoined(data);
                break;
            case 'player_left':
                this.handlePlayerLeft(data);
                break;
            case 'dice_rolled':
                this.handleDiceRolled(data);
                break;
            case 'player_moved':
                this.handlePlayerMoved(data);
                break;
            case 'game_started':
                this.handleGameStarted(data);
                break;
            default:
                console.log('üì° PushClient: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:', type);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ö–æ–¥–∞
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    handleTurnChanged(data) {
        console.log('üì° PushClient: –°–º–µ–Ω–∞ —Ö–æ–¥–∞:', data);
        // GameStateManager —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ handleServerUpdate
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    handlePlayerJoined(data) {
        console.log('üì° PushClient: –ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:', data);
        this.gameStateManager.addPlayer(data.player);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    handlePlayerLeft(data) {
        console.log('üì° PushClient: –ò–≥—Ä–æ–∫ –≤—ã—à–µ–ª:', data);
        this.gameStateManager.removePlayer(data.playerId);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    handleDiceRolled(data) {
        console.log('üì° PushClient: –ö—É–±–∏–∫ –±—Ä–æ—à–µ–Ω:', data);
        this.gameStateManager.updateDiceResult({ value: data.diceValue });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    handlePlayerMoved(data) {
        console.log('üì° PushClient: –ò–≥—Ä–æ–∫ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è:', data);
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
        const player = this.gameStateManager.getPlayerById(data.activePlayer.id);
        if (player) {
            player.position = data.newPosition;
            this.gameStateManager.updatePlayer(player);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    handleGameStarted(data) {
        console.log('üì° PushClient: –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å:', data);
        this.gameStateManager.updateFromServer({
            gameStarted: true,
            players: data.players,
            activePlayer: data.activePlayer
        });
    }
    
    /**
     * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    scheduleReconnect() {
        if (this.reconnectAttempts >= this.options.maxReconnectAttempts) {
            console.error('‚ùå PushClient: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ');
            return;
        }
        
        this.reconnectAttempts++;
        console.log(`üì° PushClient: –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${this.options.reconnectInterval}ms (–ø–æ–ø—ã—Ç–∫–∞ ${this.reconnectAttempts})`);
        
        setTimeout(() => {
            this.connect(this.roomId);
        }, this.options.reconnectInterval);
    }
    
    /**
     * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    disconnect() {
        if (this.eventSource) {
            this.eventSource.close();
            this.eventSource = null;
        }
        
        if (this.pollingInterval) {
            clearInterval(this.pollingInterval);
            this.pollingInterval = null;
        }
        
        this.isConnected = false;
        
        // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        if (this.clientId) {
            this.unregisterClient();
        }
        
        console.log('üì° PushClient: –û—Ç–∫–ª—é—á–µ–Ω');
    }
    
    /**
     * –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
     */
    async unregisterClient() {
        if (!this.clientId) return;
        
        try {
            await fetch('/api/rooms/push/unregister', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    clientId: this.clientId
                })
            });
            
            console.log('üì° PushClient: –ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–µ–Ω');
        } catch (error) {
            console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∫–ª–∏–µ–Ω—Ç–∞
     * @returns {string} ID –∫–ª–∏–µ–Ω—Ç–∞
     */
    generateClientId() {
        return `client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    getCurrentUserInfo() {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ sessionStorage
            const bundleRaw = sessionStorage.getItem('am_player_bundle');
            if (bundleRaw) {
                const bundle = JSON.parse(bundleRaw);
                return bundle.currentUser || {};
            }
            
            // Fallback –∫ localStorage
            const userRaw = localStorage.getItem('aura_money_user');
            if (userRaw) {
                return JSON.parse(userRaw);
            }
        } catch (error) {
            console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
        }
        
        return {};
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     * @returns {boolean} –ü–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç
     */
    isConnected() {
        return this.isConnected;
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
     */
    destroy() {
        this.disconnect();
        console.log('üì° PushClient: –£–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.PushClient = PushClient;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = PushClient;
}
