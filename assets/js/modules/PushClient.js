/**
 * PushClient - –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
 */
class PushClient {
    constructor(config = {}) {
        this.serverUrl = config.serverUrl || window.location.origin;
        this.registration = null;
        this.subscription = null;
        this.isSupported = 'serviceWorker' in navigator && 'PushManager' in window;
        this.isSubscribed = false;
        
        console.log('üîî PushClient: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è', {
            isSupported: this.isSupported,
            serverUrl: this.serverUrl
        });
        
        this.init();
    }
    
    async init() {
        if (!this.isSupported) {
            console.warn('‚ö†Ô∏è PushClient: Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
            return;
        }
        
        try {
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Service Worker
            this.registration = await navigator.serviceWorker.register('/sw.js');
            console.log('‚úÖ PushClient: Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
            this.subscription = await this.registration.pushManager.getSubscription();
            this.isSubscribed = !!this.subscription;
            
            console.log('üîî PushClient: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏', {
                isSubscribed: this.isSubscribed,
                subscription: this.subscription
            });
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ—ë –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            if (this.isSubscribed) {
                await this.registerWithServer();
            }
            
        } catch (error) {
            console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', error);
        }
    }
    
    async requestPermission() {
        if (!this.isSupported) {
            throw new Error('Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
        }
        
        try {
            const permission = await Notification.requestPermission();
            console.log('üîî PushClient: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', permission);
            
            if (permission === 'granted') {
                return true;
            } else {
                console.warn('‚ö†Ô∏è PushClient: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
                return false;
            }
        } catch (error) {
            console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è', error);
            return false;
        }
    }
    
    async subscribe() {
        if (!this.isSupported || !this.registration) {
            throw new Error('Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∏–ª–∏ Service Worker –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
        }
        
        try {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            const hasPermission = await this.requestPermission();
            if (!hasPermission) {
                throw new Error('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ');
            }
            
            // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            this.subscription = await this.registration.pushManager.subscribe({
                userVisibleOnly: true,
                applicationServerKey: this.urlBase64ToUint8Array(this.getVapidPublicKey())
            });
            
            this.isSubscribed = true;
            console.log('‚úÖ PushClient: –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞', this.subscription);
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            await this.registerWithServer();
            
            return this.subscription;
            
        } catch (error) {
            console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏', error);
            throw error;
        }
    }
    
    async unsubscribe() {
        if (!this.subscription) {
            console.log('üîî PushClient: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏');
            return;
        }
        
        try {
            const success = await this.subscription.unsubscribe();
            if (success) {
                this.isSubscribed = false;
                this.subscription = null;
                console.log('‚úÖ PushClient: –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ–± –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏
                await this.unregisterFromServer();
            }
            
            return success;
        } catch (error) {
            console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏', error);
            throw error;
        }
    }
    
    async registerWithServer() {
        if (!this.subscription) {
            console.warn('‚ö†Ô∏è PushClient: –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
            return;
        }
        
        try {
            const response = await fetch(`${this.serverUrl}/api/rooms/push/register`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    subscription: this.subscription,
                    userInfo: this.getUserInfo()
                })
            });
            
            const result = await response.json();
            
            if (result.success) {
                console.log('‚úÖ PushClient: –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ', result);
            } else {
                console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ', result);
            }
            
            return result;
        } catch (error) {
            console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ', error);
            throw error;
        }
    }
    
    async unregisterFromServer() {
        try {
            const response = await fetch(`${this.serverUrl}/api/rooms/push/unregister`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    subscription: this.subscription
                })
            });
            
            const result = await response.json();
            console.log('üîî PushClient: –û—Ç—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞', result);
            
            return result;
        } catch (error) {
            console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ –æ—Ç—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞', error);
            throw error;
        }
    }
    
    getUserInfo() {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ localStorage –∏–ª–∏ sessionStorage
        const userData = localStorage.getItem('am_user_data') || sessionStorage.getItem('am_user_data');
        if (userData) {
            try {
                return JSON.parse(userData);
            } catch (error) {
                console.warn('‚ö†Ô∏è PushClient: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error);
            }
        }
        
        return {
            userId: 'anonymous',
            username: '–ì–æ—Å—Ç—å'
        };
    }
    
    getVapidPublicKey() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        return 'BPg1aJO5Pg7_EPKPWWofjMaqb5L5gVeaT5qwBQfAUxIAZ8FWdnbs810bZqJ6WoC5hzH3t9NwV7Y3J42ZqfDKUDM';
    }
    
    urlBase64ToUint8Array(base64String) {
        const padding = '='.repeat((4 - base64String.length % 4) % 4);
        const base64 = (base64String + padding)
            .replace(/-/g, '+')
            .replace(/_/g, '/');
        
        const rawData = window.atob(base64);
        const outputArray = new Uint8Array(rawData.length);
        
        for (let i = 0; i < rawData.length; ++i) {
            outputArray[i] = rawData.charCodeAt(i);
        }
        return outputArray;
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    async sendNotification(title, message, options = {}) {
        if (!this.isSubscribed) {
            console.warn('‚ö†Ô∏è PushClient: –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
            return;
        }
        
        try {
            const response = await fetch(`${this.serverUrl}/api/rooms/push/send`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    title,
                    message,
                    ...options
                })
            });
            
            const result = await response.json();
            console.log('üîî PushClient: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', result);
            
            return result;
        } catch (error) {
            console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', error);
            throw error;
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async getStats() {
        try {
            const response = await fetch(`${this.serverUrl}/api/rooms/push/stats`);
            const result = await response.json();
            console.log('üîî PushClient: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', result);
            
            return result;
        } catch (error) {
            console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', error);
            throw error;
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
window.PushClient = PushClient;