/**
 * GameState - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã
 */
class GameState {
    constructor(eventBus) {
        this.eventBus = eventBus;
        this.players = [];
        this.currentPlayerIndex = 0;
        this.gameStarted = false;
        this.lastDiceRoll = null;
        
        console.log('‚úÖ GameState –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
     * @param {Array} players - –ú–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤
     */
    startGame(players = [{ 
        name: '–ò–≥—Ä–æ–∫ 1', 
        position: 0, 
        isInner: false, 
        money: 5000,
        salary: 5000,
        totalIncome: 0,
        monthlyExpenses: 2000,
        assets: [],
        dreams: []
    }]) {
        this.players = players;
        this.currentPlayerIndex = 0;
        this.gameStarted = true;
        this.lastDiceRoll = null;
        
        console.log('üéÆ GameState: –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞', this.players);
        
        if (this.eventBus) {
            this.eventBus.emit('game:started', {
                players: this.players
            });
        }
    }

    /**
     * –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
     * @returns {number} - –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
     */
    rollDice() {
        const roll = Math.floor(Math.random() * 6) + 1;
        this.lastDiceRoll = roll;
        
        console.log('üé≤ GameState: –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ =', roll);
        
        if (this.eventBus) {
            this.eventBus.emit('dice:rolled', {
                roll: roll,
                player: this.getCurrentPlayer()
            });
        }
        
        return roll;
    }

    /**
     * –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     * @param {number} steps - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
     */
    moveCurrentPlayer(steps) {
        const player = this.getCurrentPlayer();
        if (!player) {
            console.error('‚ùå GameState: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞');
            return;
        }

        const oldPosition = player.position;
        const oldIsInner = player.isInner;
        
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (–±–µ–∑ —É—á–µ—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Ç—Ä–µ–∫–∞–º–∏)
        const maxPosition = player.isInner ? 
            window.SMALL_CIRCLE_CELLS.length - 1 : 
            window.BIG_CIRCLE_CELLS.length - 1;
        
        player.position = (player.position + steps) % (maxPosition + 1);
        
        console.log(`üö∂ GameState: ${player.name} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è —Å ${oldPosition} –Ω–∞ ${player.position}`);
        
        if (this.eventBus) {
            this.eventBus.emit('player:moved', {
                player: player,
                oldPosition: oldPosition,
                oldIsInner: oldIsInner,
                position: player.position,
                isInner: player.isInner
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     * @returns {Object} - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     */
    getCurrentPlayer() {
        return this.players[this.currentPlayerIndex];
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    nextPlayer() {
        this.currentPlayerIndex = (this.currentPlayerIndex + 1) % this.players.length;
        
        const player = this.getCurrentPlayer();
        console.log(`üë§ GameState: –•–æ–¥ –∏–≥—Ä–æ–∫–∞ ${player.name}`);
        
        if (this.eventBus) {
            this.eventBus.emit('player:changed', {
                player: player,
                index: this.currentPlayerIndex
            });
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫–∞
     * @param {number} amount - –°—É–º–º–∞ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è)
     */
    updatePlayerMoney(amount) {
        const player = this.getCurrentPlayer();
        if (!player) {
            return;
        }

        const oldMoney = player.money;
        player.money += amount;
        
        console.log(`üí∞ GameState: ${player.name} –¥–µ–Ω—å–≥–∏: ${oldMoney} ‚Üí ${player.money}`);
        
        if (this.eventBus) {
            this.eventBus.emit('player:money-changed', {
                player: player,
                oldMoney: oldMoney,
                newMoney: player.money,
                change: amount
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     * @returns {Object} - –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    getState() {
        return {
            players: this.players,
            currentPlayerIndex: this.currentPlayerIndex,
            currentPlayer: this.getCurrentPlayer(),
            gameStarted: this.gameStarted,
            lastDiceRoll: this.lastDiceRoll
        };
    }
}

window.GameState = GameState;

