/**
 * GameState - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã
 */
class GameState {
    constructor(eventBus) {
        this.eventBus = eventBus;
        this.players = [];
        this.currentPlayerIndex = 0;
        this.gameStarted = false;
        this.lastDiceRoll = null;
        this.roomId = null;
        this.gameState = {
            canRoll: false,
            canMove: false,
            canEndTurn: false,
            activePlayer: null,
            lastDiceResult: null
        };
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
        this.professionModule = new ProfessionModule();
        
        console.log('‚úÖ GameState –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
     * @param {Array} players - –ú–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤
     */
    startGame(players = [{ 
        name: '–ò–≥—Ä–æ–∫ 1', 
        position: 0, 
        isInner: false, 
        money: 5000,
        salary: 5000,
        totalIncome: 0,
        monthlyExpenses: 2000,
        assets: [],
        dreams: []
    }]) {
        this.players = players;
        this.currentPlayerIndex = 0;
        this.gameStarted = true;
        this.lastDiceRoll = null;
        
        console.log('üéÆ GameState: –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞', this.players);
        
        if (this.eventBus) {
            this.eventBus.emit('game:started', {
                players: this.players
            });
        }
    }

    /**
     * –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
     * @returns {number} - –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
     */
    rollDice() {
        const roll = Math.floor(Math.random() * 6) + 1;
        this.lastDiceRoll = roll;
        
        console.log('üé≤ GameState: –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ =', roll);
        
        if (this.eventBus) {
            this.eventBus.emit('dice:rolled', {
                roll: roll,
                player: this.getCurrentPlayer()
            });
        }
        
        return roll;
    }

    /**
     * –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     * @param {number} steps - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
     */
    moveCurrentPlayer(steps) {
        const player = this.getCurrentPlayer();
        if (!player) {
            console.error('‚ùå GameState: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞');
            return;
        }

        const oldPosition = player.position;
        const oldIsInner = player.isInner;
        
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (–±–µ–∑ —É—á–µ—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Ç—Ä–µ–∫–∞–º–∏)
        const maxPosition = player.isInner ? 
            window.SMALL_CIRCLE_CELLS.length - 1 : 
            window.BIG_CIRCLE_CELLS.length - 1;
        
        player.position = (player.position + steps) % (maxPosition + 1);
        
        console.log(`üö∂ GameState: ${player.name} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è —Å ${oldPosition} –Ω–∞ ${player.position}`);
        
        if (this.eventBus) {
            this.eventBus.emit('player:moved', {
                player: player,
                oldPosition: oldPosition,
                oldIsInner: oldIsInner,
                position: player.position,
                isInner: player.isInner
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     * @returns {Object} - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     */
    getCurrentPlayer() {
        return this.players[this.currentPlayerIndex];
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    nextPlayer() {
        this.currentPlayerIndex = (this.currentPlayerIndex + 1) % this.players.length;
        
        const player = this.getCurrentPlayer();
        console.log(`üë§ GameState: –•–æ–¥ –∏–≥—Ä–æ–∫–∞ ${player.name}`);
        
        if (this.eventBus) {
            this.eventBus.emit('player:changed', {
                player: player,
                index: this.currentPlayerIndex
            });
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫–∞
     * @param {number} amount - –°—É–º–º–∞ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è)
     */
    updatePlayerMoney(amount) {
        const player = this.getCurrentPlayer();
        if (!player) {
            return;
        }

        const oldMoney = player.money;
        player.money += amount;
        
        console.log(`üí∞ GameState: ${player.name} –¥–µ–Ω—å–≥–∏: ${oldMoney} ‚Üí ${player.money}`);
        
        if (this.eventBus) {
            this.eventBus.emit('player:money-changed', {
                player: player,
                oldMoney: oldMoney,
                newMoney: player.money,
                change: amount
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     * @returns {Object} - –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    getState() {
        return {
            players: this.players,
            currentPlayerIndex: this.currentPlayerIndex,
            currentPlayer: this.getCurrentPlayer(),
            gameStarted: this.gameStarted,
            lastDiceRoll: this.lastDiceRoll,
            ...this.gameState
        };
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     */
    setRoomId(roomId) {
        this.roomId = roomId;
        console.log('üè† GameState: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID –∫–æ–º–Ω–∞—Ç—ã:', roomId);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å ID –∫–æ–º–Ω–∞—Ç—ã
     * @returns {string} ID –∫–æ–º–Ω–∞—Ç—ã
     */
    getRoomId() {
        return this.roomId;
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
     * @param {Object} serverState - –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
     */
    applyState(serverState) {
        if (serverState.players) {
            this.players = serverState.players;
        }
        
        if (serverState.currentPlayerIndex !== undefined) {
            this.currentPlayerIndex = serverState.currentPlayerIndex;
        }
        
        if (serverState.gameStarted !== undefined) {
            this.gameStarted = serverState.gameStarted;
        }
        
        if (serverState.lastDiceRoll !== undefined) {
            this.lastDiceRoll = serverState.lastDiceRoll;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (serverState.canRoll !== undefined) {
            this.gameState.canRoll = serverState.canRoll;
        }
        
        if (serverState.canMove !== undefined) {
            this.gameState.canMove = serverState.canMove;
        }
        
        if (serverState.canEndTurn !== undefined) {
            this.gameState.canEndTurn = serverState.canEndTurn;
        }
        
        if (serverState.activePlayer) {
            this.gameState.activePlayer = serverState.activePlayer;
        }
        
        if (serverState.lastDiceResult) {
            this.gameState.lastDiceResult = serverState.lastDiceResult;
        }
        
        console.log('üîÑ GameState: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (this.eventBus) {
            this.eventBus.emit('game:stateUpdated', this.getState());
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     * @returns {Object} –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
     */
    getActivePlayer() {
        return this.gameState.activePlayer || this.getCurrentPlayer();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –ø–æ ID
     * @param {string} playerId 
     * @returns {Object|null}
     */
    getPlayerById(playerId) {
        return this.players.find(player => player.id === playerId) || null;
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∫ –∏–≥—Ä–æ–∫—É
     * @param {string} playerId 
     * @param {string} professionId 
     * @returns {boolean}
     */
    applyProfessionToPlayer(playerId, professionId) {
        const player = this.getPlayerById(playerId);
        if (!player) {
            console.error('‚ùå GameState: –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω:', playerId);
            return false;
        }

        const updatedPlayer = this.professionModule.applyProfessionToPlayer(player, professionId);
        const playerIndex = this.players.findIndex(p => p.id === playerId);
        
        if (playerIndex !== -1) {
            this.players[playerIndex] = updatedPlayer;
            console.log('‚úÖ GameState: –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ –∏–≥—Ä–æ–∫—É:', player.username, professionId);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞
            if (this.eventBus) {
                this.eventBus.emit('player:professionChanged', {
                    player: updatedPlayer,
                    professionId: professionId
                });
            }
            
            return true;
        }
        
        return false;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
     * @returns {Array}
     */
    getAvailableProfessions() {
        return this.professionModule.getActiveProfessions();
    }

    /**
     * –ü–æ–≥–∞—Å–∏—Ç—å –¥–æ–ª–≥ –∏–≥—Ä–æ–∫–∞
     * @param {string} playerId 
     * @param {string} debtId 
     * @param {number} amount 
     * @returns {boolean}
     */
    payOffPlayerDebt(playerId, debtId, amount) {
        const player = this.getPlayerById(playerId);
        if (!player) {
            console.error('‚ùå GameState: –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω:', playerId);
            return false;
        }

        if (player.money < amount) {
            console.error('‚ùå GameState: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞');
            return false;
        }

        const updatedPlayer = this.professionModule.payOffDebt(player, debtId, amount);
        const playerIndex = this.players.findIndex(p => p.id === playerId);
        
        if (playerIndex !== -1) {
            this.players[playerIndex] = updatedPlayer;
            console.log('‚úÖ GameState: –î–æ–ª–≥ –ø–æ–≥–∞—à–µ–Ω:', player.username, debtId, amount);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞
            if (this.eventBus) {
                this.eventBus.emit('player:debtPaid', {
                    player: updatedPlayer,
                    debtId: debtId,
                    amount: amount
                });
            }
            
            return true;
        }
        
        return false;
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –∏–≥—Ä–æ–∫—É
     * @param {string} playerId 
     * @returns {boolean}
     */
    addChildToPlayer(playerId) {
        const player = this.getPlayerById(playerId);
        if (!player) {
            console.error('‚ùå GameState: –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω:', playerId);
            return false;
        }

        const updatedPlayer = this.professionModule.addChild(player);
        const playerIndex = this.players.findIndex(p => p.id === playerId);
        
        if (playerIndex !== -1) {
            this.players[playerIndex] = updatedPlayer;
            console.log('‚úÖ GameState: –î–æ–±–∞–≤–ª–µ–Ω —Ä–µ–±–µ–Ω–æ–∫ –∏–≥—Ä–æ–∫—É:', player.username);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞
            if (this.eventBus) {
                this.eventBus.emit('player:childAdded', {
                    player: updatedPlayer
                });
            }
            
            return true;
        }
        
        return false;
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @param {number} position - –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     */
    updatePlayerPosition(playerId, position) {
        const player = this.players.find(p => p.id === playerId);
        if (player) {
            player.position = position;
            console.log(`üìç GameState: –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ ${playerId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${position}`);
            
            if (this.eventBus) {
                this.eventBus.emit('player:positionUpdated', {
                    playerId,
                    position,
                    player
                });
            }
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     */
    setActivePlayer(playerId) {
        const player = this.players.find(p => p.id === playerId);
        if (player) {
            this.gameState.activePlayer = player;
            this.currentPlayerIndex = this.players.findIndex(p => p.id === playerId);
            
            console.log(`üéØ GameState: –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${playerId}`);
            
            if (this.eventBus) {
                this.eventBus.emit('game:activePlayerChanged', {
                    activePlayer: player,
                    playerIndex: this.currentPlayerIndex
                });
            }
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤
     */
    getPlayers() {
        return this.players;
    }
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
     */
    addTestPlayers() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫–∏
        if (this.players.length > 0) {
            console.log('üë• GameState: –ò–≥—Ä–æ–∫–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }
        
        this.players = [
            {
                id: 'player1',
                username: 'TestUser',
                token: 'eagle',
                position: 0,
                isInner: true, // –ù–∞—á–∏–Ω–∞–µ–º —Å –º–∞–ª–æ–≥–æ –∫—Ä—É–≥–∞
                money: 5000,
                salary: 5000,
                totalIncome: 0,
                monthlyExpenses: 2000,
                assets: [],
                dreams: []
            },
            {
                id: 'player2',
                username: 'Roman',
                token: 'fox',
                position: 0,
                isInner: true, // –ù–∞—á–∏–Ω–∞–µ–º —Å –º–∞–ª–æ–≥–æ –∫—Ä—É–≥–∞
                money: 3000,
                salary: 4000,
                totalIncome: 0,
                monthlyExpenses: 1500,
                assets: [],
                dreams: []
            }
        ];
        
        console.log('üéÆ GameState: –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–≥—Ä–æ–∫–∏', this.players);
        
        if (this.eventBus) {
            this.eventBus.emit('game:playersUpdated', {
                players: this.players
            });
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
     */
    async loadPlayersFromRoom(roomData) {
        try {
            console.log('üè† GameState: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã:', roomData);
            
            if (roomData && roomData.players && roomData.players.length > 0) {
                this.players = roomData.players.map((player, index) => ({
                    id: player.userId || `player${index + 1}`,
                    username: player.username || `–ò–≥—Ä–æ–∫ ${index + 1}`,
                    position: 0, // –í—Å–µ –∏–≥—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç —Å –∫–ª–µ—Ç–∫–∏ 1 –º–∞–ª–æ–≥–æ –∫—Ä—É–≥–∞ (–ø–æ–∑–∏—Ü–∏—è 0)
                    isInner: true, // –ù–∞—á–∏–Ω–∞–µ–º —Å –º–∞–ª–æ–≥–æ –∫—Ä—É–≥–∞
                    money: 5000,
                    salary: 5000,
                    totalIncome: 0,
                    token: player.token || 'üéØ',
                    isReady: player.isReady || false,
                    dream: player.dream || null,
                    monthlyExpenses: 2000,
                    assets: [],
                    dreams: player.dream ? [player.dream] : []
                }));
                
                console.log('‚úÖ GameState: –ò–≥—Ä–æ–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–æ–º–Ω–∞—Ç—ã:', this.players.length);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä–æ–∫–æ–≤
                if (this.eventBus) {
                    this.eventBus.emit('game:playersUpdated', {
                        players: this.players
                    });
                }
            } else {
                console.log('‚ö†Ô∏è GameState: –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤');
                this.addTestPlayers();
            }
        } catch (error) {
            console.error('‚ùå GameState: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã:', error);
            this.addTestPlayers();
        }
    }

    /**
     * –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @param {number} newPosition - –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     * @param {boolean} isInner - –ù–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –∫—Ä—É–≥–µ
     */
    movePlayer(playerId, newPosition, isInner = false) {
        const player = this.getPlayerById(playerId);
        if (!player) {
            console.warn('‚ö†Ô∏è GameState: –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:', playerId);
            return;
        }

        const oldPosition = player.position;
        const oldIsInner = player.isInner;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
        player.position = newPosition;
        player.isInner = isInner;

        console.log(`üéØ GameState: –ò–≥—Ä–æ–∫ ${player.username} –ø–µ—Ä–µ–º–µ—â–µ–Ω —Å –ø–æ–∑–∏—Ü–∏–∏ ${oldPosition} –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${newPosition} (${isInner ? '–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π' : '–≤–Ω–µ—à–Ω–∏–π'} –∫—Ä—É–≥)`);

        // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
        if (this.eventBus) {
            this.eventBus.emit('player:moved', {
                playerId,
                player,
                oldPosition,
                newPosition,
                oldIsInner,
                isInner
            });

            // –¢–∞–∫–∂–µ —ç–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è PlayerTokens
            this.eventBus.emit('player:positionUpdated', {
                playerId,
                position: newPosition,
                player
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
     * @param {number} position - –ü–æ–∑–∏—Ü–∏—è
     * @param {boolean} isInner - –ù–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –∫—Ä—É–≥–µ
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏
     */
    getPlayersAtPosition(position, isInner = false) {
        return this.players.filter(player => 
            player.position === position && player.isInner === isInner
        );
    }

    /**
     * –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π –≤–ø–µ—Ä–µ–¥
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @param {number} steps - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
     */
    movePlayerForward(playerId, steps) {
        const player = this.getPlayerById(playerId);
        if (!player) {
            console.warn('‚ö†Ô∏è GameState: –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:', playerId);
            return;
        }

        let newPosition = player.position + steps;
        let newIsInner = player.isInner;

        // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å –º–∞–ª–æ–≥–æ –∫—Ä—É–≥–∞ –Ω–∞ –±–æ–ª—å—à–æ–π
        if (player.isInner && newPosition >= 12) {
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –±–æ–ª—å—à–æ–π –∫—Ä—É–≥
            newIsInner = false;
            newPosition = newPosition - 12; // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫—Ä—É–≥–∞
        } else if (!player.isInner && newPosition >= 44) {
            // –û–±—Ö–æ–¥–∏–º –±–æ–ª—å—à–æ–π –∫—Ä—É–≥
            newPosition = newPosition % 44;
        } else if (player.isInner && newPosition >= 12) {
            // –û–±—Ö–æ–¥–∏–º –º–∞–ª—ã–π –∫—Ä—É–≥
            newPosition = newPosition % 12;
        }

        this.movePlayer(playerId, newPosition, newIsInner);
    }
}

window.GameState = GameState;

