/**
 * –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –î–∞—Ç–∞: 12 –æ–∫—Ç—è–±—Ä—è 2024
 */

class PushClient {
    constructor({ gameState, eventBus }) {
        this.gameState = gameState;
        this.eventBus = eventBus;
        this.clientId = null;
        this.isRegistered = false;
        this.pollingInterval = null;
        // –°–Ω–∏–∂–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –æ–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –∏ —Å–ø–∞–º-–∑–∞–ø—Ä–æ—Å—ã
        this.pollingIntervalMs = 5000; // 5 —Å–µ–∫—É–Ω–¥
        this.retryCount = 0;
        this.maxRetries = 5;
        
        console.log('üì± PushClient: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
     */
    async init() {
        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–ª–∏–µ–Ω—Ç–∞
            this.clientId = this.generateClientId();
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await this.register();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º polling
            this.startPolling();
            
            console.log('‚úÖ PushClient: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∫–ª–∏–µ–Ω—Ç–∞
     */
    generateClientId() {
        const timestamp = Date.now();
        const random = Math.random().toString(36).substr(2, 9);
        const userAgent = navigator.userAgent.substring(0, 10);
        
        return `client_${timestamp}_${random}_${userAgent}`;
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    async register() {
        try {
            const userInfo = this.getUserInfo();
            
            const response = await fetch('/api/push/register', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    clientId: this.clientId,
                    userInfo: userInfo
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            
            if (result.success) {
                this.isRegistered = true;
                this.retryCount = 0;
                console.log(`üì± PushClient: –ö–ª–∏–µ–Ω—Ç ${this.clientId} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                this.eventBus.emit('push:registered', {
                    clientId: this.clientId,
                    stats: result.stats
                });
            } else {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
            }
        } catch (error) {
            console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            this.isRegistered = false;
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    getUserInfo() {
        const user = this.gameState.getCurrentUser();
        return {
            userId: user?.id || null,
            username: user?.username || 'Anonymous',
            userAgent: navigator.userAgent,
            timestamp: new Date().toISOString()
        };
    }

    /**
     * –ó–∞–ø—É—Å–∫ polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    startPolling() {
        if (this.pollingInterval) {
            clearInterval(this.pollingInterval);
        }

        this.pollingInterval = setInterval(async () => {
            try {
                await this.pollForUpdates();
            } catch (error) {
                console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ polling:', error);
                this.handlePollingError(error);
            }
        }, this.pollingIntervalMs);

        console.log(`üì± PushClient: Polling –∑–∞–ø—É—â–µ–Ω (${this.pollingIntervalMs}ms)`);
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling
     */
    stopPolling() {
        if (this.pollingInterval) {
            clearInterval(this.pollingInterval);
            this.pollingInterval = null;
            console.log('üì± PushClient: Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    }

    /**
     * Polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
     */
    async pollForUpdates() {
        if (!this.isRegistered || !this.clientId) {
            return;
        }

        try {
            const response = await fetch(`/api/push/poll?clientId=${this.clientId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            
            if (result.success) {
                this.retryCount = 0;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                if (result.stats) {
                    this.eventBus.emit('push:stats_updated', result.stats);
                }
                // –°–æ–æ–±—â–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ (–µ—Å–ª–∏ backend –≤–µ—Ä–Ω—É–ª messages)
                if (Array.isArray(result.messages)) {
                    result.messages.forEach(m => this.handlePushNotification(m));
                }
            }
        } catch (error) {
            throw error;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
     */
    handlePollingError(error) {
        this.retryCount++;
        
        if (this.retryCount >= this.maxRetries) {
            console.error(`‚ùå PushClient: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (${this.maxRetries})`);
            this.stopPolling();
            
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            setTimeout(() => {
                this.reconnect();
            }, 5000);
        }
    }

    /**
     * –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ push-—Å–µ—Ä–≤–∏—Å—É
     */
    async reconnect() {
        try {
            console.log('üîÑ PushClient: –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π polling
            this.stopPolling();
            
            // –ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è
            await this.register();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º polling –∑–∞–Ω–æ–≤–æ
            this.startPolling();
            
            console.log('‚úÖ PushClient: –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            
            // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                this.reconnect();
            }, 10000);
        }
    }

    /**
     * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç push-—Å–µ—Ä–≤–∏—Å–∞
     */
    async unregister() {
        try {
            if (!this.clientId || !this.isRegistered) {
                return;
            }

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
            this.stopPolling();

            const response = await fetch('/api/push/unregister', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    clientId: this.clientId
                })
            });

            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    console.log(`üì± PushClient: –ö–ª–∏–µ–Ω—Ç ${this.clientId} –æ—Ç–∫–ª—é—á–µ–Ω`);
                }
            }
        } catch (error) {
            console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', error);
        } finally {
            this.isRegistered = false;
            this.clientId = null;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ broadcast push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    async sendBroadcastPush(type, data, excludeSelf = false) {
        try {
            const response = await fetch('/api/push/broadcast', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    type,
                    data,
                    excludeClientId: excludeSelf ? this.clientId : null
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            
            if (result.success) {
                console.log(`üì° PushClient: Broadcast push –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (${type})`);
                return result;
            } else {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push');
            }
        } catch (error) {
            console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ broadcast push:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ push-—Å–µ—Ä–≤–∏—Å–∞
     */
    async getStats() {
        try {
            const response = await fetch('/api/push/stats', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            
            if (result.success) {
                return result.stats;
            } else {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            }
        } catch (error) {
            console.error('‚ùå PushClient: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            throw error;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
     */
    handlePushNotification(pushData) {
        console.log(`üì± PushClient: –ü–æ–ª—É—á–µ–Ω–æ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:`, pushData);

        // –ü–µ—Ä–µ–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ EventBus
        this.eventBus.emit('push:notification', pushData);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        switch (pushData.type) {
            case 'deal_card_revealed': {
                const dm = window.app?.getModule?.('dealModule');
                if (dm && pushData.data?.deckId && pushData.data?.card) {
                    dm.showCardAndDecide(pushData.data.deckId, pushData.data.card, pushData.data?.buyerId || null);
                }
                break;
            }
            case 'deal_rights_transferred': {
                // –ú–æ–∂–µ–º –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å –∫–æ–º—É –ø–µ—Ä–µ–¥–∞–ª–∏ –ø—Ä–∞–≤–æ
                const dm = window.app?.getModule?.('dealModule');
                dm?.onRightsTransferred(pushData.data);
                this.eventBus.emit('deal:rights_transferred', pushData.data);
                break;
            }
            case 'room_created':
                this.handleRoomCreated(pushData.data);
                break;
            case 'room_updated':
                this.handleRoomUpdated(pushData.data);
                break;
            case 'player_joined':
                this.handlePlayerJoined(pushData.data);
                break;
            case 'player_left':
                this.handlePlayerLeft(pushData.data);
                break;
            case 'game_started':
                this.handleGameStarted(pushData.data);
                break;
            default:
                console.log(`üì± PushClient: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${pushData.type}`);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã
     */
    handleRoomCreated(data) {
        console.log(`üè† PushClient: –ù–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${data.roomName}`);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ
        this.eventBus.emit('rooms:new_room', data);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ–º–Ω–∞—Ç
        if (typeof window.roomService !== 'undefined') {
            window.roomService.refreshRooms();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã
     */
    handleRoomUpdated(data) {
        console.log(`üè† PushClient: –ö–æ–º–Ω–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${data.roomId}`);
        this.eventBus.emit('rooms:room_updated', data);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞
     */
    handlePlayerJoined(data) {
        console.log(`üë§ PushClient: –ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: ${data.username}`);
        this.eventBus.emit('rooms:player_joined', data);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Ö–æ–¥–µ –∏–≥—Ä–æ–∫–∞
     */
    handlePlayerLeft(data) {
        console.log(`üë§ PushClient: –ò–≥—Ä–æ–∫ –ø–æ–∫–∏–Ω—É–ª: ${data.username}`);
        this.eventBus.emit('rooms:player_left', data);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
     */
    handleGameStarted(data) {
        console.log(`üéÆ PushClient: –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ: ${data.roomId}`);
        this.eventBus.emit('rooms:game_started', data);
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
     */
    destroy() {
        console.log('üóëÔ∏è PushClient: –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞...');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
        this.stopPolling();
        
        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
        this.unregister();
        
        console.log('‚úÖ PushClient: –ö–ª–∏–µ–Ω—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
window.PushClient = PushClient;
