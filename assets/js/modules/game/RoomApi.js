/**
 * RoomApi v1.0.0
 * API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∏–≥—Ä–æ–≤—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏
 */

class RoomApi {
    constructor() {
        this.baseUrl = '/api/rooms';
        this.headers = {
            'Content-Type': 'application/json'
        };
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        this.pendingRequests = new Map();

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –∫–æ–º–Ω–∞—Ç—ã
        this.minInterval = 150; // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        this.lastRequestAt = 0;
        this.rateLimitUntil = 0;
        this.rateLimitBackoff = 0;

        console.log('üåê RoomApi: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
     */
    getHeaders() {
        const token =
            localStorage.getItem('aura_money_token') ||
            sessionStorage.getItem('aura_money_token');

        let userId = null;
        try {
            const storedUser =
                localStorage.getItem('aura_money_user') ||
                sessionStorage.getItem('aura_money_user');
            if (storedUser) {
                const parsed = JSON.parse(storedUser);
                userId = parsed?.id || parsed?.userId || null;
            }
        } catch (error) {
            console.warn('RoomApi: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ storage', error);
        }

        const headers = {
            ...this.headers
        };

        if (token) {
            headers.Authorization = `Bearer ${token}`;
        }

        if (userId) {
            headers['x-user-id'] = userId;
        }

        return headers;
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞
     */
    async request(endpoint, options = {}) {
        const url = `${this.baseUrl}${endpoint}`;
        const config = {
            headers: this.getHeaders(),
            ...options
        };

        try {
            await this._respectRateLimitWindow();

            const response = await fetch(url, config);

            if (response.status === 429) {
                const retryAfter = this._applyRateLimitFromResponse(response);
                const error = new Error(`HTTP 429: ${response.statusText || 'Rate limited'}`);
                error.isRateLimit = true;
                error.retryAfter = retryAfter;
                throw error;
            }

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            this._resetRateLimit();

            const data = await response.json();
            return data;
        } catch (error) {
            if (error.isRateLimit) {
                console.warn(`‚è≥ RoomApi: –ü–æ–ª—É—á–µ–Ω HTTP 429, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${error.retryAfter}–º—Å`);
            } else {
                console.error(`‚ùå RoomApi: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ${endpoint}:`, error);
            }
            throw error;
        }
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
     */
    async endTurn(roomId) {
        const endpoint = `/${roomId}/end-turn`;
        
        console.log(`üèÅ RoomApi: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        
        return await this.request(endpoint, {
            method: 'POST'
        });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Promise<Object>} –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     */
    async getGameState(roomId) {
        const endpoint = `/${roomId}/game-state`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        const cacheKey = `gameState_${roomId}`;
        const now = Date.now();
        const cached = this.cache?.get(cacheKey);
        
        if (cached && (now - cached.timestamp) < 10000) { // –ö—ç—à –Ω–∞ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
            console.log(`üìä RoomApi: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è ${roomId}`);
            return cached.data;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π rate limiter –¥–ª—è game-state
        if (window.CommonUtils && !window.CommonUtils.canMakeGameStateRequest(roomId)) {
            console.log(`üìä RoomApi: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ game-state –∏–∑-–∑–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ rate limiting –¥–ª—è ${roomId}`);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if (cached) {
                return cached.data;
            }
            throw new Error('Rate limited');
        }
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        const pendingKey = `getGameState_${roomId}`;
        if (this.pendingRequests.has(pendingKey)) {
            console.log(`üìä RoomApi: –ó–∞–ø—Ä–æ—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è ${roomId}, –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç`);
            return await this.pendingRequests.get(pendingKey);
        }
        
        console.log(`üìä RoomApi: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ pending –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º limiter
        if (window.CommonUtils && !window.CommonUtils.gameStateLimiter.setRequestPending(roomId)) {
            console.log(`üìä RoomApi: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pending –¥–ª—è ${roomId} (race condition)`);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if (cached) {
                return cached.data;
            }
            throw new Error('Rate limited by race condition');
        }
        
        const requestPromise = this._executeGameStateRequest(endpoint, cacheKey, cached, now);
        this.pendingRequests.set(pendingKey, requestPromise);
        
        try {
            const result = await requestPromise;
            return result;
        } finally {
            this.pendingRequests.delete(pendingKey);
            // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ pending –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º limiter
            if (window.CommonUtils) {
                window.CommonUtils.gameStateLimiter.clearRequestPending(roomId);
            }
        }
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã (–≤—ã–¥–µ–ª–µ–Ω –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
     */
    async _executeGameStateRequest(endpoint, cacheKey, cached, now) {
        try {
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è game-state –±–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ rate limiting
            // —Ç–∞–∫ –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–π limiter —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª –∏ –¥–∞–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            const url = `${this.baseUrl}${endpoint}`;
            const config = {
                headers: this.getHeaders(),
                method: 'GET'
            };

            const response = await fetch(url, config);

            if (response.status === 429) {
                const retryAfter = this._applyRateLimitFromResponse(response);
                const error = new Error(`HTTP 429: ${response.statusText || 'Rate limited'}`);
                error.isRateLimit = true;
                error.retryAfter = retryAfter;
                throw error;
            }

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            this._resetRateLimit();
            const result = await response.json();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            if (!this.cache) {
                this.cache = new Map();
            }
            this.cache.set(cacheKey, {
                data: result,
                timestamp: now
            });
            
            return result;
        } catch (error) {
            // –ü—Ä–∏ rate-limit –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            if (error.isRateLimit && cached) {
                console.log(`üìä RoomApi: HTTP 429, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`);
                return cached.data;
            }
            throw error;
        }
    }

    /**
     * –£—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ rate limit
     * @private
     */
    async _respectRateLimitWindow() {
        const now = Date.now();

        const nextAllowedByInterval = this.lastRequestAt + this.minInterval;
        const nextAllowed = Math.max(nextAllowedByInterval, this.rateLimitUntil || 0);

        if (now < nextAllowed) {
            const waitTime = nextAllowed - now;
            await new Promise(resolve => setTimeout(resolve, waitTime));
        }

        this.lastRequestAt = Date.now();
    }

    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ rate limit –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
     * @private
     */
    _applyRateLimitFromResponse(response) {
        const retryAfterHeader = response.headers?.get?.('Retry-After') || response.headers?.get?.('retry-after');
        let retryAfterMs = 0;

        if (retryAfterHeader) {
            const retrySeconds = Number(retryAfterHeader);
            if (!Number.isNaN(retrySeconds)) {
                retryAfterMs = retrySeconds * 1000;
            }
        }

        if (!retryAfterMs) {
            this.rateLimitBackoff = this.rateLimitBackoff ? Math.min(this.rateLimitBackoff * 2, 60000) : 5000;
            retryAfterMs = this.rateLimitBackoff;
        } else {
            this.rateLimitBackoff = retryAfterMs;
        }

        this.rateLimitUntil = Date.now() + retryAfterMs;
        return retryAfterMs;
    }

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ rate limit –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
     * @private
     */
    _resetRateLimit() {
        this.rateLimitBackoff = 0;
        this.rateLimitUntil = 0;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
     */
    async getPlayers(roomId) {
        const endpoint = `/${roomId}/players`;
        
        console.log(`üë• RoomApi: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        
        return await this.request(endpoint, {
            method: 'GET'
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @param {number} position - –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async updatePlayerPosition(roomId, playerId, position) {
        const endpoint = `/${roomId}/players/${playerId}/position`;
        const body = {
            position
        };
        
        console.log(`üìç RoomApi: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ ${playerId} –Ω–∞ ${position}`);
        
        return await this.request(endpoint, {
            method: 'PUT',
            body: JSON.stringify(body)
        });
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
     */
    async setActivePlayer(roomId, playerId) {
        const endpoint = `/${roomId}/active-player`;
        const body = {
            playerId
        };
        
        console.log(`üéØ RoomApi: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ ${playerId}`);
        
        return await this.request(endpoint, {
            method: 'PUT',
            body: JSON.stringify(body)
        });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ö–æ–¥–æ–≤
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Promise<Array>} –ò—Å—Ç–æ—Ä–∏—è —Ö–æ–¥–æ–≤
     */
    async getTurnHistory(roomId) {
        const endpoint = `/${roomId}/turn-history`;
        
        console.log(`üìú RoomApi: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ö–æ–¥–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        
        return await this.request(endpoint, {
            method: 'GET'
        });
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    async sendMessage(roomId, message) {
        const endpoint = `/${roomId}/chat`;
        const body = {
            message
        };
        
        console.log(`üí¨ RoomApi: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç—É ${roomId}`);
        
        return await this.request(endpoint, {
            method: 'POST',
            body: JSON.stringify(body)
        });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Promise<Array>} –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
     */
    async getMessages(roomId) {
        const endpoint = `/${roomId}/chat`;
        
        console.log(`üí¨ RoomApi: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        
        return await this.request(endpoint, {
            method: 'GET'
        });
    }
    
    /**
     * –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} [diceChoice] - 'single' | 'double'
     * @param {boolean} [isReroll] - –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –±—Ä–æ—Å–æ–∫
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
     */
    async rollDice(roomId, diceChoice, isReroll) {
        const endpoint = `/${roomId}/roll`;
        
        console.log(`üé≤ RoomApi: –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`, { diceChoice, isReroll });
        
        return await this.request(endpoint, {
            method: 'POST',
            body: JSON.stringify({ diceChoice, isReroll })
        });
    }
    
    /**
     * –î–≤–∏–∂–µ–Ω–∏–µ —Ñ–∏—à–∫–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å TurnService.move)
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {number} steps - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
     * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
     * @param {boolean} [options.isInner] - –ü—Ä–∏–∑–Ω–∞–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫—Ä—É–≥–∞
     * @param {string} [options.track] - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–∫–∞
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–≤–∏–∂–µ–Ω–∏—è
     */
    async move(roomId, steps, options = {}) {
        const endpoint = `/${roomId}/move`;
        
        const payload = { steps };
        if (typeof options.isInner === 'boolean') {
            payload.isInner = options.isInner;
        }
        if (options.track) {
            payload.track = options.track;
        }
        
        console.log(`üö∂ RoomApi: –î–≤–∏–∂–µ–Ω–∏–µ —Ñ–∏—à–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId} –Ω–∞ ${steps} —à–∞–≥–æ–≤`, payload);
        
        return await this.request(endpoint, {
            method: 'POST',
            body: JSON.stringify(payload)
        });
    }

    // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è movePlayer)
    async movePlayer(roomId, steps) {
        return this.move(roomId, steps);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} roomId
     * @param {Object} notification
     * @returns {Promise<Object>}
     */
    async sendNotification(roomId, notification) {
        if (!roomId || !notification) {
            throw new Error('RoomApi.sendNotification: invalid parameters');
        }

        const endpoint = `/${roomId}/notifications`;
        
        return await this.request(endpoint, {
            method: 'POST',
            body: JSON.stringify(notification)
        });
    }

    /**
     * –ê–ª–∏–∞—Å –¥–ª—è getGameState –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
     * @param {string} roomId
     * @returns {Promise<Object>}
     */
    async getRoomState(roomId) {
        return this.getGameState(roomId);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.RoomApi = RoomApi;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = RoomApi;
}
