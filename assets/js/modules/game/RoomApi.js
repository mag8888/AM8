/**
 * RoomApi v1.0.0
 * API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∏–≥—Ä–æ–≤—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏
 */

class RoomApi {
    constructor() {
        this.baseUrl = '/api/rooms';
        this.headers = {
            'Content-Type': 'application/json'
        };
        
        console.log('üåê RoomApi: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
     */
    getHeaders() {
        const token = localStorage.getItem('aura_money_token');
        const userId = localStorage.getItem('aura_money_user_id');
        
        return {
            ...this.headers,
            'Authorization': `Bearer ${token}`,
            'x-user-id': userId
        };
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞
     */
    async request(endpoint, options = {}) {
        const url = `${this.baseUrl}${endpoint}`;
        const config = {
            headers: this.getHeaders(),
            ...options
        };
        
        try {
            const response = await fetch(url, config);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            return data;
        } catch (error) {
            console.error(`‚ùå RoomApi: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ${endpoint}:`, error);
            throw error;
        }
    }
    
    /**
     * –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} diceChoice - 'single' –∏–ª–∏ 'double'
     * @param {boolean} isReroll - –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –±—Ä–æ—Å–æ–∫
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
     */
    async rollDice(roomId, diceChoice = 'single', isReroll = false) {
        const endpoint = `/${roomId}/roll`;
        const body = {
            diceChoice,
            isReroll
        };
        
        console.log(`üé≤ RoomApi: –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        
        return await this.request(endpoint, {
            method: 'POST',
            body: JSON.stringify(body)
        });
    }
    
    /**
     * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {number} steps - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
     */
    async move(roomId, steps) {
        const endpoint = `/${roomId}/move`;
        const body = {
            steps
        };
        
        console.log(`üö∂ RoomApi: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ ${steps} —à–∞–≥–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        
        return await this.request(endpoint, {
            method: 'POST',
            body: JSON.stringify(body)
        });
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
     */
    async endTurn(roomId) {
        const endpoint = `/${roomId}/end-turn`;
        
        console.log(`üèÅ RoomApi: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        
        return await this.request(endpoint, {
            method: 'POST'
        });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Promise<Object>} –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     */
    async getGameState(roomId) {
        const endpoint = `/${roomId}/game-state`;
        
        console.log(`üìä RoomApi: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        
        return await this.request(endpoint, {
            method: 'GET'
        });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
     */
    async getPlayers(roomId) {
        const endpoint = `/${roomId}/players`;
        
        console.log(`üë• RoomApi: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        
        return await this.request(endpoint, {
            method: 'GET'
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @param {number} position - –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async updatePlayerPosition(roomId, playerId, position) {
        const endpoint = `/${roomId}/players/${playerId}/position`;
        const body = {
            position
        };
        
        console.log(`üìç RoomApi: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ ${playerId} –Ω–∞ ${position}`);
        
        return await this.request(endpoint, {
            method: 'PUT',
            body: JSON.stringify(body)
        });
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
     */
    async setActivePlayer(roomId, playerId) {
        const endpoint = `/${roomId}/active-player`;
        const body = {
            playerId
        };
        
        console.log(`üéØ RoomApi: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ ${playerId}`);
        
        return await this.request(endpoint, {
            method: 'PUT',
            body: JSON.stringify(body)
        });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ö–æ–¥–æ–≤
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Promise<Array>} –ò—Å—Ç–æ—Ä–∏—è —Ö–æ–¥–æ–≤
     */
    async getTurnHistory(roomId) {
        const endpoint = `/${roomId}/turn-history`;
        
        console.log(`üìú RoomApi: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ö–æ–¥–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        
        return await this.request(endpoint, {
            method: 'GET'
        });
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    async sendMessage(roomId, message) {
        const endpoint = `/${roomId}/chat`;
        const body = {
            message
        };
        
        console.log(`üí¨ RoomApi: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç—É ${roomId}`);
        
        return await this.request(endpoint, {
            method: 'POST',
            body: JSON.stringify(body)
        });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Promise<Array>} –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
     */
    async getMessages(roomId) {
        const endpoint = `/${roomId}/chat`;
        
        console.log(`üí¨ RoomApi: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        
        return await this.request(endpoint, {
            method: 'GET'
        });
    }
    
    /**
     * –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
     */
    async rollDice(roomId) {
        const endpoint = `/${roomId}/roll`;
        
        console.log(`üé≤ RoomApi: –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        
        return await this.request(endpoint, {
            method: 'POST',
            body: JSON.stringify({})
        });
    }
    
    /**
     * –î–≤–∏–∂–µ–Ω–∏–µ —Ñ–∏—à–∫–∏
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {number} steps - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–≤–∏–∂–µ–Ω–∏—è
     */
    async movePlayer(roomId, steps) {
        const endpoint = `/${roomId}/move`;
        
        console.log(`üö∂ RoomApi: –î–≤–∏–∂–µ–Ω–∏–µ —Ñ–∏—à–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId} –Ω–∞ ${steps} —à–∞–≥–æ–≤`);
        
        return await this.request(endpoint, {
            method: 'POST',
            body: JSON.stringify({ steps })
        });
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.RoomApi = RoomApi;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = RoomApi;
}
