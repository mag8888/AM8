/**
 * BalanceManager - –ï–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –±–∞–ª–∞–Ω—Å–æ–≤ –∏–≥—Ä–æ–∫–æ–≤
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –±–∞–ª–∞–Ω—Å–æ–≤ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
 * 
 * @version 1.0.0
 * @author Client-side Team
 */

class BalanceManager {
    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä BalanceManager
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
     * @param {GameState} config.gameState - Instance GameState (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    constructor(config = {}) {
        this.gameState = config.gameState || null;
        this.balances = {}; // –§–æ—Ä–º–∞—Ç: { [userId]: { amount, source, timestamp } }
        this.lastRefreshTime = 0;
        this.currentUserId = null; // ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª—É—à–∞—Ç–µ–ª—è –Ω–∞ gameState.on('change') –µ—Å–ª–∏ –µ—Å—Ç—å gameState
        if (this.gameState) {
            this.setupGameStateListener();
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.initCurrentUser();
        
        console.log('‚úÖ BalanceManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π GameState
     */
    setupGameStateListener() {
        if (this.gameState && typeof this.gameState.on === 'function') {
            this.gameState.on('change', (data) => {
                if (data.players) {
                    this.refreshFromGameState(data.players);
                }
            });
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    initCurrentUser() {
        try {
            const userData = localStorage.getItem('aura_money_user');
            if (userData) {
                const user = JSON.parse(userData);
                this.currentUserId = user.id;
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è BalanceManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     * @param {string} userId - ID –∏–≥—Ä–æ–∫–∞
     * @param {number} newBalance - –ù–æ–≤–∞—è —Å—É–º–º–∞ –±–∞–ª–∞–Ω—Å–∞
     * @param {string} source - –ò—Å—Ç–æ—á–Ω–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ('game-state', 'bank-api', 'manual')
     */
    updateBalance(userId, newBalance, source = 'manual') {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!userId || userId === '' || userId === null) {
            console.warn('‚ö†Ô∏è BalanceManager: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π userId:', userId);
            return;
        }
        
        if (newBalance == null || isNaN(newBalance)) {
            console.warn('‚ö†Ô∏è BalanceManager: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å:', newBalance);
            newBalance = 0;
        }
        
        // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —á–∏—Å–ª—É
        newBalance = Number(newBalance);
        
        const now = Date.now();
        const currentBalance = this.balances[userId];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        if (currentBalance) {
            const isFresh = (now - currentBalance.timestamp) < 3000; // –î–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–µ–µ 3 —Å–µ–∫—É–Ω–¥
            const unchanged = currentBalance.amount === newBalance; // –ë–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
            
            if (isFresh && unchanged) {
                console.log(`‚ö†Ô∏è BalanceManager: –ü—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è ${userId} (unchanged, fresh)`);
                return;
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        this.balances[userId] = {
            amount: newBalance,
            source: source,
            timestamp: now
        };
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.updateUI(userId, newBalance);
        
        console.log(`üí∞ BalanceManager: ${userId} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ ${newBalance} (${source})`);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
     * @param {string} userId - ID –∏–≥—Ä–æ–∫–∞
     * @returns {number} - –ë–∞–ª–∞–Ω—Å –∏–ª–∏ 0 –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
     */
    getBalance(userId) {
        if (!userId) return 0;
        return this.balances[userId]?.amount || 0;
    }
    
    /**
     * –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –∏–∑ game state
     * @param {Array} players - –ú–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤ —Å –ø–æ–ª–µ–º cash
     */
    refreshFromGameState(players) {
        const now = Date.now();
        
        // Debounce - –Ω–µ —á–∞—â–µ 5 —Å–µ–∫—É–Ω–¥
        const timeSinceLastRefresh = now - this.lastRefreshTime;
        if (timeSinceLastRefresh < 5000) {
            return;
        }
        
        if (!Array.isArray(players)) {
            console.warn('‚ö†Ô∏è BalanceManager: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤:', players);
            return;
        }
        
        let updatedCount = 0;
        
        // –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        players.forEach(player => {
            if (player && player.id && typeof player.cash === 'number') {
                this.updateBalance(player.id, player.cash, 'game-state');
                updatedCount++;
            }
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this.lastRefreshTime = now;
        
        if (updatedCount > 0) {
            console.log(`üîÑ BalanceManager: –û–±–Ω–æ–≤–ª–µ–Ω—ã –±–∞–ª–∞–Ω—Å—ã –¥–ª—è ${updatedCount} –∏–≥—Ä–æ–∫–æ–≤`);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤
     * @returns {Object} - –í—Å–µ –±–∞–ª–∞–Ω—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ { [userId]: { amount, source, timestamp } }
     */
    getAllBalances() {
        return { ...this.balances };
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤
     */
    clearBalances() {
        this.balances = {};
        this.lastRefreshTime = 0;
        console.log('üßπ BalanceManager: –í—Å–µ –±–∞–ª–∞–Ω—Å—ã –æ—á–∏—â–µ–Ω—ã');
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
     * @param {string} userId - ID –∏–≥—Ä–æ–∫–∞
     * @returns {boolean} - true –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–µ–µ 3 —Å–µ–∫—É–Ω–¥
     */
    isDataFresh(userId) {
        const balance = this.balances[userId];
        if (!balance || !balance.timestamp) return false;
        return (Date.now() - balance.timestamp) < 3000;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     * @param {string} userId - ID –∏–≥—Ä–æ–∫–∞
     * @param {number} newBalance - –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
     */
    updateUI(userId, newBalance) {
        const formattedBalance = `$${newBalance.toLocaleString()}`;
        
        // 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–≥—Ä–æ–∫–∞
        const playerCard = document.querySelector(`[data-user-id="${userId}"]`);
        const balanceElement = playerCard?.querySelector('.player-balance');
        if (balanceElement) {
            balanceElement.textContent = formattedBalance;
        }
        
        // 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (userId === this.currentUserId) {
            const rightPanelBalance = document.querySelector('.right-panel .balance');
            if (rightPanelBalance) {
                rightPanelBalance.textContent = formattedBalance;
            }
        }
        
        // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –º–µ–Ω—é —Ö–æ–¥–æ–≤
        const playerDisplay = document.querySelector(`[data-player-id="${userId}"] .player-balance`);
        if (playerDisplay) {
            playerDisplay.textContent = formattedBalance;
        }
        
        // 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∏–≥—Ä–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
        const gameOperationsBalance = document.querySelector('.game-operations-card .player-balance');
        if (gameOperationsBalance && userId === this.currentUserId) {
            gameOperationsBalance.textContent = formattedBalance;
        }
        
        // 5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        this.animateBalanceChange(userId, newBalance);
    }
    
    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
     * @param {string} userId - ID –∏–≥—Ä–æ–∫–∞
     * @param {number} newBalance - –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
     */
    animateBalanceChange(userId, newBalance) {
        const elements = document.querySelectorAll(`[data-user-id="${userId}"] .player-balance, [data-player-id="${userId}"] .player-balance`);
        
        elements.forEach(element => {
            if (element) {
                element.classList.add('balance-updated');
                setTimeout(() => {
                    element.classList.remove('balance-updated');
                }, 1000);
            }
        });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤
     * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∞–ª–∞–Ω—Å–∞–º
     */
    getStats() {
        const balances = Object.values(this.balances);
        if (balances.length === 0) {
            return {
                totalPlayers: 0,
                totalBalance: 0,
                averageBalance: 0,
                minBalance: 0,
                maxBalance: 0
            };
        }
        
        const amounts = balances.map(b => b.amount);
        const totalBalance = amounts.reduce((sum, amount) => sum + amount, 0);
        
        return {
            totalPlayers: balances.length,
            totalBalance: totalBalance,
            averageBalance: Math.round(totalBalance / balances.length),
            minBalance: Math.min(...amounts),
            maxBalance: Math.max(...amounts)
        };
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞ (–±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
     * @param {string} userId - ID –∏–≥—Ä–æ–∫–∞
     * @returns {Array} - –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    getBalanceHistory(userId) {
        // –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
        const balance = this.balances[userId];
        if (!balance) return [];
        
        return [{
            amount: balance.amount,
            source: balance.source,
            timestamp: balance.timestamp,
            date: new Date(balance.timestamp).toISOString()
        }];
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
     * @param {string} userId - ID –∏–≥—Ä–æ–∫–∞
     * @param {number} requiredAmount - –¢—Ä–µ–±—É–µ–º–∞—è —Å—É–º–º–∞
     * @returns {boolean} - true –µ—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
     */
    hasEnoughMoney(userId, requiredAmount) {
        const balance = this.getBalance(userId);
        return balance >= requiredAmount;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     * @param {string} userId - ID –∏–≥—Ä–æ–∫–∞
     * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
     */
    getFormattedBalance(userId) {
        const balance = this.getBalance(userId);
        return `$${balance.toLocaleString()}`;
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç gameState events
        if (this.gameState && typeof this.gameState.off === 'function') {
            this.gameState.off('change');
        }
        
        // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        this.clearBalances();
        
        // –°–±—Ä–æ—Å —Å—Å—ã–ª–æ–∫
        this.gameState = null;
        this.currentUserId = null;
        
        console.log('üóëÔ∏è BalanceManager: –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
if (typeof window !== 'undefined') {
    window.BalanceManager = BalanceManager;
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
if (typeof module !== 'undefined' && module.exports) {
    module.exports = BalanceManager;
}
