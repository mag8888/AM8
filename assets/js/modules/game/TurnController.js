/**
 * TurnController v2.0.0 - –†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
 * UI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ–¥–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç GameStateManager –∏ PlayerList –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */

class TurnController {
    constructor(turnService, playerTokenRenderer, gameStateManager, eventBus = null) {
        this.turnService = turnService;
        this.playerTokenRenderer = playerTokenRenderer;
        this.gameStateManager = gameStateManager;
        this.eventBus = eventBus;
        this.ui = null;
        this.isRolling = false;
        this.isMoving = false;
        this.isMobile = window.innerWidth <= 768;
        this._lastStateKey = null;
        this._eventListenersSetup = false; // –§–ª–∞–≥ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this._setupAttempts = 0; // –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        
        // –°–æ–∑–¥–∞–µ–º PlayerList –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
        this.playerList = null;
        
        if (window.logWithStack) {
            window.logWithStack('üéÆ TurnController v2.0: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, isMobile: ' + this.isMobile + ', window.innerWidth: ' + window.innerWidth, null, 'log');
        } else {
            console.log('üéÆ TurnController v2.0: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, isMobile:', this.isMobile, 'window.innerWidth:', window.innerWidth);
        }
        
        // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º this.init() —Å—Ä–∞–∑—É –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
        // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç PlayersPanel —Å–Ω–∞—á–∞–ª–∞ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è
        // init() –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –ø–æ–∑–∂–µ —è–≤–Ω–æ –∏–ª–∏ —á–µ—Ä–µ–∑ bindToExistingUI
        console.log('üéÆ TurnController v2.0: –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω, init() –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –ø–æ–∑–∂–µ');
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
     */
    init() {
        this.createUI(); // createUI() –≤—ã–∑–æ–≤–µ—Ç bindToExistingUI(), –∫–æ—Ç–æ—Ä—ã–π —Å–∞–º –Ω–∞–π–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è setupEventListeners()
        this.initializePlayerList();
        this.updateUI();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PlayerList
     */
    initializePlayerList() {
        if (!this.gameStateManager) {
            console.warn('‚ö†Ô∏è TurnController: GameStateManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º PlayerList —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –º–µ–Ω—é
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–∑ PlayersPanel
        this.playerList = new PlayerList('players-list', {
            showBalance: true,
            showStatus: true,
            showToken: true,
            showOrder: false,
            showCurrentUser: true,
            filterCurrentUser: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ
            sortBy: 'status'
        });
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GameStateManager
        this.gameStateManager.on('state:updated', (state) => {
            this.updateFromGameState(state);
        });
        
        this.gameStateManager.on('turn:changed', (data) => {
            this.handleTurnChanged(data);
        });
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (this.eventBus && typeof this.eventBus.on === 'function') {
            this.eventBus.on('push:message', (message) => {
                if (message.type === 'turn_changed' || message.type === 'game_state_updated') {
                    console.log('üéØ TurnController: –ü–æ–ª—É—á–µ–Ω–æ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Ö–æ–¥–∞');
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    if (this.gameStateManager && typeof this.gameStateManager.forceUpdate === 'function') {
                        this.gameStateManager.forceUpdate();
                    }
                }
            });
        } else {
            console.warn('‚ö†Ô∏è TurnController: eventBus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º PlayersPanel
     */
    createUI() {
        console.log('üéÆ TurnController v2.0: –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º UI');
        
        // –í–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–∑ PlayersPanel
        this.bindToExistingUI();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ UI (–±—É–¥–µ—Ç null, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
        this.ui = null;
        
        console.log('üéÆ TurnController v2.0: –ü—Ä–∏–≤—è–∑–∫–∞ –∫ UI –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º UI –∏–∑ PlayersPanel
     */
    bindToExistingUI() {
        console.log('üéÆ TurnController: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º UI');
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –∏ —Ñ–ª–∞–≥ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
        this._setupAttempts = 0;
        this._eventListenersSetup = false;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º setupEventListeners, –∫–æ—Ç–æ—Ä—ã–π —Å–∞–º –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.setupEventListeners();
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
     */
    createOldUI() {
        console.log('üéÆ TurnController v2.0: –°–æ–∑–¥–∞–Ω–∏–µ UI (–æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)');
        return; // –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å PlayersPanel
        
        // –í–µ—Å—å —Å—Ç–∞—Ä—ã–π –∫–æ–¥ UI –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å PlayersPanel
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π UI, –∞ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ UI –≤ DOM —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
     */
    addUIToDOM() {
        if (!this.ui) {
            console.warn('‚ö†Ô∏è TurnController: UI —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω');
            return;
        }
        
        // –ï—Å–ª–∏ UI —É–∂–µ –≤ DOM, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
        if (document.contains(this.ui)) {
            console.log('üéÆ TurnController: UI —É–∂–µ –≤ DOM');
            return;
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∏–∑–±–µ–≥–∞—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å PlayersPanel
        const playersPanel = document.getElementById('players-panel');
        const containers = [
            // –ò—â–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è TurnController –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            document.getElementById('turn-controller-container'),
            document.querySelector('.game-controls-container'),
            // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ PlayersPanel –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º players-panel
            ...(playersPanel && !playersPanel.querySelector('.players-section') ? [playersPanel] : []),
            document.querySelector('main'),
            document.querySelector('#game-container'),
            document.body
        ].filter(Boolean);
        
        if (containers.length > 0) {
            const container = containers[0];
            container.appendChild(this.ui);
            console.log('üéÆ TurnController: UI –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:', container.tagName, container.id || container.className);
        } else {
            // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∂–¥–µ–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            console.log('üéÆ TurnController: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 100ms');
            setTimeout(() => this.addUIToDOM(), 100);
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    setupEventListeners() {
        // –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏
        if (this._eventListenersSetup) {
            console.log('üéÆ TurnController: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        this._setupAttempts = this._setupAttempts || 0;
        this._setupAttempts++;
        
        if (this._setupAttempts > 10) {
            console.error(`‚ùå TurnController: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (${this._setupAttempts}/10), –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏`);
            return;
        }
        
        console.log(`üéÆ TurnController: –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ ${this._setupAttempts}/10)`);
        
        // –ë–æ–ª—å—à–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π UI –≤ DOM - —Ä–∞–±–æ—Ç–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        const playersPanel = document.getElementById('players-panel');
        if (!playersPanel) {
            console.warn(`‚ö†Ô∏è TurnController: players-panel –Ω–µ –Ω–∞–π–¥–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ ${this._setupAttempts}/10)`);
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            const allPanels = document.querySelectorAll('[id*="panel"], [class*="panel"]');
            console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–Ω–µ–ª–∏:', Array.from(allPanels).map(el => ({ id: el.id, className: el.className })));
            // –°–æ–∫—Ä–∞—â–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            setTimeout(() => this.setupEventListeners(), 100);
            return;
        }
        
        // –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ - –∏—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ ID (—Å–Ω–∞—á–∞–ª–∞ –≤–Ω—É—Ç—Ä–∏ playersPanel, –ø–æ—Ç–æ–º –≥–ª–æ–±–∞–ª—å–Ω–æ)
        let rollBtn = playersPanel.querySelector('#roll-dice-btn');
        if (!rollBtn) {
            rollBtn = document.querySelector('#roll-dice-btn');
        }
        
        if (rollBtn) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
            rollBtn.removeEventListener('click', this.handleRollDice);
            rollBtn.addEventListener('click', () => this.handleRollDice());
            console.log('üéÆ TurnController: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω');
        } else {
            console.warn(`‚ö†Ô∏è TurnController: –ö–Ω–æ–ø–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${this._setupAttempts}/10)`);
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤ playersPanel
            console.log('üîç TurnController: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ playersPanel:');
            console.log('  - playersPanel —ç–ª–µ–º–µ–Ω—Ç:', playersPanel);
            console.log('  - innerHTML length:', playersPanel?.innerHTML?.length || 0);
            console.log('  - –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ playersPanel:', Array.from(playersPanel?.querySelectorAll('button') || []).map(btn => ({ id: btn.id, text: btn.textContent.trim() })));
            console.log('  - –≥–ª–æ–±–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ #roll-dice-btn:', !!document.querySelector('#roll-dice-btn'));
            
            // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ —Å–¥–µ–ª–∞–Ω–∞ –≤ –Ω–∞—á–∞–ª–µ –º–µ—Ç–æ–¥–∞
            if (this._setupAttempts < 10) {
                // –°–æ–∫—Ä–∞—â–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                setTimeout(() => this.setupEventListeners(), 100);
            } else {
                console.error(`‚ùå TurnController: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ (${this._setupAttempts}/10)`);
            }
            return;
        }
        
        // –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        const moveBtns = playersPanel.querySelectorAll('.move-btn');
        moveBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const steps = parseInt(btn.dataset.steps);
                this.handleMove(steps);
            });
        });
        
        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞ - –∏—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ ID (—Å–Ω–∞—á–∞–ª–∞ –≤–Ω—É—Ç—Ä–∏ playersPanel, –ø–æ—Ç–æ–º –≥–ª–æ–±–∞–ª—å–Ω–æ)
        let endTurnBtn = playersPanel.querySelector('#pass-turn') ||
                         playersPanel.querySelector('#end-turn-btn');
        if (!endTurnBtn) {
            endTurnBtn = document.querySelector('#pass-turn') || 
                        document.querySelector('#end-turn-btn');
        }
        
        if (endTurnBtn) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
            endTurnBtn.removeEventListener('click', this.handleEndTurn);
            endTurnBtn.addEventListener('click', () => this.handleEndTurn());
            console.log('üéÆ TurnController: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥–∞—á–∏ —Ö–æ–¥–∞ –ø—Ä–∏–≤—è–∑–∞–Ω');
        } else {
            console.warn(`‚ö†Ô∏è TurnController: –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ —Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${this._setupAttempts}/10)`);
            // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ —Å–¥–µ–ª–∞–Ω–∞ –≤ –Ω–∞—á–∞–ª–µ –º–µ—Ç–æ–¥–∞
            if (this._setupAttempts < 10) {
                // –°–æ–∫—Ä–∞—â–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                setTimeout(() => this.setupEventListeners(), 100);
            } else {
                console.error(`‚ùå TurnController: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Ö–æ–¥–∞ (${this._setupAttempts}/10)`);
            }
            return;
        }
        
        // –°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π TurnService
        this.turnService.on('roll:start', () => this.onRollStart());
        this.turnService.on('roll:success', (response) => this.onRollSuccess(response));
        this.turnService.on('roll:error', (error) => this.onRollError(error));
        this.turnService.on('roll:finish', () => this.onRollFinish());
        
        this.turnService.on('move:start', () => this.onMoveStart());
        this.turnService.on('move:success', (response) => this.onMoveSuccess(response));
        this.turnService.on('move:error', (error) => this.onMoveError(error));
        this.turnService.on('move:finish', () => this.onMoveFinish());
        
        this.turnService.on('end:start', () => this.onEndStart());
        this.turnService.on('end:success', (response) => this.onEndSuccess(response));
        this.turnService.on('end:error', (error) => this.onEndError(error));
        this.turnService.on('end:finish', () => this.onEndFinish());
        
        // –°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π GameStateManager
        if (this.gameStateManager) {
            this.gameStateManager.on('state:updated', (state) => this.updateFromGameState(state));
            this.gameStateManager.on('turn:changed', (data) => this.onTurnChanged(data));
            this.gameStateManager.on('players:updated', (players) => this.onPlayersUpdated(players));
            this.gameStateManager.on('game:playersUpdated', (players) => this.onPlayersUpdated(players));
        }
        
        // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
        this._eventListenersSetup = true;
        console.log('‚úÖ TurnController: –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã');
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ö–æ–¥–∞
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –æ —Å–º–µ–Ω–µ —Ö–æ–¥–∞
     */
    onTurnChanged(data) {
        console.log('üéØ TurnController: –•–æ–¥ –∏–∑–º–µ–Ω–µ–Ω', data);
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø—Ä–∏ —Å–º–µ–Ω–µ —Ö–æ–¥–∞
        if (this.gameStateManager) {
            const state = this.gameStateManager.getState();
            this.updateFromGameState(state);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
     * @param {Array} players - –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
     */
    onPlayersUpdated(players) {
        console.log('üéØ TurnController: –ò–≥—Ä–æ–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', players);
        if (this.playerList) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ players —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
            if (Array.isArray(players)) {
                this.playerList.updatePlayers(players);
            } else {
                console.warn('TurnController: players –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', typeof players, players);
                // Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ GameStateManager
                if (this.gameStateManager) {
                    const state = this.gameStateManager.getState();
                    const playersArray = state?.players || [];
                    if (Array.isArray(playersArray)) {
                        this.playerList.updatePlayers(playersArray);
                    }
                }
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç GameStateManager
     * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     */
    updateFromGameState(state) {
        if (!this.playerList) return;
        
        // Throttling: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        const stateKey = JSON.stringify({
            players: state.players?.length || 0,
            activePlayer: state.activePlayer?.id,
            canRoll: state.canRoll,
            canMove: state.canMove,
            canEndTurn: state.canEndTurn,
            lastDiceResult: state.lastDiceResult?.total
        });
        
        if (this._lastStateKey === stateKey) {
            return; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        }
        this._lastStateKey = stateKey;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        this.playerList.updatePlayers(
            state.players || [],
            state.activePlayer,
            this.getCurrentUserId()
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤
        this.updatePlayersCount(state.players?.length || 0);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ–¥–µ
        this.updateTurnInfo(state);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∏–∫–∞
        this.updateDiceInfo(state.lastDiceResult);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        this.updateControlButtons(state);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ö–æ–¥–∞
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã —Ö–æ–¥–∞
     */
    handleTurnChanged(data) {
        console.log('üîÑ TurnController: –°–º–µ–Ω–∞ —Ö–æ–¥–∞', data);
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        if (this.playerList && data.activePlayer) {
            this.playerList.highlightActivePlayer(data.activePlayer.id);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏–≥—Ä–æ–∫–µ
        this.updateCurrentPlayer(data.activePlayer);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
     * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
     */
    updatePlayersCount(count) {
        const playersCount = this.ui.querySelector('.players-count');
        if (playersCount) {
            playersCount.textContent = `${count}/4`;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º
     * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     * @returns {boolean} true, –µ—Å–ª–∏ —ç—Ç–æ —Ö–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    isMyTurnCheck(state) {
        if (window.CommonUtils) {
            return window.CommonUtils.isMyTurn(state.activePlayer);
        }
        
        // Fallback - —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞
        const currentUserId = this.getCurrentUserId();
        const currentUsername = this.getCurrentUsername();
        return state.activePlayer && (
            state.activePlayer.id === currentUserId ||
            (state.activePlayer.username && currentUsername && state.activePlayer.username === currentUsername)
        );
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ turnInfo —Å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {HTMLElement} turnInfo - –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     */
    updateTurnInfoElement(turnInfo, state) {
        const isMyTurn = this.isMyTurnCheck(state);
        const playerToken = this.getPlayerToken(state.activePlayer);
        
        if (isMyTurn) {
            turnInfo.innerHTML = `${playerToken} üéØ –í–ê–® –•–û–î`;
            turnInfo.classList.add('my-turn');
            turnInfo.style.background = 'linear-gradient(135deg, #22c55e, #16a34a)';
            turnInfo.style.animation = 'pulse 2s infinite';
        } else if (state.activePlayer) {
            turnInfo.innerHTML = `${playerToken} –•–æ–¥ ${PlayerStatusUtils.getPlayerDisplayName(state.activePlayer)}`;
            turnInfo.classList.remove('my-turn');
            turnInfo.style.background = 'rgba(255,255,255,0.08)';
            turnInfo.style.animation = 'none';
        } else {
            turnInfo.innerHTML = '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ...';
            turnInfo.classList.remove('my-turn');
            turnInfo.style.background = 'rgba(255,255,255,0.08)';
            turnInfo.style.animation = 'none';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
        this.updateRollButton(state, isMyTurn);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
     * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     * @param {boolean} isMyTurn - –ú–æ–π –ª–∏ —ç—Ç–æ —Ö–æ–¥
     */
    updateRollButton(state, isMyTurn) {
        const rollBtn = this.safeQuerySelector('.btn-dice');
        if (!rollBtn) return;
        
        if (isMyTurn) {
            rollBtn.classList.add('my-turn');
            rollBtn.style.boxShadow = '0 0 0 2px rgba(34,197,94,0.35), 0 10px 22px rgba(34,197,94,0.45)';
            rollBtn.disabled = !state.canRoll || this.isRolling;
        } else {
            rollBtn.classList.remove('my-turn');
            rollBtn.style.boxShadow = '';
            rollBtn.disabled = true; // –ù–µ –º–æ–π —Ö–æ–¥ - –∫–Ω–æ–ø–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö–æ–¥–µ
     * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     */
    updateTurnInfo(state) {
        // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç turnInfo –≤ UI –∏–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        let turnInfo = null;
        if (this.ui) {
            turnInfo = this.ui.querySelector('.turn-info');
        } else {
            turnInfo = document.querySelector('.turn-info');
        }
        
        if (!turnInfo) {
            return; // –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã—Ö–æ–¥–∏–º
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
        this.updateTurnInfoElement(turnInfo, state);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤
        this.updatePlayersTurnIndicators(state);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ö–æ–¥–∞ –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤
     * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     */
    updatePlayersTurnIndicators(state) {
        if (!this.playerList) return;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        const currentUserId = this.getCurrentUserId();
        const currentUsername = this.getCurrentUsername();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä–æ–∫–æ–≤
        const playerItems = this.ui ? this.ui.querySelectorAll('.player-item') : document.querySelectorAll('.player-item');
        playerItems.forEach(item => {
            const playerName = item.querySelector('.player-name');
            if (!playerName) return;
            
            // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            item.classList.remove('active', 'my-turn', 'other-turn');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
            const isActivePlayer = state.activePlayer && (
                playerName.textContent.includes(state.activePlayer.username || state.activePlayer.name) ||
                playerName.textContent.includes(PlayerStatusUtils.getPlayerDisplayName(state.activePlayer))
            );
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const isCurrentUser = playerName.textContent.includes(currentUsername || 'current user');
            
            if (isActivePlayer) {
                item.classList.add('active');
                if (isCurrentUser) {
                    item.classList.add('my-turn');
                    item.style.borderLeft = '3px solid #22c55e';
                    item.style.background = 'rgba(34, 197, 94, 0.1)';
                } else {
                    item.classList.add('other-turn');
                    item.style.borderLeft = '3px solid #f59e0b';
                    item.style.background = 'rgba(245, 158, 11, 0.1)';
                }
            } else {
                item.style.borderLeft = '3px solid transparent';
                item.style.background = '';
            }
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–≥—Ä–æ–∫–∞ (—ç–º–æ–¥–∑–∏ —Ñ–∏—à–∫–∏)
     * @param {Object} player - –ò–≥—Ä–æ–∫
     * @returns {string} –≠–º–æ–¥–∑–∏ —Ç–æ–∫–µ–Ω–∞
     */
    getPlayerToken(player) {
        if (!player) return 'üéØ';
        
        // –ú–∞–ø–ø–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ username (–∫–∞–∫ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ)
        const tokenMap = {
            'test': 'ü¶ä',
            'roman': 'ü¶Ö',
            'admin': 'üëë',
            'user': 'üë§'
        };
        
        return tokenMap[player.username] || 'üéØ';
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É–±–∏–∫–µ
     * @param {Object} diceResult - –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
     */
    updateDiceInfo(diceResult) {
        if (diceResult) {
            const diceInfo = this.ui.querySelector('.dice-info');
            if (diceInfo) {
                diceInfo.textContent = this.getDiceEmoji(diceResult.value);
                diceInfo.style.color = '#10b981';
            }
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –∏–≥—Ä–æ–∫–µ
     * @param {Object} activePlayer - –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
     */
    updateCurrentPlayer(activePlayer) {
        const currentPlayer = this.ui.querySelector('.current-player');
        if (currentPlayer) {
            if (activePlayer) {
                currentPlayer.textContent = PlayerStatusUtils.getPlayerDisplayName(activePlayer);
            } else {
                currentPlayer.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
            }
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     */
    updateControlButtons(state) {
        const rollBtn = this.ui.querySelector('#roll-dice-btn');
        const endTurnBtn = this.ui.querySelector('#end-turn-btn');
        
        if (rollBtn) {
            // –ö–Ω–æ–ø–∫–∞ –±—Ä–æ—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –º–æ–π —Ö–æ–¥ –ò –º–æ–∂–Ω–æ –±—Ä–æ—Å–∞—Ç—å
            const isMyTurn = this.turnService ? this.turnService.isMyTurn() : false;
            rollBtn.disabled = !isMyTurn || !state.canRoll || this.isRolling;
        }
        
        if (endTurnBtn) {
            // –ö–Ω–æ–ø–∫–∞ –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞, –Ω–æ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –º–æ–π —Ö–æ–¥ –ò –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥
            const isMyTurn = this.turnService ? this.turnService.isMyTurn() : false;
            endTurnBtn.disabled = !isMyTurn || !state.canEndTurn;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        const moveBtns = this.ui.querySelectorAll('.move-btn');
        moveBtns.forEach(btn => {
            // –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –º–æ–π —Ö–æ–¥ –ò –º–æ–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è
            const isMyTurn = this.turnService ? this.turnService.isMyTurn() : false;
            btn.disabled = !isMyTurn || !state.canMove || this.isMoving;
        });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {string|null} ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getCurrentUserId() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —É—Ç–∏–ª–∏—Ç—É, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if (window.CommonUtils) {
            return window.CommonUtils.getCurrentUserId();
        }
        
        // Fallback - —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ sessionStorage
            const bundleRaw = sessionStorage.getItem('am_player_bundle');
            if (bundleRaw) {
                const bundle = JSON.parse(bundleRaw);
                return bundle?.currentUser?.id;
            }
            
            // Fallback –∫ localStorage
            const userRaw = localStorage.getItem('aura_money_user');
            if (userRaw) {
                const user = JSON.parse(userRaw);
                return user?.id;
            }
        } catch (error) {
            console.error('‚ùå TurnController: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
        
        return null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ username —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (fallback –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ö–æ–¥–∞)
     */
    getCurrentUsername() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —É—Ç–∏–ª–∏—Ç—É, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if (window.CommonUtils) {
            return window.CommonUtils.getCurrentUsername();
        }
        
        // Fallback - —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        try {
            const bundleRaw = sessionStorage.getItem('am_player_bundle');
            if (bundleRaw) {
                const bundle = JSON.parse(bundleRaw);
                return bundle?.currentUser?.username || bundle?.currentUser?.name || null;
            }
            const userRaw = localStorage.getItem('aura_money_user');
            if (userRaw) {
                const user = JSON.parse(userRaw);
                return user?.username || user?.name || null;
            }
        } catch (error) {
            console.error('‚ùå TurnController: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
        return null;
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
     */
    async handleRollDice() {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–π
        if (this.isRolling) {
            console.warn('‚ö†Ô∏è TurnController: –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
            return;
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ UI
        const rollBtn = this.ui.querySelector('#roll-dice-btn');
        if (rollBtn && rollBtn.disabled) {
            console.warn('‚ö†Ô∏è TurnController: –ö–Ω–æ–ø–∫–∞ –±—Ä–æ—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
        const permissionCheck = this.turnService.canPerformAction({
            requireMyTurn: true
        });
        
        if (!permissionCheck.canPerform) {
            console.warn('‚ö†Ô∏è TurnController: –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:', permissionCheck.reason);
            this.showNotification(`‚ùå ${permissionCheck.reason === 'Not your turn' ? '–ù–µ –≤–∞—à —Ö–æ–¥!' : '–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!'}`, 'error');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!this.turnService.isMyTurn()) {
            console.warn('‚ö†Ô∏è TurnController: –ù–µ –≤–∞—à —Ö–æ–¥ - –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
            this.showNotification('‚ùå –ù–µ –≤–∞—à —Ö–æ–¥!', 'error');
            return;
        }
        
        console.log('üé≤ TurnController: –ù–∞—á–∏–Ω–∞–µ–º –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        try {
            await this.turnService.roll({ diceChoice: 'single' });
        } catch (error) {
            console.error('‚ùå TurnController: –û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞', 'error');
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNotification(message, type = 'info') {
        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (window.notificationService && typeof window.notificationService.show === 'function') {
            window.notificationService.show(message, type);
        } else {
            // Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –∫–æ–Ω—Å–æ–ª–∏ –∏ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            console.log(`üì¢ ${type.toUpperCase()}: ${message}`);
            
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: ${type === 'error' ? '#dc3545' : type === 'success' ? '#28a745' : '#17a2b8'};
                color: white;
                padding: 15px 20px;
                border-radius: 5px;
                z-index: 10000;
                font-family: Arial, sans-serif;
                font-size: 14px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                animation: slideIn 0.3s ease-out;
            `;
            notification.textContent = message;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            const style = document.createElement('style');
            style.textContent = `
                @keyframes slideIn {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
            `;
            document.head.appendChild(style);
            
            document.body.appendChild(notification);
            
            // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
                if (style.parentNode) {
                    style.parentNode.removeChild(style);
                }
            }, 3000);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
     */
    async handleMove(steps) {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–π
        if (this.isMoving) {
            console.warn('‚ö†Ô∏è TurnController: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
            return;
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ UI
        const moveBtns = this.ui.querySelectorAll('.move-btn');
        const clickedBtn = Array.from(moveBtns).find(btn => parseInt(btn.dataset.steps) === steps);
        if (clickedBtn && clickedBtn.disabled) {
            console.warn('‚ö†Ô∏è TurnController: –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
        const permissionCheck = this.turnService.canPerformAction({
            requireMyTurn: true
        });
        
        if (!permissionCheck.canPerform) {
            console.warn('‚ö†Ô∏è TurnController: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:', permissionCheck.reason);
            this.showNotification(`‚ùå ${permissionCheck.reason === 'Not your turn' ? '–ù–µ –≤–∞—à —Ö–æ–¥!' : '–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!'}`, 'error');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!this.turnService.isMyTurn()) {
            console.warn('‚ö†Ô∏è TurnController: –ù–µ –≤–∞—à —Ö–æ–¥ - –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ');
            this.showNotification('‚ùå –ù–µ –≤–∞—à —Ö–æ–¥!', 'error');
            return;
        }
        
        if (!this.turnService.canMove()) {
            console.warn('‚ö†Ô∏è TurnController: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
            this.showNotification('‚ùå –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', 'error');
            return;
        }
        
        console.log('üéØ TurnController: –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        try {
            await this.turnService.move(steps);
        } catch (error) {
            console.error('‚ùå TurnController: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è', 'error');
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
     */
    async handleEndTurn() {
        if (!this.turnService.canEndTurn()) return;
        
        try {
            await this.turnService.endTurn();
        } catch (error) {
            console.error('‚ùå TurnController: –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞:', error);
        }
    }
    
    /**
     * –°–æ–±—ã—Ç–∏—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
     */
    onRollStart() {
        this.isRolling = true;
        const rollBtn = this.ui.querySelector('#roll-dice-btn');
        rollBtn.disabled = true;
        rollBtn.textContent = 'üé≤ –ë—Ä–æ—Å–∞–µ–º...';
        rollBtn.classList.add('rolling');
        
        this.updateStatus('–ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫...');
    }
    
    onRollSuccess(response) {
        const moveActions = this.ui.querySelector('#move-actions');
        const endTurnBtn = this.ui.querySelector('#end-turn-btn');
        
        // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–æ—Å—Ç–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ –±—Ä–æ—Å–∫–∞: —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π
        const serverValue = response && (response.serverValue ?? response.diceResult?.value);
        const localValue = response && response.localRoll && (response.localRoll.value || response.localRoll.total);
        const value = serverValue ?? localValue ?? null;

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É–±–∏–∫–∞ –≤ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏ (PlayersPanel)
        this.updateDiceInBottomPanel(value);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        moveActions.style.display = response?.state?.canMove ? 'block' : 'none';
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–¥–∞—Ç—å —Ö–æ–¥" –ø–æ—Å–ª–µ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
        if (endTurnBtn) {
            endTurnBtn.disabled = !this.turnService.canEndTurn();
        }
        
        this.updateStatus(`–í—ã–ø–∞–ª–æ: ${value != null ? value : '?'}`);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É–±–∏–∫–∞ –≤ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏
     */
    updateDiceInBottomPanel(value) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ PlayersPanel
        const playersPanel = window.app?.getModule?.('playersPanel');
        if (playersPanel && typeof playersPanel.updateDiceResult === 'function') {
            playersPanel.updateDiceResult(value);
            console.log(`üé≤ TurnController: –û–±–Ω–æ–≤–ª–µ–Ω –∫—É–±–∏–∫ —á–µ—Ä–µ–∑ PlayersPanel: ${value}`);
        } else {
            // Fallback: –ø—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
            const bottomDiceElement = document.getElementById('dice-result');
            if (bottomDiceElement) {
                const valueEmoji = this.getDiceEmoji(Math.max(1, Math.min(6, Number(value) || 1)));
                bottomDiceElement.textContent = `${valueEmoji} ${value}`;
                console.log(`üé≤ TurnController: –û–±–Ω–æ–≤–ª–µ–Ω –∫—É–±–∏–∫ –Ω–∞–ø—Ä—è–º—É—é: ${valueEmoji} ${value}`);
            } else {
                console.warn('‚ö†Ô∏è TurnController: –≠–ª–µ–º–µ–Ω—Ç dice-result –≤ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
        }
    }
    
    onRollError(error) {
        console.error('‚ùå TurnController: –û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞:', error);
        const rollBtn = this.ui.querySelector('#roll-dice-btn');
        if (rollBtn) {
            rollBtn.disabled = true;
            setTimeout(()=>{ rollBtn.disabled = false; }, 1200);
        }
        const message = (error && (error.message || error.toString() || ''));
        if (String(message).includes('HTTP 400') || String(message).toLowerCase().includes('not your turn')) {
            this.updateStatus('–ù–µ –≤–∞—à —Ö–æ–¥ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
        } else {
            this.updateStatus('–û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞');
        }
    }
    
    onRollFinish() {
        this.isRolling = false;
        const rollBtn = this.ui.querySelector('#roll-dice-btn');
        rollBtn.disabled = false;
        rollBtn.textContent = 'üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫';
        rollBtn.classList.remove('rolling');
        
        this.updateUI();
    }
    
    /**
     * –°–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
     */
    onMoveStart() {
        this.isMoving = true;
        const moveBtns = this.ui.querySelectorAll('.move-btn');
        moveBtns.forEach(btn => btn.disabled = true);
        
        this.updateStatus('–ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è...');
    }
    
    onMoveSuccess(response) {
        const endTurnBtn = this.ui.querySelector('#end-turn-btn');
        const moveActions = this.ui.querySelector('#move-actions');
        if (moveActions) {
            moveActions.style.display = 'none';
        }
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–¥–∞—Ç—å —Ö–æ–¥" –ø–æ—Å–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è
        if (endTurnBtn) {
            endTurnBtn.disabled = !this.turnService.canEndTurn();
        }
        
        this.updateStatus(`–ü–µ—Ä–µ–º–µ—â–µ–Ω—ã –Ω–∞ ${response.moveResult.steps} —à–∞–≥–æ–≤`);
    }
    
    onMoveError(error) {
        console.error('‚ùå TurnController: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:', error);
        this.updateStatus('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è');
    }
    
    onMoveFinish() {
        this.isMoving = false;
        const moveBtns = this.ui.querySelectorAll('.move-btn');
        moveBtns.forEach(btn => btn.disabled = false);
        
        this.updateUI();
    }
    
    /**
     * –°–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
     */
    onEndStart() {
        this.updateStatus('–ó–∞–≤–µ—Ä—à–∞–µ–º —Ö–æ–¥...');
    }
    
    onEndSuccess(response) {
        // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        const diceResult = this.ui.querySelector('#dice-result');
        const moveActions = this.ui.querySelector('#move-actions');
        const endTurnBtn = this.ui.querySelector('#end-turn-btn');
        
        diceResult.style.display = 'none';
        moveActions.style.display = 'none';
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–¥–∞—Ç—å —Ö–æ–¥" –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
        if (endTurnBtn) {
            endTurnBtn.disabled = true;
        }
        
        this.updateStatus('–•–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω');
        this.updateUI();
    }
    
    onEndError(error) {
        console.error('‚ùå TurnController: –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞:', error);
        this.updateStatus('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞');
    }
    
    onEndFinish() {
        this.updateUI();
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –∫—É–±–∏–∫–∞
     */
    getDiceEmoji(value) {
        const diceEmojis = ['‚öÄ', '‚öÅ', '‚öÇ', '‚öÉ', '‚öÑ', '‚öÖ'];
        return diceEmojis[value - 1] || '‚öÄ';
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI (legacy –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     */
    updateUI() {
        if (!this.gameStateManager) return;
        
        const state = this.gameStateManager.getState();
        this.updateFromGameState(state);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
     */
    updateStatus(message) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–µ–∫—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
        const playerStatus = this.safeQuerySelector('.player-status');
        if (playerStatus) {
            playerStatus.textContent = message;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ–±–∑–æ—Ä–µ –∏–≥—Ä—ã
        const turnInfo = this.safeQuerySelector('.turn-info');
        if (turnInfo) {
            turnInfo.textContent = message;
        }
    }
    
    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ null
     * @param {string} selector - CSS —Å–µ–ª–µ–∫—Ç–æ—Ä
     * @returns {Element|null}
     */
    safeQuerySelector(selector) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —É—Ç–∏–ª–∏—Ç—É, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if (window.CommonUtils) {
            const context = this.ui || document;
            return window.CommonUtils.safeQuerySelector(selector, context);
        }
        
        // Fallback - —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        try {
            if (!this.ui) {
                return document.querySelector(selector);
            }
            return this.ui.querySelector(selector);
        } catch (error) {
            console.warn('TurnController: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞:', selector, error);
            return null;
        }
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
     */
    destroy() {
        if (this.playerList) {
            this.playerList.destroy();
        }
        
        if (this.ui) {
            this.ui.remove();
        }
        
        console.log('üéÆ TurnController v2.0: –£–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.TurnController = TurnController;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = TurnController;
}
