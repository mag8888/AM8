/**
 * TurnController v1.0.0
 * UI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ–¥–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
 */

class TurnController {
    constructor(turnService, playerTokenRenderer) {
        this.turnService = turnService;
        this.playerTokenRenderer = playerTokenRenderer;
        this.ui = null;
        this.isRolling = false;
        this.isMoving = false;
        this.isMobile = window.innerWidth <= 768;
        
        console.log('üéÆ TurnController: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, isMobile:', this.isMobile, 'window.innerWidth:', window.innerWidth);
        this.init();
        console.log('üéÆ TurnController: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
     */
    init() {
        this.createUI();
        this.setupEventListeners();
        this.updateUI();
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    createUI() {
        console.log('üéÆ TurnController: –°–æ–∑–¥–∞–Ω–∏–µ UI, isMobile:', this.isMobile);
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–µ–Ω—é —Ö–æ–¥–æ–≤
        const turnMenu = document.createElement('div');
        turnMenu.className = 'turn-menu';
        turnMenu.style.cssText = `
            display: flex;
            flex-direction: column;
            gap: 1rem;
            width: 100%;
            max-width: 600px;
        `;
        
        turnMenu.innerHTML = `
            <!-- –ö–Ω–æ–ø–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ -->
            <div class="dice-roll-section">
                <button id="roll-dice-btn" class="action-btn btn-dice">
                    <span class="btn-icon">üé≤</span>
                    <span class="btn-text">–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫</span>
                </button>
            </div>
            
            <!-- –ö–∞—Ä—Ç–æ—á–∫–∏ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ -->
            <div class="cards-container">
                <!-- –ò–ì–†–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò -->
                <div class="game-operations-card">
                    <div class="game-overview">
                        <div class="overview-row">
                            <span>–•–æ–¥:</span>
                            <span class="turn-info">–û–∂–∏–¥–∞–Ω–∏–µ...</span>
                        </div>
                        <div class="overview-row">
                            <span>–ö—É–±–∏–∫:</span>
                            <span class="dice-info" style="color: #10b981;">‚öÄ</span>
                        </div>
                    </div>
                    
                    <div class="players-section">
                        <div class="players-header">
                            <h3>üë• –ò–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ</h3>
                            <div class="players-count">2/4</div>
                        </div>
                        <div class="players-list">
                            <!-- –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                            <div class="player-item active">
                                <div class="player-avatar">üéØ</div>
                                <div class="player-details">
                                    <div class="player-name">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                                    <div class="player-status">–ê–∫—Ç–∏–≤–µ–Ω</div>
                                    <div class="player-balance">$0</div>
                                </div>
                                <div class="player-turn-indicator">üé≤</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="action-buttons">
                        <div id="dice-result" class="dice-result" style="display: none;">
                            <div class="dice-value">‚öÄ</div>
                            <div class="dice-text">–í—ã–ø–∞–ª–æ: <span class="dice-number">1</span></div>
                        </div>
                        
                        <div id="move-actions" class="move-actions" style="display: none;">
                            <div class="move-title">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤:</div>
                            <div class="move-buttons">
                                <button class="move-btn" data-steps="1">1</button>
                                <button class="move-btn" data-steps="2">2</button>
                                <button class="move-btn" data-steps="3">3</button>
                                <button class="move-btn" data-steps="4">4</button>
                                <button class="move-btn" data-steps="5">5</button>
                                <button class="move-btn" data-steps="6">6</button>
                            </div>
                        </div>
                        
                        <button id="end-turn-btn" class="action-btn btn-end" style="display: none;">
                            <span class="btn-icon">‚û°Ô∏è</span>
                            <span class="btn-text">–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥</span>
                        </button>
                    </div>
                </div>
                
                <!-- –°–¢–ê–¢–£–° –ò–ì–†–´ -->
                <div class="game-status-card">
                    <div class="status-display">
                        <div class="status-main">
                            <div class="status-value">–•–æ–¥ 1</div>
                            <div class="status-subtitle">–ò–≥—Ä–æ–∫: <span class="current-player">–ó–∞–≥—Ä—É–∑–∫–∞...</span></div>
                        </div>
                    </div>
                    
                    <div class="status-actions">
                        <div class="status-item">
                            <span class="status-icon">üìä</span>
                            <span class="status-text">–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</span>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–º–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ –≤ —Å—Ç–∏–ª–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        const style = document.createElement('style');
        style.textContent = `
            /* –°–µ–∫—Ü–∏—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ */
            .dice-roll-section {
                width: 100%;
                display: flex;
                justify-content: center;
                margin-bottom: 1rem;
            }

            /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ */
            .cards-container {
                display: flex;
                flex-direction: row;
                gap: 1rem;
                width: 100%;
            }

            /* –ö–∞—Ä—Ç–æ—á–∫–∏ –º–µ–Ω—é */
            .game-operations-card, .game-status-card {
                background: rgba(20, 20, 35, 0.95);
                border: 1px solid rgba(99, 102, 241, 0.2);
                border-radius: 12px;
                padding: 1.5rem;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
                flex: 1;
                min-width: 280px;
            }
            
            /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ */
            .card-header h3 {
                margin: 0 0 1rem 0;
                color: #ffffff;
                font-size: 1rem;
                font-weight: 700;
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }
            
            /* –û–±–∑–æ—Ä –∏–≥—Ä—ã */
            .game-overview {
                margin-bottom: 1rem;
            }
            
            .overview-row {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 0.5rem;
                font-size: 0.9rem;
            }
            
            .overview-row span:first-child {
                color: #d1d5db;
            }
            
            /* –°–µ–∫—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤ */
            .players-section {
                margin-bottom: 1rem;
                background: rgba(255, 255, 255, 0.05);
                border-radius: 8px;
                border: 1px solid rgba(34, 197, 94, 0.3);
                overflow: hidden;
            }
            
            .players-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 0.75rem 1rem;
                background: rgba(34, 197, 94, 0.1);
                border-bottom: 1px solid rgba(34, 197, 94, 0.2);
            }
            
            .players-header h3 {
                margin: 0;
                font-size: 0.9rem;
                font-weight: 600;
                color: #22c55e;
            }
            
            .players-count {
                font-size: 0.8rem;
                color: #d1d5db;
                background: rgba(255, 255, 255, 0.1);
                padding: 0.25rem 0.5rem;
                border-radius: 12px;
            }
            
            .players-list {
                max-height: 300px;
                overflow-y: auto;
            }
            
            .player-item {
                display: flex;
                align-items: center;
                gap: 0.75rem;
                padding: 0.75rem 1rem;
                border-bottom: 1px solid rgba(255, 255, 255, 0.05);
                transition: all 0.2s ease;
            }
            
            .player-item:last-child {
                border-bottom: none;
            }
            
            .player-item.active {
                background: rgba(34, 197, 94, 0.1);
                border-left: 3px solid #22c55e;
            }
            
            .player-item.waiting {
                opacity: 0.7;
            }
            
            .player-display {
                display: flex;
                align-items: center;
                gap: 0.75rem;
            }
            
            .player-avatar {
                width: 32px;
                height: 32px;
                border-radius: 50%;
                background: linear-gradient(135deg, #3b82f6, #1d4ed8);
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 16px;
                box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
            }
            
            .player-details {
                flex: 1;
            }
            
            .player-name {
                color: #ffffff;
                font-weight: 600;
                font-size: 0.95rem;
            }
            
            .player-status {
                color: #10b981;
                font-size: 0.8rem;
                margin-top: 0.25rem;
            }
            
            .player-balance {
                color: #fbbf24;
                font-size: 0.9rem;
                font-weight: 700;
                margin-top: 0.25rem;
            }
            
            .player-turn-indicator {
                font-size: 1.2rem;
                opacity: 0.6;
                transition: all 0.2s ease;
            }
            
            .player-item.active .player-turn-indicator {
                opacity: 1;
                animation: pulse 2s infinite;
            }
            
            @keyframes pulse {
                0%, 100% { opacity: 1; }
                50% { opacity: 0.5; }
            }
            
            /* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */
            .action-buttons {
                display: flex;
                flex-direction: column;
                gap: 0.75rem;
            }
            
            .action-btn {
                display: flex;
                align-items: center;
                gap: 0.5rem;
                padding: 0.75rem 1rem;
                border: none;
                border-radius: 8px;
                color: white;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.2s ease;
                font-size: 0.9rem;
            }
            
            .btn-dice {
                background: linear-gradient(135deg, #10b981, #059669);
                box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
            }
            
            .btn-dice:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 16px rgba(16, 185, 129, 0.4);
            }
            
            .btn-end {
                background: linear-gradient(135deg, #f59e0b, #d97706);
                box-shadow: 0 4px 12px rgba(245, 158, 11, 0.3);
            }
            
            .btn-end:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 16px rgba(245, 158, 11, 0.4);
            }
            
            .action-btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
                transform: none;
            }
            
            .btn-icon {
                font-size: 1.1rem;
            }
            
            /* –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ */
            .dice-result {
                text-align: center;
                padding: 1rem;
                background: rgba(255, 255, 255, 0.08);
                border-radius: 8px;
                border: 1px solid rgba(16, 185, 129, 0.3);
            }
            
            .dice-value {
                font-size: 2.5rem;
                margin-bottom: 0.5rem;
            }
            
            .dice-text {
                color: #d1d5db;
                font-size: 0.9rem;
            }
            
            /* –î–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è */
            .move-actions {
                margin-top: 0.5rem;
            }
            
            .move-title {
                color: #d1d5db;
                font-size: 0.9rem;
                margin-bottom: 0.75rem;
                text-align: center;
            }
            
            .move-buttons {
                display: grid;
                grid-template-columns: repeat(3, 1fr);
                gap: 0.5rem;
            }
            
            .move-btn {
                padding: 0.5rem;
                border: none;
                border-radius: 6px;
                background: rgba(107, 114, 128, 0.8);
                color: white;
                cursor: pointer;
                font-weight: 600;
                transition: all 0.2s ease;
            }
            
            .move-btn:hover {
                background: rgba(75, 85, 99, 0.9);
                transform: scale(1.05);
            }
            
            .move-btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
                transform: none;
            }
            
            /* –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã */
            .status-display {
                margin-bottom: 1rem;
            }
            
            .status-main {
                text-align: center;
                padding: 1rem;
                background: rgba(255, 255, 255, 0.05);
                border-radius: 8px;
            }
            
            .status-value {
                font-size: 1.5rem;
                font-weight: 700;
                color: #ffffff;
                margin-bottom: 0.5rem;
            }
            
            .status-subtitle {
                color: #d1d5db;
                font-size: 0.9rem;
            }
            
            .status-actions {
                display: flex;
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .status-item {
                display: flex;
                align-items: center;
                gap: 0.5rem;
                padding: 0.5rem;
                background: rgba(255, 255, 255, 0.05);
                border-radius: 6px;
                cursor: pointer;
                transition: all 0.2s ease;
            }
            
            .status-item:hover {
                background: rgba(255, 255, 255, 0.1);
            }
            
            .status-icon {
                font-size: 1.1rem;
            }
            
            .status-text {
                color: #d1d5db;
                font-size: 0.9rem;
            }
            
            /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
            @keyframes pulse {
                0%, 100% { opacity: 1; }
                50% { opacity: 0.7; }
            }
            
            .rolling {
                animation: pulse 1s infinite;
            }
            
            
            
            /* –ù–∞ –±–æ–ª—å—à–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ */
            @media (min-width: 1200px) {
                .turn-menu {
                    flex-direction: column;
                    max-width: 350px;
                }
                
                .cards-container {
                    flex-direction: column;
                }
                
                .game-operations-card, .game-status-card {
                    min-width: auto;
                    width: 100%;
                }
            }

            /* –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è */
            @media (max-width: 768px) {
                .turn-menu {
                    flex-direction: column;
                    max-width: 100%;
                }
                
                .cards-container {
                    flex-direction: column;
                }
                
                .game-operations-card, .game-status-card {
                    min-width: auto;
                    width: 100%;
                }
                
                .game-operations-card, .game-status-card {
                    padding: 1rem;
                }
                
                .card-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                }
            }
        `;
        document.head.appendChild(style);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
        const controlPanel = document.getElementById('game-control-panel');
        if (controlPanel) {
            controlPanel.appendChild(turnMenu);
            this.ui = turnMenu;
        } else {
            console.error('‚ùå TurnController: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä game-control-panel –Ω–µ –Ω–∞–π–¥–µ–Ω');
            document.body.appendChild(turnMenu);
            this.ui = turnMenu;
        }
        
        console.log('üéÆ TurnController: UI —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ DOM');
        console.log('üéÆ TurnController: –≠–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é:', {
            mobileToggle: this.ui.querySelector('#mobile-menu-toggle'),
            operationsCard: this.ui.querySelector('.game-operations-card'),
            statusCard: this.ui.querySelector('.game-status-card')
        });
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
        const rollBtn = this.ui.querySelector('#roll-dice-btn');
        rollBtn.addEventListener('click', () => this.handleRollDice());
        
        // –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        const moveBtns = this.ui.querySelectorAll('.move-btn');
        moveBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const steps = parseInt(btn.dataset.steps);
                this.handleMove(steps);
            });
        });
        
        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞
        const endTurnBtn = this.ui.querySelector('#end-turn-btn');
        endTurnBtn.addEventListener('click', () => this.handleEndTurn());
        
        
        // –°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π TurnService
        this.turnService.on('roll:start', () => this.onRollStart());
        this.turnService.on('roll:success', (response) => this.onRollSuccess(response));
        this.turnService.on('roll:error', (error) => this.onRollError(error));
        this.turnService.on('roll:finish', () => this.onRollFinish());
        
        this.turnService.on('move:start', () => this.onMoveStart());
        this.turnService.on('move:success', (response) => this.onMoveSuccess(response));
        this.turnService.on('move:error', (error) => this.onMoveError(error));
        this.turnService.on('move:finish', () => this.onMoveFinish());
        
        this.turnService.on('end:start', () => this.onEndStart());
        this.turnService.on('end:success', (response) => this.onEndSuccess(response));
        this.turnService.on('end:error', (error) => this.onEndError(error));
        this.turnService.on('end:finish', () => this.onEndFinish());
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
     */
    async handleRollDice() {
        if (this.isRolling || !this.turnService.canRoll()) return;
        
        try {
            await this.turnService.roll({ diceChoice: 'single' });
        } catch (error) {
            console.error('‚ùå TurnController: –û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞:', error);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
     */
    async handleMove(steps) {
        if (this.isMoving || !this.turnService.canMove()) return;
        
        try {
            await this.turnService.move(steps);
        } catch (error) {
            console.error('‚ùå TurnController: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:', error);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
     */
    async handleEndTurn() {
        if (!this.turnService.canEndTurn()) return;
        
        try {
            await this.turnService.endTurn();
        } catch (error) {
            console.error('‚ùå TurnController: –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞:', error);
        }
    }
    
    /**
     * –°–æ–±—ã—Ç–∏—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
     */
    onRollStart() {
        this.isRolling = true;
        const rollBtn = this.ui.querySelector('#roll-dice-btn');
        rollBtn.disabled = true;
        rollBtn.textContent = 'üé≤ –ë—Ä–æ—Å–∞–µ–º...';
        rollBtn.classList.add('rolling');
        
        this.updateStatus('–ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫...');
    }
    
    onRollSuccess(response) {
        const diceResult = this.ui.querySelector('#dice-result');
        const diceValue = this.ui.querySelector('.dice-value');
        const diceNumber = this.ui.querySelector('.dice-number');
        const moveActions = this.ui.querySelector('#move-actions');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
        diceResult.style.display = 'block';
        diceValue.textContent = this.getDiceEmoji(response.diceResult.value);
        diceNumber.textContent = response.diceResult.value;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        moveActions.style.display = 'block';
        
        this.updateStatus(`–í—ã–ø–∞–ª–æ: ${response.diceResult.value}`);
    }
    
    onRollError(error) {
        console.error('‚ùå TurnController: –û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞:', error);
        this.updateStatus('–û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞');
    }
    
    onRollFinish() {
        this.isRolling = false;
        const rollBtn = this.ui.querySelector('#roll-dice-btn');
        rollBtn.disabled = false;
        rollBtn.textContent = 'üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫';
        rollBtn.classList.remove('rolling');
        
        this.updateUI();
    }
    
    /**
     * –°–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
     */
    onMoveStart() {
        this.isMoving = true;
        const moveBtns = this.ui.querySelectorAll('.move-btn');
        moveBtns.forEach(btn => btn.disabled = true);
        
        this.updateStatus('–ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è...');
    }
    
    onMoveSuccess(response) {
        const endTurnBtn = this.ui.querySelector('#end-turn-btn');
        endTurnBtn.style.display = 'block';
        
        this.updateStatus(`–ü–µ—Ä–µ–º–µ—â–µ–Ω—ã –Ω–∞ ${response.moveResult.steps} —à–∞–≥–æ–≤`);
    }
    
    onMoveError(error) {
        console.error('‚ùå TurnController: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:', error);
        this.updateStatus('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è');
    }
    
    onMoveFinish() {
        this.isMoving = false;
        const moveBtns = this.ui.querySelectorAll('.move-btn');
        moveBtns.forEach(btn => btn.disabled = false);
        
        this.updateUI();
    }
    
    /**
     * –°–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
     */
    onEndStart() {
        this.updateStatus('–ó–∞–≤–µ—Ä—à–∞–µ–º —Ö–æ–¥...');
    }
    
    onEndSuccess(response) {
        // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        const diceResult = this.ui.querySelector('#dice-result');
        const moveActions = this.ui.querySelector('#move-actions');
        const endTurnBtn = this.ui.querySelector('#end-turn-btn');
        
        diceResult.style.display = 'none';
        moveActions.style.display = 'none';
        endTurnBtn.style.display = 'none';
        
        this.updateStatus('–•–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω');
        this.updateUI();
    }
    
    onEndError(error) {
        console.error('‚ùå TurnController: –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞:', error);
        this.updateStatus('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞');
    }
    
    onEndFinish() {
        this.updateUI();
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –∫—É–±–∏–∫–∞
     */
    getDiceEmoji(value) {
        const diceEmojis = ['‚öÄ', '‚öÅ', '‚öÇ', '‚öÉ', '‚öÑ', '‚öÖ'];
        return diceEmojis[value - 1] || '‚öÄ';
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
     */
    updateUI() {
        const state = this.turnService.getState();
        if (!state) return;
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ GameState
        const allPlayers = window.gameState ? window.gameState.getPlayers() : [];
        const activePlayer = this.turnService.getActivePlayer();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        this.updatePlayersList(allPlayers, activePlayer);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤
        const playersCount = this.ui.querySelector('.players-count');
        if (playersCount) {
            playersCount.textContent = `${allPlayers.length}/4`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ–¥–µ
        const turnInfo = this.ui.querySelector('.turn-info');
        if (turnInfo) {
            turnInfo.textContent = this.turnService.canRoll() ? '–í–∞—à —Ö–æ–¥' : '–û–∂–∏–¥–∞–Ω–∏–µ';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∏–∫–∞
        const diceResult = this.turnService.getLastDiceResult();
        if (diceResult) {
            const diceInfo = this.ui.querySelector('.dice-info');
            if (diceInfo) {
                diceInfo.textContent = this.getDiceEmoji(diceResult.value);
                diceInfo.style.color = '#10b981';
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        const rollBtn = this.ui.querySelector('#roll-dice-btn');
        const endTurnBtn = this.ui.querySelector('#end-turn-btn');
        
        if (rollBtn) {
            rollBtn.disabled = !this.turnService.canRoll() || this.isRolling;
        }
        
        if (endTurnBtn) {
            endTurnBtn.disabled = !this.turnService.canEndTurn();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        const moveBtns = this.ui.querySelectorAll('.move-btn');
        moveBtns.forEach(btn => {
            btn.disabled = !this.turnService.canMove() || this.isMoving;
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
     */
    updatePlayersList(allPlayers, activePlayer) {
        const playersList = this.ui.querySelector('.players-list');
        if (!playersList) return;
        
        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        playersList.innerHTML = '';
        
        if (allPlayers.length === 0) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤
            playersList.innerHTML = `
                <div class="player-item">
                    <div class="player-avatar">üë§</div>
                    <div class="player-details">
                        <div class="player-name">–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤</div>
                        <div class="player-status">–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</div>
                        <div class="player-balance">-</div>
                    </div>
                </div>
            `;
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        allPlayers.forEach((player, index) => {
            const isActive = activePlayer && player.id === activePlayer.id;
            const playerItem = document.createElement('div');
            playerItem.className = `player-item ${isActive ? 'active' : 'waiting'}`;
            
            // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
            let playerBalance = '$0';
            if (window.balanceManager) {
                playerBalance = window.balanceManager.getFormattedBalance(player.id);
            }
            
            playerItem.innerHTML = `
                <div class="player-avatar">${player.token || 'üéØ'}</div>
                <div class="player-details">
                    <div class="player-name">${player.username || '–ò–≥—Ä–æ–∫'}</div>
                    <div class="player-status">${isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–û–∂–∏–¥–∞–Ω–∏–µ'}</div>
                    <div class="player-balance">${playerBalance}</div>
                </div>
                <div class="player-turn-indicator">${isActive ? 'üé≤' : '‚è≥'}</div>
            `;
            
            playersList.appendChild(playerItem);
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
     */
    updateStatus(message) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–µ–∫—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
        const playerStatus = this.ui.querySelector('.player-status');
        if (playerStatus) {
            playerStatus.textContent = message;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ–±–∑–æ—Ä–µ –∏–≥—Ä—ã
        const turnInfo = this.ui.querySelector('.turn-info');
        if (turnInfo) {
            turnInfo.textContent = message;
        }
    }
    
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
     */
    destroy() {
        if (this.ui) {
            this.ui.remove();
        }
        console.log('üéÆ TurnController: –£–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.TurnController = TurnController;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = TurnController;
}
