/**
 * MovementService v1.0.0
 * -----------------------------------------------------------------------------
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–≤–∏–∂–µ–Ω–∏—è —Ñ–∏—à–µ–∫ –ø–æ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é
 */
class MovementService {
    constructor(config = {}) {
        this.gameState = config.gameState || null;
        this.eventBus = config.eventBus || null;
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—è
        this.outerTrackSize = 44; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫ –≤–Ω–µ—à–Ω–µ–≥–æ —Ç—Ä–µ–∫–∞
        this.innerTrackSize = 23; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ç—Ä–µ–∫–∞
        
        // –ü–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤
        this.playerPositions = new Map();
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        this.isMoving = false;
        this.currentMovement = null;
        
        console.log('üöÄ MovementService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        this.setupEventListeners();
        console.log('‚úÖ MovementService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        if (this.eventBus) {
            this.eventBus.on('dice:rolled', this.handleDiceRoll.bind(this));
            this.eventBus.on('game:player_joined', this.handlePlayerJoined.bind(this));
            this.eventBus.on('game:player_left', this.handlePlayerLeft.bind(this));
            this.eventBus.on('game:reset', this.reset.bind(this));
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
     */
    handleDiceRoll(rollResult) {
        if (this.gameState && this.gameState.activePlayer) {
            this.movePlayer(this.gameState.activePlayer.id, rollResult.total);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
     */
    handlePlayerJoined(player) {
        this.initializePlayerPosition(player.id);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
     */
    handlePlayerLeft(playerId) {
        this.playerPositions.delete(playerId);
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ (—Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è)
     */
    initializePlayerPosition(playerId) {
        const startPosition = {
            track: 'outer', // –ù–∞—á–∏–Ω–∞–µ–º —Å –≤–Ω–µ—à–Ω–µ–≥–æ —Ç—Ä–µ–∫–∞
            position: 0,    // –ü–µ—Ä–≤–∞—è –∫–ª–µ—Ç–∫–∞ (–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–π –¥–æ—Ö–æ–¥)
            totalMoves: 0   // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤
        };
        
        this.playerPositions.set(playerId, startPosition);
        console.log(`üöÄ MovementService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ ${playerId}:`, startPosition);
        
        if (this.eventBus) {
            this.eventBus.emit('movement:position_initialized', {
                playerId,
                position: startPosition
            });
        }
    }
    
    /**
     * –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫
     */
    movePlayer(playerId, steps) {
        if (this.isMoving) {
            console.warn('üöÄ MovementService: –î–≤–∏–∂–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
            return null;
        }
        
        const currentPosition = this.playerPositions.get(playerId);
        if (!currentPosition) {
            console.error(`üöÄ MovementService: –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ ${playerId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            this.initializePlayerPosition(playerId);
            return this.movePlayer(playerId, steps);
        }
        
        this.isMoving = true;
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–≤–∏–∂–µ–Ω–∏—è
        const movement = {
            id: this.generateMovementId(),
            playerId,
            steps,
            startPosition: { ...currentPosition },
            endPosition: null,
            path: [],
            timestamp: Date.now()
        };
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—É—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
        movement.path = this.calculatePath(currentPosition, steps);
        movement.endPosition = movement.path[movement.path.length - 1];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
        this.playerPositions.set(playerId, movement.endPosition);
        
        this.currentMovement = movement;
        
        console.log(`üöÄ MovementService: –ò–≥—Ä–æ–∫ ${playerId} –¥–≤–∏–∂–µ—Ç—Å—è –Ω–∞ ${steps} –∫–ª–µ—Ç–æ–∫:`, movement);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
        this.emitMovementEvents(movement);
        
        this.isMoving = false;
        this.currentMovement = null;
        
        return movement;
    }
    
    /**
     * –†–∞—Å—á–µ—Ç –ø—É—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è
     */
    calculatePath(startPosition, steps) {
        const path = [];
        let currentPos = { ...startPosition };
        
        for (let step = 0; step < steps; step++) {
            // –î–≤–∏–≥–∞–µ–º—Å—è –Ω–∞ –æ–¥–Ω—É –∫–ª–µ—Ç–∫—É
            currentPos = this.moveOneStep(currentPos);
            path.push({ ...currentPos });
        }
        
        return path;
    }
    
    /**
     * –î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω—É –∫–ª–µ—Ç–∫—É
     */
    moveOneStep(position) {
        const newPosition = { ...position };
        newPosition.position++;
        newPosition.totalMoves++;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Ç—Ä–µ–∫–∞–º–∏
        if (position.track === 'outer') {
            // –ù–∞ –≤–Ω–µ—à–Ω–µ–º —Ç—Ä–µ–∫–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
            if (newPosition.position >= this.outerTrackSize) {
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ç—Ä–µ–∫
                newPosition.track = 'inner';
                newPosition.position = 0; // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π –∫–ª–µ—Ç–∫–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ç—Ä–µ–∫–∞
                
                if (this.eventBus) {
                    this.eventBus.emit('movement:track_changed', {
                        playerId: this.getCurrentPlayerId(),
                        fromTrack: 'outer',
                        toTrack: 'inner',
                        position: newPosition
                    });
                }
            }
        } else if (position.track === 'inner') {
            // –ù–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º —Ç—Ä–µ–∫–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—Ä—É–≥–∞
            if (newPosition.position >= this.innerTrackSize) {
                // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä—É–≥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≤–Ω–µ—à–Ω–∏–π
                newPosition.track = 'outer';
                newPosition.position = 0;
                
                if (this.eventBus) {
                    this.eventBus.emit('movement:inner_circle_completed', {
                        playerId: this.getCurrentPlayerId(),
                        position: newPosition
                    });
                }
            }
        }
        
        return newPosition;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    getCurrentPlayerId() {
        if (this.gameState && this.gameState.activePlayer) {
            return this.gameState.activePlayer.id;
        }
        return null;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
     */
    generateMovementId() {
        return `move_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–≤–∏–∂–µ–Ω–∏—è
     */
    emitMovementEvents(movement) {
        if (this.eventBus) {
            // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
            this.eventBus.emit('movement:completed', movement);
            
            // –°–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏ –≤ –ø—É—Ç–∏
            movement.path.forEach((stepPosition, index) => {
                this.eventBus.emit('movement:step', {
                    playerId: movement.playerId,
                    step: index + 1,
                    position: stepPosition,
                    isFinal: index === movement.path.length - 1
                });
            });
            
            // –°–æ–±—ã—Ç–∏–µ –æ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–ª–µ—Ç–∫—É
            const finalPosition = movement.endPosition;
            this.eventBus.emit('movement:landed', {
                playerId: movement.playerId,
                position: finalPosition,
                cellData: this.getCellData(finalPosition)
            });
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–µ—Ç–∫–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
     */
    getCellData(position) {
        const { track, position: cellIndex } = position;
        
        if (track === 'outer') {
            return window.BoardConfig?.BIG_CIRCLE[cellIndex] || null;
        } else if (track === 'inner') {
            return window.BoardConfig?.SMALL_CIRCLE[cellIndex] || null;
        }
        
        return null;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
     */
    getPlayerPosition(playerId) {
        return this.playerPositions.get(playerId) || null;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏–≥—Ä–æ–∫–æ–≤
     */
    getAllPositions() {
        const positions = {};
        this.playerPositions.forEach((position, playerId) => {
            positions[playerId] = position;
        });
        return positions;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
     */
    setPlayerPosition(playerId, position) {
        this.playerPositions.set(playerId, position);
        
        if (this.eventBus) {
            this.eventBus.emit('movement:position_synced', {
                playerId,
                position
            });
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –¥–≤–∏–≥–∞—Ç—å—Å—è
     */
    canMove(playerId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        if (this.isMoving) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        if (this.gameState) {
            return this.gameState.canMove;
        }
        
        return true;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –¥–≤–∏–∂–µ–Ω–∏–∏
     */
    getCurrentMovement() {
        return this.currentMovement;
    }
    
    /**
     * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    reset() {
        this.playerPositions.clear();
        this.isMoving = false;
        this.currentMovement = null;
        console.log('üöÄ MovementService: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ');
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è
     */
    getStats() {
        const stats = {
            totalPlayers: this.playerPositions.size,
            isMoving: this.isMoving,
            positions: this.getAllPositions()
        };
        
        return stats;
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    formatPosition(position) {
        if (!position) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        
        const { track, position: cellIndex, totalMoves } = position;
        const trackName = track === 'outer' ? '–í–Ω–µ—à–Ω–∏–π' : '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π';
        
        return `${trackName} –∫—Ä—É–≥, –∫–ª–µ—Ç–∫–∞ ${cellIndex + 1} (—Ö–æ–¥–æ–≤: ${totalMoves})`;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.MovementService = MovementService;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = MovementService;
}
