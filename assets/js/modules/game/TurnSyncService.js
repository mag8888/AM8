/**
 * TurnSyncService v1.0.0
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ö–æ–¥–æ–≤ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Ö–æ–¥–∞
 */

class TurnSyncService {
    constructor({ turnService, roomApi, eventBus }) {
        this.turnService = turnService;
        this.roomApi = roomApi;
        this.eventBus = eventBus;
        this.roomId = null;
        this.currentUserId = null;
        this.syncInterval = null;
        
        console.log('üîÑ TurnSyncService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
     */
    init() {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.roomId = this._getRoomId();
        this.currentUserId = this._getCurrentUserId();
        
        if (!this.roomId) {
            console.warn('‚ö†Ô∏è TurnSyncService: roomId –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–º–µ–Ω—ã —Ö–æ–¥–∞
        this.setupEventListeners();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        this.startSync();
        
        console.log('‚úÖ TurnSyncService: –ù–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã', this.roomId);
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        if (!this.turnService) return;
        
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
        this.turnService.on('end:success', (response) => {
            this.handleTurnEnd(response);
        });
        
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        this.turnService.on('move:success', (response) => {
            this.handleMoveSuccess(response);
        });
        
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
        this.turnService.on('roll:success', (response) => {
            this.handleRollSuccess(response);
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
     */
    handleTurnEnd(response) {
        console.log('üîÑ TurnSyncService: –•–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Ö–æ–¥–∞
        this.sendTurnChangeNotification(response);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        this.broadcastGameStateUpdate();
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
     */
    handleMoveSuccess(response) {
        console.log('üîÑ TurnSyncService: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
        this.sendMoveNotification(response);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
     */
    handleRollSuccess(response) {
        console.log('üîÑ TurnSyncService: –ö—É–±–∏–∫ –±—Ä–æ—à–µ–Ω');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—Ä–æ—Å–∫–µ
        this.sendRollNotification(response);
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Ö–æ–¥–∞
     */
    async sendTurnChangeNotification(response) {
        try {
            if (!this.roomId || !this.currentUserId) return;
            
            const notification = {
                type: 'turn_changed',
                data: {
                    roomId: this.roomId,
                    previousPlayer: response.previousPlayer,
                    currentPlayer: response.state?.activePlayer,
                    turnNumber: response.state?.turnNumber || 1,
                    timestamp: new Date().toISOString()
                },
                from: this.currentUserId,
                to: 'all_players'
            };
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API
            await this.roomApi.sendNotification(this.roomId, notification);
            
            console.log('üì¢ TurnSyncService: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå TurnSyncService: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Ö–æ–¥–∞:', error);
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
     */
    async sendMoveNotification(response) {
        try {
            if (!this.roomId || !this.currentUserId) return;
            
            const notification = {
                type: 'player_moved',
                data: {
                    roomId: this.roomId,
                    player: response.state?.activePlayer,
                    steps: response.moveResult?.steps,
                    newPosition: response.state?.players?.find(p => p.id === response.state?.activePlayer?.id)?.position,
                    timestamp: new Date().toISOString()
                },
                from: this.currentUserId,
                to: 'all_players'
            };
            
            await this.roomApi.sendNotification(this.roomId, notification);
            
            console.log('üì¢ TurnSyncService: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå TurnSyncService: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏:', error);
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–∞
     */
    async sendRollNotification(response) {
        try {
            if (!this.roomId || !this.currentUserId) return;
            
            const notification = {
                type: 'dice_rolled',
                data: {
                    roomId: this.roomId,
                    player: response.state?.activePlayer,
                    diceValue: response.serverValue || response.diceResult?.value,
                    timestamp: new Date().toISOString()
                },
                from: this.currentUserId,
                to: 'all_players'
            };
            
            await this.roomApi.sendNotification(this.roomId, notification);
            
            console.log('üì¢ TurnSyncService: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå TurnSyncService: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—Ä–æ—Å–∫–µ:', error);
        }
    }
    
    /**
     * –®–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     */
    async broadcastGameStateUpdate() {
        try {
            if (!this.roomId) return;
            
            const state = this.turnService.getState();
            if (!state) return;
            
            const notification = {
                type: 'game_state_updated',
                data: {
                    roomId: this.roomId,
                    state: state,
                    timestamp: new Date().toISOString()
                },
                from: this.currentUserId,
                to: 'all_players'
            };
            
            await this.roomApi.sendNotification(this.roomId, notification);
            
            console.log('üì¢ TurnSyncService: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå TurnSyncService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', error);
        }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    startSync() {
        // –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –ò–ù–¢–ï–†–í–ê–õ: 45 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        this.syncInterval = setInterval(() => {
            this.syncGameState();
        }, 45000); // –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–æ 45 —Å–µ–∫—É–Ω–¥ –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
        
        console.log('üîÑ TurnSyncService: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 45 —Å–µ–∫)');
    }
    
    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     */
    async syncGameState() {
        try {
            if (!this.roomId) return;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ roomApi –∏–º–µ–µ—Ç –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥
            if (!this.roomApi || typeof this.roomApi.getRoomState !== 'function') {
                console.warn('‚ö†Ô∏è TurnSyncService: roomApi.getRoomState –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
            const roomData = await this.roomApi.getRoomState(this.roomId);
            if (roomData && roomData.state) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if (this.turnService && typeof this.turnService._applyServerState === 'function') {
                    this.turnService._applyServerState(roomData.state);
                }
                
                console.log('üîÑ TurnSyncService: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
            }
        } catch (error) {
            console.error('‚ùå TurnSyncService: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    handleIncomingNotification(notification) {
        try {
            console.log('üì® TurnSyncService: –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', notification.type);
            
            switch (notification.type) {
                case 'turn_changed':
                    this.handleTurnChangeNotification(notification.data);
                    break;
                case 'player_moved':
                    this.handlePlayerMoveNotification(notification.data);
                    break;
                case 'dice_rolled':
                    this.handleDiceRollNotification(notification.data);
                    break;
                case 'game_state_updated':
                    this.handleGameStateUpdate(notification.data);
                    break;
                default:
                    console.log('üì® TurnSyncService: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notification.type);
            }
        } catch (error) {
            console.error('‚ùå TurnSyncService: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Ö–æ–¥–∞
     */
    handleTurnChangeNotification(data) {
        console.log('üîÑ TurnSyncService: –°–º–µ–Ω–∞ —Ö–æ–¥–∞:', data);
        
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ —Å–º–µ–Ω—ã —Ö–æ–¥–∞
        if (this.eventBus) {
            this.eventBus.emit('turn:changed', data);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        this.showTurnChangeNotification(data);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞
     */
    handlePlayerMoveNotification(data) {
        console.log('üîÑ TurnSyncService: –ò–≥—Ä–æ–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω:', data);
        
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        if (this.eventBus) {
            this.eventBus.emit('player:moved', data);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–∞
     */
    handleDiceRollNotification(data) {
        console.log('üîÑ TurnSyncService: –ö—É–±–∏–∫ –±—Ä–æ—à–µ–Ω:', data);
        
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –±—Ä–æ—Å–∫–∞
        if (this.eventBus) {
            this.eventBus.emit('dice:rolled', data);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     */
    handleGameStateUpdate(data) {
        console.log('üîÑ TurnSyncService: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (data.state) {
            this.turnService._applyServerState(data.state);
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Ö–æ–¥–∞
     */
    showTurnChangeNotification(data) {
        const currentUserId = this._getCurrentUserId();
        const isMyTurn = data.currentPlayer && (
            data.currentPlayer.id === currentUserId ||
            data.currentPlayer.userId === currentUserId
        );
        
        if (isMyTurn) {
            this.showNotification('üéØ –í–ê–® –•–û–î! –ë—Ä–æ—Å–∞–π—Ç–µ –∫—É–±–∏–∫', 'success');
        } else if (data.currentPlayer) {
            this.showNotification(`–•–æ–¥ –∏–≥—Ä–æ–∫–∞: ${data.currentPlayer.username || data.currentPlayer.name}`, 'info');
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNotification(message, type = 'info') {
        if (window.notificationService && typeof window.notificationService.show === 'function') {
            window.notificationService.show(message, type);
        } else {
            console.log(`üì¢ ${type.toUpperCase()}: ${message}`);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–æ–º–Ω–∞—Ç—ã
     */
    _getRoomId() {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ URL
            const urlParams = new URLSearchParams(window.location.hash.split('?')[1]);
            const roomId = urlParams.get('roomId');
            if (roomId) return roomId;
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ sessionStorage
            const bundleRaw = sessionStorage.getItem('am_player_bundle');
            if (bundleRaw) {
                const bundle = JSON.parse(bundleRaw);
                return bundle.roomId;
            }
            
            return null;
        } catch (error) {
            console.error('‚ùå TurnSyncService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è roomId:', error);
            return null;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    _getCurrentUserId() {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ sessionStorage
            const bundleRaw = sessionStorage.getItem('am_player_bundle');
            if (bundleRaw) {
                const bundle = JSON.parse(bundleRaw);
                const userId = bundle?.currentUser?.id || bundle?.currentUser?.userId;
                if (userId) {
                    console.log('üîç TurnSyncService: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ bundle:', userId);
                    return userId;
                }
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ localStorage
            const userRaw = localStorage.getItem('aura_money_user');
            if (userRaw) {
                const user = JSON.parse(userRaw);
                const userId = user?.id || user?.userId;
                if (userId) {
                    console.log('üîç TurnSyncService: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage:', userId);
                    return userId;
                }
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ app
            if (window.app && window.app.getModule) {
                const userModel = window.app.getModule('userModel');
                if (userModel && userModel.getCurrentUser) {
                    const currentUser = userModel.getCurrentUser();
                    if (currentUser && (currentUser.id || currentUser.userId)) {
                        const userId = currentUser.id || currentUser.userId;
                        console.log('üîç TurnSyncService: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ userModel:', userId);
                        return userId;
                    }
                }
            }
            
            console.warn('‚ö†Ô∏è TurnSyncService: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return null;
        } catch (error) {
            console.error('‚ùå TurnSyncService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è userId:', error);
            return null;
        }
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    stop() {
        if (this.syncInterval) {
            clearInterval(this.syncInterval);
            this.syncInterval = null;
        }
        
        console.log('üîÑ TurnSyncService: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
     */
    destroy() {
        this.stop();
        console.log('üîÑ TurnSyncService: –£–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.TurnSyncService = TurnSyncService;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = TurnSyncService;
}
