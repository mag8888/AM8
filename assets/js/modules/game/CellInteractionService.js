/**
 * CellInteractionService v1.0.0
 * -----------------------------------------------------------------------------
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–µ—Ç–∫–∞–º–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
 */
class CellInteractionService {
    constructor(config = {}) {
        this.gameState = config.gameState || null;
        this.eventBus = config.eventBus || null;
        this.balanceManager = config.balanceManager || null;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
        this.activeInteraction = null;
        this.interactionHistory = [];
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–ª–µ—Ç–æ–∫
        this.cellHandlers = {
            'money': this.handleMoneyCell.bind(this),
            'dream': this.handleDreamCell.bind(this),
            'business': this.handleBusinessCell.bind(this),
            'loss': this.handleLossCell.bind(this),
            'chance': this.handleChanceCell.bind(this),
            'charity': this.handleCharityCell.bind(this),
            'market': this.handleMarketCell.bind(this),
            'family': this.handleFamilyCell.bind(this),
            'expense': this.handleExpenseCell.bind(this),
            'start': this.handleStartCell.bind(this)
        };
        
        console.log('üéØ CellInteractionService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        this.setupEventListeners();
        console.log('‚úÖ CellInteractionService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        if (this.eventBus) {
            this.eventBus.on('movement:landed', this.handleCellLanding.bind(this));
            this.eventBus.on('cell:clicked', this.handleCellClick.bind(this));
            this.eventBus.on('game:reset', this.reset.bind(this));
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–ª–µ—Ç–∫—É
     */
    handleCellLanding(event) {
        const { playerId, position, cellData } = event;
        
        if (!cellData) {
            console.warn('üéØ CellInteractionService: –î–∞–Ω–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        console.log(`üéØ CellInteractionService: –ò–≥—Ä–æ–∫ ${playerId} –ø–æ–ø–∞–ª –Ω–∞ –∫–ª–µ—Ç–∫—É:`, cellData);
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        const interaction = {
            id: this.generateInteractionId(),
            playerId,
            position,
            cellData,
            timestamp: Date.now(),
            handled: false
        };
        
        this.activeInteraction = interaction;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–µ—Ç–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        this.processCellInteraction(interaction);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–µ—Ç–∫–µ
     */
    handleCellClick(event) {
        const { position, cellData } = event;
        
        if (!cellData) {
            console.warn('üéØ CellInteractionService: –î–∞–Ω–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        console.log('üéØ CellInteractionService: –ö–ª–∏–∫ –ø–æ –∫–ª–µ—Ç–∫–µ:', cellData);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–µ—Ç–∫–µ
        this.showCellInfo(cellData);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–µ—Ç–∫–æ–π
     */
    processCellInteraction(interaction) {
        const { cellData, playerId } = interaction;
        const cellType = cellData.type || 'unknown';
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–∏–ø–∞ –∫–ª–µ—Ç–∫–∏
        const handler = this.cellHandlers[cellType];
        
        if (handler) {
            try {
                handler(interaction);
            } catch (error) {
                console.error(`üéØ CellInteractionService: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–µ—Ç–∫–∏ —Ç–∏–ø–∞ ${cellType}:`, error);
                this.handleError(interaction, error);
            }
        } else {
            console.warn(`üéØ CellInteractionService: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–ª–µ—Ç–∫–∏: ${cellType}`);
            this.handleUnknownCell(interaction);
        }
        
        // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
        interaction.handled = true;
        this.addToHistory(interaction);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        if (this.eventBus) {
            this.eventBus.emit('cell:interaction_completed', interaction);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–µ—Ç–∫–∏ –¥–µ–Ω–µ–≥ (–¥–æ—Ö–æ–¥)
     */
    handleMoneyCell(interaction) {
        const { cellData, playerId } = interaction;
        const { name, description, income } = cellData;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ—Ö–æ–¥
        if (income > 0 && this.balanceManager) {
            this.balanceManager.updateBalance(playerId, income);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.showModal({
            title: name,
            content: description,
            type: 'money',
            income: income,
            actions: [
                {
                    text: '–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Ö–æ–¥',
                    type: 'primary',
                    action: () => {
                        if (income > 0 && this.balanceManager) {
                            this.balanceManager.updateBalance(playerId, income);
                        }
                        this.closeModal();
                    }
                }
            ]
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–µ—Ç–∫–∏ –º–µ—á—Ç—ã
     */
    handleDreamCell(interaction) {
        const { cellData, playerId } = interaction;
        const { name, description, price } = cellData;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –∫—É–ø–∏—Ç—å –º–µ—á—Ç—É
        const canAfford = this.balanceManager ? 
            this.balanceManager.getBalance(playerId) >= price : false;
        
        this.showModal({
            title: name,
            content: description,
            type: 'dream',
            price: price,
            canAfford: canAfford,
            actions: [
                {
                    text: canAfford ? `–ö—É–ø–∏—Ç—å –∑–∞ $${price}` : '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
                    type: canAfford ? 'primary' : 'disabled',
                    action: canAfford ? () => {
                        if (this.balanceManager) {
                            this.balanceManager.updateBalance(playerId, -price);
                        }
                        this.closeModal();
                        this.eventBus?.emit('dream:purchased', { playerId, dream: cellData });
                    } : null
                },
                {
                    text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
                    type: 'secondary',
                    action: () => this.closeModal()
                }
            ]
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–µ—Ç–∫–∏ –±–∏–∑–Ω–µ—Å–∞
     */
    handleBusinessCell(interaction) {
        const { cellData, playerId } = interaction;
        const { name, description, price, rent } = cellData;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –∫—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å
        const canAfford = this.balanceManager ? 
            this.balanceManager.getBalance(playerId) >= price : false;
        
        this.showModal({
            title: name,
            content: description,
            type: 'business',
            price: price,
            rent: rent,
            canAfford: canAfford,
            actions: [
                {
                    text: canAfford ? `–ö—É–ø–∏—Ç—å –∑–∞ $${price}` : '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
                    type: canAfford ? 'primary' : 'disabled',
                    action: canAfford ? () => {
                        if (this.balanceManager) {
                            this.balanceManager.updateBalance(playerId, -price);
                        }
                        this.closeModal();
                        this.eventBus?.emit('business:purchased', { playerId, business: cellData });
                    } : null
                },
                {
                    text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
                    type: 'secondary',
                    action: () => this.closeModal()
                }
            ]
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–µ—Ç–∫–∏ –ø–æ—Ç–µ—Ä—å
     */
    handleLossCell(interaction) {
        const { cellData, playerId } = interaction;
        const { name, description, expense } = cellData;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –∑–∞–ø–ª–∞—Ç–∏—Ç—å
        const currentBalance = this.balanceManager ? 
            this.balanceManager.getBalance(playerId) : 0;
        const canAfford = currentBalance >= Math.abs(expense);
        
        this.showModal({
            title: name,
            content: description,
            type: 'loss',
            expense: expense,
            canAfford: canAfford,
            actions: [
                {
                    text: canAfford ? `–ó–∞–ø–ª–∞—Ç–∏—Ç—å $${Math.abs(expense)}` : '–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ',
                    type: canAfford ? 'danger' : 'warning',
                    action: () => {
                        if (canAfford && this.balanceManager) {
                            this.balanceManager.updateBalance(playerId, expense);
                        } else {
                            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞
                            this.eventBus?.emit('player:bankruptcy', { playerId });
                        }
                        this.closeModal();
                    }
                }
            ]
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–µ—Ç–∫–∏ —à–∞–Ω—Å–∞
     */
    handleChanceCell(interaction) {
        const { cellData, playerId } = interaction;
        const { name, description } = cellData;
        
        this.showModal({
            title: name,
            content: description,
            type: 'chance',
            actions: [
                {
                    text: '–í—ã–±—Ä–∞—Ç—å –º–∞–ª—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å',
                    type: 'primary',
                    action: () => {
                        this.closeModal();
                        this.eventBus?.emit('chance:small_opportunity', { playerId });
                    }
                },
                {
                    text: '–í—ã–±—Ä–∞—Ç—å –±–æ–ª—å—à—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å',
                    type: 'primary',
                    action: () => {
                        this.closeModal();
                        this.eventBus?.emit('chance:big_opportunity', { playerId });
                    }
                }
            ]
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–µ—Ç–∫–∏ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    handleCharityCell(interaction) {
        const { cellData, playerId } = interaction;
        const { name, description, customData } = cellData;
        const donationPercent = customData?.donationPercent || 10;
        
        const currentBalance = this.balanceManager ? 
            this.balanceManager.getBalance(playerId) : 0;
        const donationAmount = Math.round(currentBalance * donationPercent / 100);
        
        this.showModal({
            title: name,
            content: description,
            type: 'charity',
            donationAmount: donationAmount,
            donationPercent: donationPercent,
            actions: [
                {
                    text: `–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å $${donationAmount}`,
                    type: 'primary',
                    action: () => {
                        if (this.balanceManager) {
                            this.balanceManager.updateBalance(playerId, -donationAmount);
                        }
                        this.eventBus?.emit('charity:double_dice_enabled');
                        this.closeModal();
                    }
                },
                {
                    text: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è',
                    type: 'secondary',
                    action: () => this.closeModal()
                }
            ]
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–µ—Ç–∫–∏ —Ä—ã–Ω–∫–∞
     */
    handleMarketCell(interaction) {
        const { cellData, playerId } = interaction;
        const { name, description } = cellData;
        
        this.showModal({
            title: name,
            content: description,
            type: 'market',
            actions: [
                {
                    text: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
                    type: 'primary',
                    action: () => {
                        this.closeModal();
                        this.eventBus?.emit('market:show_offers', { playerId });
                    }
                }
            ]
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–µ—Ç–∫–∏ —Å–µ–º—å–∏
     */
    handleFamilyCell(interaction) {
        const { cellData, playerId } = interaction;
        const { name, description } = cellData;
        
        this.showModal({
            title: name,
            content: description,
            type: 'family',
            actions: [
                {
                    text: '–ü—Ä–∏–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                    type: 'primary',
                    action: () => {
                        this.closeModal();
                        this.eventBus?.emit('family:expense_increase', { playerId });
                    }
                }
            ]
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–µ—Ç–∫–∏ —Ç—Ä–∞—Ç
     */
    handleExpenseCell(interaction) {
        const { cellData, playerId } = interaction;
        const { name, description, customData } = cellData;
        const expenseRange = customData?.expenseRange || [100, 4000];
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—É–º–º—É —Ç—Ä–∞—Ç
        const expense = Math.floor(Math.random() * (expenseRange[1] - expenseRange[0] + 1)) + expenseRange[0];
        
        const currentBalance = this.balanceManager ? 
            this.balanceManager.getBalance(playerId) : 0;
        const canAfford = currentBalance >= expense;
        
        this.showModal({
            title: name,
            content: description,
            type: 'expense',
            expense: expense,
            canAfford: canAfford,
            actions: [
                {
                    text: canAfford ? `–ó–∞–ø–ª–∞—Ç–∏—Ç—å $${expense}` : '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
                    type: canAfford ? 'danger' : 'disabled',
                    action: canAfford ? () => {
                        if (this.balanceManager) {
                            this.balanceManager.updateBalance(playerId, -expense);
                        }
                        this.closeModal();
                    } : null
                }
            ]
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–ª–µ—Ç–∫–∏
     */
    handleStartCell(interaction) {
        const { cellData, playerId } = interaction;
        const { name, description } = cellData;
        
        this.showModal({
            title: name,
            content: description,
            type: 'start',
            actions: [
                {
                    text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                    type: 'primary',
                    action: () => this.closeModal()
                }
            ]
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–ª–µ—Ç–∫–∏
     */
    handleUnknownCell(interaction) {
        const { cellData, playerId } = interaction;
        
        this.showModal({
            title: cellData.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–ª–µ—Ç–∫–∞',
            content: cellData.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
            type: 'unknown',
            actions: [
                {
                    text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                    type: 'primary',
                    action: () => this.closeModal()
                }
            ]
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
     */
    handleError(interaction, error) {
        this.showModal({
            title: '–û—à–∏–±–∫–∞',
            content: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–µ—Ç–∫–∏: ${error.message}`,
            type: 'error',
            actions: [
                {
                    text: '–ó–∞–∫—Ä—ã—Ç—å',
                    type: 'primary',
                    action: () => this.closeModal()
                }
            ]
        });
    }
    
    /**
     * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    showModal(config) {
        if (this.eventBus) {
            this.eventBus.emit('modal:show', config);
        }
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    closeModal() {
        if (this.eventBus) {
            this.eventBus.emit('modal:close');
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–µ—Ç–∫–µ
     */
    showCellInfo(cellData) {
        this.showModal({
            title: cellData.name,
            content: cellData.description,
            type: 'info',
            actions: [
                {
                    text: '–ó–∞–∫—Ä—ã—Ç—å',
                    type: 'primary',
                    action: () => this.closeModal()
                }
            ]
        });
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
     */
    addToHistory(interaction) {
        this.interactionHistory.unshift(interaction);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏
        if (this.interactionHistory.length > 50) {
            this.interactionHistory = this.interactionHistory.slice(0, 50);
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
     */
    generateInteractionId() {
        return `interaction_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
     */
    getHistory() {
        return [...this.interactionHistory];
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
     */
    getActiveInteraction() {
        return this.activeInteraction;
    }
    
    /**
     * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    reset() {
        this.activeInteraction = null;
        this.interactionHistory = [];
        console.log('üéØ CellInteractionService: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.CellInteractionService = CellInteractionService;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = CellInteractionService;
}
