/**
 * PlayerBalanceDisplay v1.0.0
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
 */

class PlayerBalanceDisplay {
    constructor(config = {}) {
        this.gameState = config.gameState || null;
        this.eventBus = config.eventBus || null;
        this.roomApi = config.roomApi || null;
        this.currentRoomId = null;
        
        this.setupEventListeners();
        this.init();
        
        console.log('üí∞ PlayerBalanceDisplay: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
     */
    init() {
        this.currentRoomId = this._getCurrentRoomId();
        if (this.currentRoomId) {
            this.loadBalancesFromServer();
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        if (!this.eventBus) return;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö
        this.eventBus.on('bank:transferCompleted', (data) => {
            this.updatePlayerBalance(data.fromPlayer.id, data.fromPlayer.money);
            this.updatePlayerBalance(data.toPlayer.id, data.toPlayer.money);
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        this.eventBus.on('game:stateUpdated', (state) => {
            this.updateAllBalances(state.players);
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π –∏–≥—Ä–æ–∫–æ–≤
        this.eventBus.on('players:positionsUpdated', (data) => {
            this.updateAllBalances(data.players);
        });
        
        // Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        this.eventBus.on('push:message', (message) => {
            if (message.type === 'bank_transfer' || message.type === 'bank_balanceUpdated') {
                this.handleServerUpdate(message);
            }
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    updatePlayerBalance(playerId, newBalance) {
        const playerCard = this.findPlayerCard(playerId);
        if (!playerCard) {
            console.warn('‚ö†Ô∏è PlayerBalanceDisplay: –ö–∞—Ä—Ç–æ—á–∫–∞ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', playerId);
            return;
        }
        
        const balanceElement = playerCard.querySelector('.player-balance');
        if (balanceElement) {
            const oldBalance = balanceElement.textContent;
            balanceElement.textContent = this.formatNumber(newBalance);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
            this.animateBalanceChange(balanceElement, oldBalance, newBalance);
            
            console.log(`üí∞ PlayerBalanceDisplay: –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω ${playerId}: ${oldBalance} -> ${this.formatNumber(newBalance)}`);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
     */
    updateAllBalances(players) {
        if (!players || !Array.isArray(players)) return;
        
        players.forEach(player => {
            if (player.id && player.money !== undefined) {
                this.updatePlayerBalance(player.id, player.money);
            }
        });
    }
    
    /**
     * –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞ –ø–æ ID
     */
    findPlayerCard(playerId) {
        // –ò—â–µ–º –ø–æ data-player-id
        let card = document.querySelector(`[data-player-id="${playerId}"]`);
        if (card) return card;
        
        // –ò—â–µ–º –ø–æ data-id
        card = document.querySelector(`[data-id="${playerId}"]`);
        if (card) return card;
        
        // –ò—â–µ–º –ø–æ –∫–ª–∞—Å—Å—É –∏ —Ç–µ–∫—Å—Ç—É
        const playerCards = document.querySelectorAll('.player-card, .player-item, .player-list-item');
        for (const card of playerCards) {
            const usernameElement = card.querySelector('.player-name, .username, .player-username');
            if (usernameElement) {
                const username = usernameElement.textContent.trim();
                if (this.isPlayerCard(playerId, username, card)) {
                    return card;
                }
            }
        }
        
        // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ PlayerList
        if (window.PlayerList) {
            const playerListContainers = document.querySelectorAll('[id*="player"], [id*="turn-controller"]');
            for (const container of playerListContainers) {
                const playerList = container.playerList || container._playerList;
                if (playerList && typeof playerList.findPlayerCard === 'function') {
                    const foundCard = playerList.findPlayerCard(playerId);
                    if (foundCard) return foundCard;
                }
            }
        }
        
        return null;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω—É–∂–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º
     */
    isPlayerCard(playerId, username, card) {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ ID –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö
        if (card.dataset.playerId === playerId || card.dataset.id === playerId) {
            return true;
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å gameState, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username
        if (this.gameState) {
            const player = this.gameState.getPlayers().find(p => 
                p.username === username && p.id === playerId
            );
            return !!player;
        }
        
        return false;
    }
    
    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
     */
    animateBalanceChange(element, oldBalance, newBalance) {
        const oldValue = this.parseNumber(oldBalance);
        const newValue = this.parseNumber(newBalance);
        
        if (oldValue === newValue) return;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏
        element.classList.add('balance-changing');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–∏
        if (newValue > oldValue) {
            element.classList.add('balance-increase');
        } else if (newValue < oldValue) {
            element.classList.add('balance-decrease');
        }
        
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            element.classList.remove('balance-changing', 'balance-increase', 'balance-decrease');
        }, 2000);
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async loadBalancesFromServer() {
        if (!this.currentRoomId) return;
        
        try {
            const response = await fetch(`/api/bank/room-balances/${this.currentRoomId}`);
            const result = await response.json();
            
            if (result.success && result.data.balances) {
                result.data.balances.forEach(playerBalance => {
                    this.updatePlayerBalance(playerBalance.playerId, playerBalance.balance);
                });
                
                console.log('üí∞ PlayerBalanceDisplay: –ë–∞–ª–∞–Ω—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
            }
        } catch (error) {
            console.error('‚ùå PlayerBalanceDisplay: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤:', error);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    handleServerUpdate(message) {
        if (message.type === 'bank_transfer') {
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞
            const transaction = message.transaction;
            if (transaction) {
                // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö
                const fromPlayer = message.players?.find(p => p.id === transaction.fromPlayerId);
                const toPlayer = message.players?.find(p => p.id === transaction.toPlayerId);
                
                if (fromPlayer) {
                    this.updatePlayerBalance(fromPlayer.id, fromPlayer.money);
                }
                if (toPlayer) {
                    this.updatePlayerBalance(toPlayer.id, toPlayer.money);
                }
            }
        } else if (message.type === 'bank_balanceUpdated') {
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            this.updatePlayerBalance(message.playerId, message.newBalance);
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
     */
    createBalanceElement(balance = 0) {
        const balanceElement = document.createElement('div');
        balanceElement.className = 'player-balance';
        balanceElement.innerHTML = `
            <span class="balance-icon">üí∞</span>
            <span class="balance-amount">$${this.formatNumber(balance)}</span>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        this.addBalanceStyles();
        
        return balanceElement;
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
     */
    addBalanceStyles() {
        if (document.getElementById('player-balance-styles')) return;
        
        const styles = document.createElement('style');
        styles.id = 'player-balance-styles';
        styles.textContent = `
            .player-balance {
                display: flex;
                align-items: center;
                gap: 6px;
                font-weight: 600;
                color: #10b981;
                font-size: 0.9rem;
                transition: all 0.3s ease;
            }
            
            .balance-icon {
                font-size: 0.8rem;
            }
            
            .balance-amount {
                font-family: 'Courier New', monospace;
            }
            
            .balance-changing {
                animation: balancePulse 0.5s ease-in-out;
            }
            
            .balance-increase {
                color: #10b981 !important;
                text-shadow: 0 0 8px rgba(16, 185, 129, 0.5);
            }
            
            .balance-decrease {
                color: #ef4444 !important;
                text-shadow: 0 0 8px rgba(239, 68, 68, 0.5);
            }
            
            @keyframes balancePulse {
                0% { transform: scale(1); }
                50% { transform: scale(1.1); }
                100% { transform: scale(1); }
            }
            
            /* –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤ */
            .player-card .player-balance,
            .player-item .player-balance {
                margin-left: auto;
                padding: 4px 8px;
                background: rgba(16, 185, 129, 0.1);
                border-radius: 6px;
                border: 1px solid rgba(16, 185, 129, 0.2);
            }
            
            .player-card:hover .player-balance,
            .player-item:hover .player-balance {
                background: rgba(16, 185, 129, 0.15);
                border-color: rgba(16, 185, 129, 0.3);
            }
        `;
        
        document.head.appendChild(styles);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
     */
    _getCurrentRoomId() {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ URL
            const urlParams = new URLSearchParams(window.location.hash.split('?')[1]);
            const roomId = urlParams.get('roomId');
            if (roomId) return roomId;
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ sessionStorage
            const roomData = sessionStorage.getItem('am_current_room');
            if (roomData) {
                const parsed = JSON.parse(roomData);
                return parsed.id || parsed.roomId;
            }
            
            return null;
        } catch (error) {
            console.error('‚ùå PlayerBalanceDisplay: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–æ–º–Ω–∞—Ç—ã:', error);
            return null;
        }
    }
    
    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
     */
    parseNumber(str) {
        if (typeof str === 'number') return str;
        const cleaned = str.replace(/[^\d.-]/g, '');
        return parseFloat(cleaned) || 0;
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
     */
    formatNumber(num) {
        return new Intl.NumberFormat('ru-RU').format(num);
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤
     */
    forceUpdate() {
        if (this.gameState) {
            const players = this.gameState.getPlayers();
            this.updateAllBalances(players);
        }
        
        if (this.currentRoomId) {
            this.loadBalancesFromServer();
        }
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ
     */
    attachBalanceToCard(playerCard, playerId, balance = 0) {
        if (!playerCard) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –±–∞–ª–∞–Ω—Å
        let balanceElement = playerCard.querySelector('.player-balance');
        if (!balanceElement) {
            balanceElement = this.createBalanceElement(balance);
            
            // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            const statusElement = playerCard.querySelector('.player-status, .status');
            if (statusElement) {
                statusElement.parentNode.insertBefore(balanceElement, statusElement.nextSibling);
            } else {
                playerCard.appendChild(balanceElement);
            }
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        playerCard.setAttribute('data-player-id', playerId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        this.updatePlayerBalance(playerId, balance);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.PlayerBalanceDisplay = PlayerBalanceDisplay;
