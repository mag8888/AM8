/**
 * ProfessionSystem v1.0.0
 * –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
 */

class ProfessionSystem {
    constructor(config = {}) {
        this.gameState = config.gameState || null;
        this.eventBus = config.eventBus || null;
        
        // –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏
        this.professions = {
            entrepreneur: {
                id: 'entrepreneur',
                name: '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å',
                title: '–í–ª–∞–¥–µ–ª–µ—Ü –±–∏–∑–Ω–µ—Å–∞',
                
                // –î–æ—Ö–æ–¥—ã
                income: {
                    salary: 10000,           // –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
                    passive: 0,              // –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
                    total: 10000             // –û–±—â–∏–π –¥–æ—Ö–æ–¥
                },
                
                // –†–∞—Å—Ö–æ–¥—ã
                expenses: {
                    taxes: {
                        amount: 1300,        // –ù–∞–ª–æ–≥–∏ 13%
                        percentage: 13,
                        canPayOff: false,    // –ù–µ–ª—å–∑—è –ø–æ–≥–∞—Å–∏—Ç—å
                        description: '–ù–∞–ª–æ–≥–∏ (13%)'
                    },
                    other: {
                        amount: 1500,        // –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
                        canPayOff: false,    // –ù–µ–ª—å–∑—è –ø–æ–≥–∞—Å–∏—Ç—å
                        description: '–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã'
                    },
                    carLoan: {
                        amount: 700,         // –ö—Ä–µ–¥–∏—Ç –Ω–∞ –∞–≤—Ç–æ
                        canPayOff: true,     // –ú–æ–∂–Ω–æ –ø–æ–≥–∞—Å–∏—Ç—å
                        payOffAmount: 14000, // –°—É–º–º–∞ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è
                        description: '–ö—Ä–µ–¥–∏—Ç –Ω–∞ –∞–≤—Ç–æ'
                    },
                    educationLoan: {
                        amount: 500,         // –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç
                        canPayOff: true,     // –ú–æ–∂–Ω–æ –ø–æ–≥–∞—Å–∏—Ç—å
                        payOffAmount: 10000, // –°—É–º–º–∞ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è
                        description: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç'
                    },
                    creditCards: {
                        amount: 1000,        // –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã
                        canPayOff: true,     // –ú–æ–∂–Ω–æ –ø–æ–≥–∞—Å–∏—Ç—å
                        payOffAmount: 20000, // –°—É–º–º–∞ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è
                        description: '–ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã'
                    },
                    mortgage: {
                        amount: 1200,        // –ò–ø–æ—Ç–µ–∫–∞ —Å—Ç—É–¥–∏—è
                        canPayOff: true,     // –ú–æ–∂–Ω–æ –ø–æ–≥–∞—Å–∏—Ç—å
                        payOffAmount: 48000, // –°—É–º–º–∞ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è
                        description: '–ò–ø–æ—Ç–µ–∫–∞ —Å—Ç—É–¥–∏—è'
                    },
                    children: {
                        amount: 0,           // –†–∞—Å—Ö–æ–¥—ã –Ω–∞ –¥–µ—Ç–µ–π
                        perChild: 500,       // –ù–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
                        maxChildren: 3,      // –ú–∞–∫—Å–∏–º—É–º –¥–µ—Ç–µ–π
                        description: '–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –¥–µ—Ç–µ–π'
                    }
                },
                
                // –ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥—ã
                totalExpenses: 6200,
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                description: '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –±–∏–∑–Ω–µ—Å–æ–º',
                icon: 'üíº'
            }
        };
        
        console.log('üíº ProfessionSystem: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø–æ ID
     */
    getProfession(professionId) {
        return this.professions[professionId] || null;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
     */
    getAllProfessions() {
        return Object.values(this.professions);
    }
    
    /**
     * –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏–≥—Ä–æ–∫–∞
     */
    calculateIncome(professionId, playerData = {}) {
        const profession = this.getProfession(professionId);
        if (!profession) return null;
        
        const income = {
            salary: profession.income.salary,
            passive: profession.income.passive,
            total: profession.income.salary + profession.income.passive
        };
        
        // –£—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã –∏–≥—Ä–æ–∫–∞
        if (playerData.extraIncome) {
            income.passive += playerData.extraIncome;
            income.total += playerData.extraIncome;
        }
        
        return income;
    }
    
    /**
     * –†–∞—Å—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–≥—Ä–æ–∫–∞
     */
    calculateExpenses(professionId, playerData = {}) {
        const profession = this.getProfession(professionId);
        if (!profession) return null;
        
        const expenses = {
            taxes: profession.expenses.taxes,
            other: profession.expenses.other,
            carLoan: profession.expenses.carLoan,
            educationLoan: profession.expenses.educationLoan,
            creditCards: profession.expenses.creditCards,
            mortgage: profession.expenses.mortgage,
            children: { ...profession.expenses.children }
        };
        
        // –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π
        if (playerData.children) {
            expenses.children.amount = Math.min(playerData.children, profession.expenses.children.maxChildren) * profession.expenses.children.perChild;
        }
        
        // –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≥–∞—à–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã
        if (playerData.paidOffLoans) {
            Object.keys(expenses).forEach(key => {
                if (key !== 'taxes' && key !== 'other' && key !== 'children' && playerData.paidOffLoans[key]) {
                    expenses[key].amount = 0;
                }
            });
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
        expenses.total = Object.values(expenses).reduce((sum, expense) => {
            return sum + (typeof expense === 'object' ? expense.amount : 0);
        }, 0);
        
        return expenses;
    }
    
    /**
     * –†–∞—Å—á–µ—Ç —á–∏—Å—Ç–æ–≥–æ –¥–æ—Ö–æ–¥–∞
     */
    calculateNetIncome(professionId, playerData = {}) {
        const income = this.calculateIncome(professionId, playerData);
        const expenses = this.calculateExpenses(professionId, playerData);
        
        if (!income || !expenses) return null;
        
        return {
            grossIncome: income.total,
            totalExpenses: expenses.total,
            netIncome: income.total - expenses.total
        };
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞
     */
    canPayOffLoan(professionId, loanType, playerMoney) {
        const profession = this.getProfession(professionId);
        if (!profession) return false;
        
        const loan = profession.expenses[loanType];
        if (!loan || !loan.canPayOff) return false;
        
        return playerMoney >= loan.payOffAmount;
    }
    
    /**
     * –ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞
     */
    payOffLoan(professionId, loanType, playerData = {}) {
        const profession = this.getProfession(professionId);
        if (!profession) return null;
        
        const loan = profession.expenses[loanType];
        if (!loan || !loan.canPayOff) return null;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
        if (playerData.money < loan.payOffAmount) {
            return { success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è' };
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–∞—à–µ–Ω–∏–∏
        return {
            success: true,
            loanType: loanType,
            payOffAmount: loan.payOffAmount,
            monthlySavings: loan.amount,
            newMonthlyExpenses: this.calculateExpenses(professionId, {
                ...playerData,
                paidOffLoans: {
                    ...(playerData.paidOffLoans || {}),
                    [loanType]: true
                }
            }).total
        };
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ—Ç—è—Ö
     */
    getChildrenInfo(professionId, playerData = {}) {
        const profession = this.getProfession(professionId);
        if (!profession) return null;
        
        const childrenCount = playerData.children || 0;
        const maxChildren = profession.expenses.children.maxChildren;
        
        return {
            current: childrenCount,
            max: maxChildren,
            canHaveMore: childrenCount < maxChildren,
            monthlyExpense: childrenCount * profession.expenses.children.perChild,
            nextChildExpense: (childrenCount + 1) * profession.expenses.children.perChild
        };
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞
     */
    addChild(professionId, playerData = {}) {
        const childrenInfo = this.getChildrenInfo(professionId, playerData);
        if (!childrenInfo || !childrenInfo.canHaveMore) {
            return { success: false, message: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π' };
        }
        
        const newChildrenCount = playerData.children + 1;
        const newExpenses = this.calculateExpenses(professionId, {
            ...playerData,
            children: newChildrenCount
        });
        
        return {
            success: true,
            newChildrenCount: newChildrenCount,
            additionalMonthlyExpense: childrenInfo.perChild,
            newTotalExpenses: newExpenses.total
        };
    }

    /**
     * –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç (—à–∞–≥ 1000, -100$ –î–ü –Ω–∞ –∫–∞–∂–¥—É—é 1000)
     */
    takeLoan(professionId, playerData = {}, amount) {
        const details = this.getProfessionDetails(professionId, playerData);
        if (!details) return { success: false, message: '–ù–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏' };
        const step = 1000;
        const normalized = Math.max(0, Math.floor((amount || 0) / step) * step);
        const maxLoan = details.loan.maxLoan;
        if (normalized <= 0) return { success: false, message: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–∞ 1000' };
        if (normalized > maxLoan) return { success: false, message: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫—Ä–µ–¥–∏—Ç–∞' };
        const newLoan = (playerData.currentLoan || 0) + normalized;
        const addedMonthlyExpense = (normalized / 1000) * 100; // 100$ –∑–∞ –∫–∞–∂–¥—É—é 1000
        const newExpenses = this.calculateExpenses(professionId, {
            ...playerData,
            currentLoan: newLoan,
            otherMonthlyAdjustments: (playerData.otherMonthlyAdjustments || 0) + addedMonthlyExpense
        });
        const newNet = this.calculateNetIncome(professionId, {
            ...playerData,
            currentLoan: newLoan,
            otherMonthlyAdjustments: (playerData.otherMonthlyAdjustments || 0) + addedMonthlyExpense
        });
        return {
            success: true,
            amount: normalized,
            newLoan,
            newMonthlyExpenses: newExpenses.total,
            newMonthlyNetIncome: newNet.netIncome
        };
    }

    /**
     * –ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ (—à–∞–≥ 1000, +100$ –î–ü –Ω–∞ –∫–∞–∂–¥—É—é 1000)
     */
    repayLoan(professionId, playerData = {}, amount) {
        const step = 1000;
        const normalized = Math.max(0, Math.floor((amount || 0) / step) * step);
        const currentLoan = playerData.currentLoan || 0;
        if (normalized <= 0) return { success: false, message: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–∞ 1000' };
        if (normalized > currentLoan) return { success: false, message: '–ë–æ–ª—å—à–µ –æ—Å—Ç–∞—Ç–∫–∞' };
        const newLoan = currentLoan - normalized;
        const decreasedMonthlyExpense = (normalized / 1000) * 100;
        const newExpenses = this.calculateExpenses(professionId, {
            ...playerData,
            currentLoan: newLoan,
            otherMonthlyAdjustments: Math.max(0, (playerData.otherMonthlyAdjustments || 0) - decreasedMonthlyExpense)
        });
        const newNet = this.calculateNetIncome(professionId, {
            ...playerData,
            currentLoan: newLoan,
            otherMonthlyAdjustments: Math.max(0, (playerData.otherMonthlyAdjustments || 0) - decreasedMonthlyExpense)
        });
        return {
            success: true,
            amount: normalized,
            newLoan,
            newMonthlyExpenses: newExpenses.total,
            newMonthlyNetIncome: newNet.netIncome
        };
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
     */
    getProfessionDetails(professionId, playerData = {}) {
        const profession = this.getProfession(professionId);
        if (!profession) return null;
        
        const income = this.calculateIncome(professionId, playerData);
        const expenses = this.calculateExpenses(professionId, playerData);
        const netIncome = this.calculateNetIncome(professionId, playerData);
        const childrenInfo = this.getChildrenInfo(professionId, playerData);
        
        return {
            profession: profession,
            income: income,
            expenses: expenses,
            netIncome: netIncome,
            // –ö—Ä–µ–¥–∏—Ç: –≤—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º –∏ —Ç–µ–∫—É—â–µ–µ
            loan: {
                maxLoan: Math.max(0, Math.floor((netIncome.netIncome) * 10 / 1000) * 1000), // –∫—Ä–∞—Ç–Ω–æ 1000
                monthlyPerThousand: 100,
                currentLoan: playerData.currentLoan || 0
            },
            children: childrenInfo,
            summary: {
                monthlyIncome: income.total,
                monthlyExpenses: expenses.total,
                monthlyNetIncome: netIncome.netIncome,
                payOffOpportunities: Object.keys(expenses).filter(key => 
                    key !== 'taxes' && key !== 'other' && key !== 'children' && expenses[key].amount > 0
                )
            }
        };
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
     */
    formatNumber(num) {
        return new Intl.NumberFormat('ru-RU').format(num);
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
     */
    formatPercentage(num) {
        return `${num}%`;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.ProfessionSystem = ProfessionSystem;
