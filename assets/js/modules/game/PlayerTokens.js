/**
 * PlayerTokens v1.0.0
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∏—à–µ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ
 */
if (typeof console !== 'undefined' && typeof console.debug === 'function') {
    console.debug('üéØ PlayerTokens: –§–∞–π–ª –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');
}

class PlayerTokens {
    constructor(config = {}) {
        this.gameState = config.gameState || null;
        this.eventBus = config.eventBus || null;
        this.outerTrackSelector = config.outerTrackSelector || '#outer-track';
        this.innerTrackSelector = config.innerTrackSelector || '#inner-track';
        this.boardLayout = config.boardLayout || this._resolveBoardLayout();
        this.logger = config.logger || window.logger || null;

        const globalConfig = typeof window !== 'undefined' ? window.config : null;
        this.debugEnabled =
            typeof config.debug === 'boolean'
                ? config.debug
                : globalConfig?.get?.('logging.playerTokensDebug', false);
        
        this.tokens = new Map(); // –•—Ä–∞–Ω–µ–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–∏—à–µ–∫
        this.animatingTokens = new Set(); // –§–∏—à–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –∞–Ω–∏–º–∏—Ä—É—é—Ç—Å—è
        this._forceUpdateTimer = null; // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ –¥–ª—è forceUpdate
        this._isForceUpdating = false; // –§–ª–∞–≥ –≤—ã–ø–æ–ª–Ω—è—é—â–µ–≥–æ—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this._pendingPositionRefresh = null;
        this.outerTrackElement = null;
        this.innerTrackElement = null;
        this.cellCenters = {
            outer: [],
            inner: []
        };
        
        this._debug('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    init() {
        this.ensureTrackElements();
        this.setupEventListeners();
        this.addStyles();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏—à–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
            this.forceUpdate();
        }, 300); // –£–º–µ–Ω—å—à–∏–ª–∏ —Å 1000ms –¥–æ 300ms
        
        this._info('PlayerTokens –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        if (!this.eventBus) {
            this._warn('EventBus –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        this.eventBus.on('game:playersUpdated', (data = {}) => {
            this._debug('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ game:playersUpdated', data);
            this.updateTokens(data.players);
        });

        this.eventBus.on('player:positionUpdated', (data = {}) => {
            this._debug('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ player:positionUpdated', data);
            if (this.animatingTokens.has(data.playerId)) {
                this._debug(`–§–∏—à–∫–∞ ${data.playerId} –∞–Ω–∏–º–∏—Ä—É–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º player:positionUpdated`);
                return;
            }
            this.updateTokenPosition(data.playerId, data.position, data.player?.isInner);
        });

        this.eventBus.on('players:positionsUpdated', (data = {}) => {
            this._debug('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ players:positionsUpdated', data);
            if (Array.isArray(data.changes)) {
                data.changes.forEach((change) => {
                    if (!change || change.position === undefined || !change.playerId) {
                        return;
                    }
                    if (this.animatingTokens.has(change.playerId)) {
                        this._debug(`–§–∏—à–∫–∞ ${change.playerId} –∞–Ω–∏–º–∏—Ä—É–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ`);
                        return;
                    }
                    const player =
                        Array.isArray(data.players) &&
                        data.players.find((p) => p && (p.id === change.playerId || p.userId === change.playerId));
                    this.updateTokenPosition(change.playerId, change.position, player?.isInner);
                });

                setTimeout(() => {
                    this.updateAllTokenPositions();
                }, 100);
            }
        });

        this.eventBus.on('game:started', () => {
            this._debug('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ game:started');
            if (this.gameState && Array.isArray(this.gameState.players)) {
                this.renderTokens(this.gameState.players);
            }
        });

        this.eventBus.on('players:updated', (data = {}) => {
            this._debug('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ players:updated', data);
            this.updateTokens(data.players);
        });

        this.eventBus.on('board:cellsPositioned', (payload = {}) => {
            this._debug('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ board:cellsPositioned');
            if (payload.outer) {
                this.cellCenters.outer = payload.outer;
            }
            if (payload.inner) {
                this.cellCenters.inner = payload.inner;
            }
            this.scheduleTokenPositionRefresh();
        });
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è —Ñ–∏—à–µ–∫
     */
    addStyles() {
        if (document.getElementById('player-tokens-styles')) {
            this._debug('–°—Ç–∏–ª–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
            return;
        }
        
        this._debug('–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ñ–∏—à–µ–∫');
        const styles = document.createElement('style');
        styles.id = 'player-tokens-styles';
        styles.textContent = `
            .player-token {
                position: absolute;
                width: 32px;
                height: 32px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 1.4rem;
                font-weight: bold;
                border: 3px solid rgba(255, 255, 255, 0.9);
                box-shadow: 0 4px 16px rgba(0, 0, 0, 0.5), 0 0 0 2px rgba(255, 255, 255, 0.2);
                transition: all 0.3s ease;
                z-index: 2000;
                pointer-events: none;
                backdrop-filter: blur(5px);
                transform: translate3d(0, 0, 0);
                will-change: transform, left, top;
            }
            
            .player-token:hover {
                transform: scale(1.1);
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
            }
            
            .player-token.outer {
                background: linear-gradient(135deg, #3b82f6, #2563eb);
                color: white;
            }
            
            .player-token.inner {
                background: linear-gradient(135deg, #10b981, #059669);
                color: white;
            }
            
            .player-token.multiple {
                /* –°—Ç–∏–ª–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∏—à–µ–∫ –Ω–∞ –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ */
            }
            
            /* –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–∏—à–∫–∏ */
            @keyframes tokenAppear {
                from {
                    opacity: 0;
                    transform: scale(0);
                }
                to {
                    opacity: 1;
                    transform: scale(1);
                }
            }
            
            .player-token.appearing {
                animation: tokenAppear 0.3s ease-out;
            }
            
            /* –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è */
            @keyframes tokenMove {
                from {
                    transform: scale(1);
                }
                50% {
                    transform: scale(1.2);
                }
                to {
                    transform: scale(1);
                }
            }
            
            .player-token.moving {
                animation: tokenMove 0.5s ease-in-out;
            }
        `;
        
        document.head.appendChild(styles);
    }

    /**
     * –†–∞–∑—Ä–µ—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä BoardLayout, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
     * @returns {*|null}
     * @private
     */
    _resolveBoardLayout() {
        try {
            if (this.boardLayout) {
                return this.boardLayout;
            }
            if (window?.app?.getModule) {
                const moduleInstance = window.app.getModule('boardLayout');
                if (moduleInstance) {
                    return moduleInstance;
                }
            }
            if (window.boardLayout) {
                return window.boardLayout;
            }
            if (window.BoardLayoutInstance) {
                return window.BoardLayoutInstance;
            }
        } catch (error) {
            this._debug('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å BoardLayout –∏–∑ window', error);
        }
        return null;
    }

    ensureTrackElements() {
        if (!this.outerTrackElement) {
            this.outerTrackElement = document.querySelector(this.outerTrackSelector);
        }
        if (!this.innerTrackElement) {
            this.innerTrackElement = document.querySelector(this.innerTrackSelector);
        }
    }

    getTrackElement(isInner) {
        this.ensureTrackElements();
        return isInner ? this.innerTrackElement : this.outerTrackElement;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –∫–ª–µ—Ç–∫–∏.
     * @param {number} position
     * @param {boolean} isInner
     * @returns {{x:number,y:number,width:number,height:number}|null}
     */
    getCellCenter(position, isInner) {
        const boardLayout = this.boardLayout || this._resolveBoardLayout();
        if (boardLayout && typeof boardLayout.getCellCenter === 'function') {
            const center = boardLayout.getCellCenter(position, isInner);
            if (center && Number.isFinite(center.x) && Number.isFinite(center.y)) {
                return center;
            }
        }

        const cache = isInner ? this.cellCenters.inner : this.cellCenters.outer;
        const cached = cache?.[position];
        if (cached && Number.isFinite(cached.x) && Number.isFinite(cached.y)) {
            return cached;
        }

        const trackElement = this.getTrackElement(isInner);
        if (!trackElement) {
            return null;
        }

        const cell = trackElement.querySelector(`[data-position="${position}"]`);
        if (!cell || typeof cell.getBoundingClientRect !== 'function') {
            return null;
        }

        const trackRect = trackElement.getBoundingClientRect();
        const cellRect = cell.getBoundingClientRect();
        return {
            x: cellRect.left - trackRect.left + cellRect.width / 2,
            y: cellRect.top - trackRect.top + cellRect.height / 2,
            width: cellRect.width,
            height: cellRect.height
        };
    }

    getCellBaseCoordinates(position, isInner) {
        const center = this.getCellCenter(position, isInner);
        if (!center) {
            return null;
        }
        return {
            x: center.x,
            y: center.y
        };
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∏—à–µ–∫
     */
    clearTokens() {
        this.tokens.forEach((token) => {
            if (token.parentNode) {
                token.parentNode.removeChild(token);
            }
        });
        this.tokens.clear();
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ GameStateManager
     */
    getPlayers() {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ gameState
        if (this.gameState && this.gameState.players) {
            return this.gameState.players;
        }
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ GameStateManager
        if (window.app && window.app.getModule) {
            const gameStateManager = window.app.getModule('gameStateManager');
            if (gameStateManager && typeof gameStateManager.getState === 'function') {
                try {
                    const state = gameStateManager.getState();
                    if (state && state.players && Array.isArray(state.players)) {
                        this._debug('–ü–æ–ª—É—á–µ–Ω—ã –∏–≥—Ä–æ–∫–∏ –∏–∑ GameStateManager', state.players.length);
                        return state.players;
                    }
                } catch (error) {
                    this._warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ GameStateManager', error);
                }
            }
        }
        
        this._debug('–ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
        return [];
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä —Ñ–∏—à–µ–∫ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
     */
    renderTokens(players) {
        const normalized = this.normalizePlayers(players?.length ? players : this.getPlayers());
        if (!normalized.length) {
            this.clearTokens();
            return;
        }
        this.updateTokens(normalized);
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–∞ —Ñ–∏—à–∫–∏
     */
    createPlayerToken(player, index, totalPlayers) {
        const token = document.createElement('div');
        token.className = 'player-token';
        token.classList.add(player.isInner ? 'inner' : 'outer');
        token.classList.toggle('inner-track', !!player.isInner);
        token.classList.toggle('outer-track', !player.isInner);
        token.dataset.playerId = player.id;
        token.dataset.playerName = player.username;
        token.setAttribute('data-position', player.position || 0); // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –ø–æ–∑–∏—Ü–∏–∏
        token.dataset.isInner = String(Boolean(player.isInner));
        token.style.zIndex = '2000'; /* –§–∏—à–∫–∏ –ø–æ–≤–µ—Ä—Ö */
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∫–æ–Ω–∫—É —Ñ–∏—à–∫–∏ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
        const tokenIcon = this.getTokenIcon(player.token);
        token.textContent = tokenIcon;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–æ–∫–µ –≤ title
        token.title = `${player.username} - $${player.money || 0}`;
        
        return token;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —Ç–æ–∫–µ–Ω–∞
     */
    getTokenIcon(tokenId) {
        const tokenIcons = {
            'lion': 'ü¶Å',
            'eagle': 'ü¶Ö', 
            'fox': 'ü¶ä',
            'bear': 'üêª',
            'tiger': 'üêÖ',
            'wolf': 'üê∫',
            'elephant': 'üêò',
            'shark': 'ü¶à',
            'owl': 'ü¶â',
            'dolphin': 'üê¨'
        };
        
        const icon = tokenIcons[tokenId] || 'üéØ';
        return icon;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏–≥—Ä–æ–∫–∞
     */
    getDefaultTokenForPlayer(player, index) {
        // –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ —É–∂–µ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (player.token) {
            return player.token;
        }
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ localStorage –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–ª –µ–≥–æ
        const savedToken = localStorage.getItem(`player_token_${player.username || player.id}`);
        if (savedToken) {
            return savedToken;
        }
        
        // –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const defaultTokens = ['lion', 'eagle', 'fox', 'bear', 'tiger', 'wolf', 'elephant', 'shark', 'owl', 'dolphin'];
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –∏–≥—Ä–æ–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞
        const tokenIndex = index % defaultTokens.length;
        return defaultTokens[tokenIndex];
    }
    
    /**
     * –†–∞—Å—á–µ—Ç —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∏—à–µ–∫
     */
    calculateOffset(index, totalPlayers) {
        if (totalPlayers === 1) {
            return { x: 0, y: 0 };
        }
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–¥–≤–∏–≥–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∏—à–µ–∫
        const offsetConfigs = {
            2: [
                { x: -8, y: 0 },
                { x: 8, y: 0 }
            ],
            3: [
                { x: -12, y: -6 },
                { x: 0, y: 6 },
                { x: 12, y: -6 }
            ],
            4: [
                { x: -12, y: -8 },
                { x: 12, y: -8 },
                { x: -12, y: 8 },
                { x: 12, y: 8 }
            ]
        };
        
        const config = offsetConfigs[totalPlayers] || offsetConfigs[4];
        const offset = config[index] || { x: 0, y: 0 };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∏—à–µ–∫
        if (totalPlayers > 1) {
            this._debug(`–§–∏—à–∫–∞ ${index + 1}/${totalPlayers} –ø–æ–ª—É—á–∞–µ—Ç —Å–¥–≤–∏–≥`, offset);
        }
        
        return offset;
    }

    _collectTokensOnPosition(position, isInner) {
        const result = [];
        const targetInner = Boolean(isInner);
        this.tokens.forEach((token, playerId) => {
            const tokenPosition = parseInt(token.getAttribute('data-position')) || 0;
            const tokenIsInner = token.dataset?.isInner
                ? token.dataset.isInner === 'true'
                : token.classList.contains('inner-track') || token.classList.contains('inner');
            if (tokenPosition === position && tokenIsInner === targetInner) {
                result.push({ token, playerId });
            }
        });
        return result;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ñ–∏—à–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
     */
    updateTokenPosition(playerId, newPosition, isInner) {
        this._debug('updateTokenPosition –≤—ã–∑–≤–∞–Ω', {
            playerId,
            newPosition,
            isAnimating: this.animatingTokens.has(playerId)
        });
        
        const token = this.tokens.get(playerId);
        if (!token) {
            this._warn('–§–∏—à–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞', { playerId });
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–π —Ñ–∏—à–∫–∏
        if (this.animatingTokens.has(playerId)) {
            this._debug('–§–∏—à–∫–∞ —É–∂–µ –¥–≤–∏–∂–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤', { playerId });
            return;
        }

        // –ó–∞—â–∏—Ç–∞ –æ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –ø—Ä–∏—Ö–æ–¥—è—â–∏—Ö —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è
        const nowTs = Date.now();
        const lastUpdateTs = parseInt(token.getAttribute('data-update-ts')) || 0;
        const currentPositionTsWindowMs = 1200; // –æ–∫–Ω–æ –∑–∞—â–∏—Ç—ã –æ—Ç –æ—Ç–∫–∞—Ç–∞
        const currentPosition = parseInt(token.getAttribute('data-position')) || 0;
        if (lastUpdateTs && (nowTs - lastUpdateTs) < currentPositionTsWindowMs) {
            const maxPosition = isInner ? 23 : 43;
            const isWrapAround = (currentPosition > newPosition) && ((currentPosition - newPosition) > 6) && (currentPosition === maxPosition || newPosition === 0);
            if (!isWrapAround && newPosition < currentPosition && (currentPosition - newPosition) <= 6) {
                this._debug('–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π –æ—Ç–∫–∞—Ç –ø–æ–∑–∏—Ü–∏–∏ (—É—Å—Ç–∞—Ä–µ–≤—à–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)', {
                    playerId, currentPosition, newPosition, sinceMs: nowTs - lastUpdateTs
                });
                return;
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ data-position
        // (–ø–æ–≤–µ—Ä—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π currentPosition, –æ–±—ä—è–≤–ª–µ–Ω–Ω–æ–π –≤—ã—à–µ)
        
        // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        if (currentPosition === newPosition) {
            this.moveTokenToPosition(token, playerId, newPosition, isInner);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –ø–æ–∑–∏—Ü–∏—è—Ö –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è (–º–∞–∫—Å–∏–º—É–º 6 —à–∞–≥–æ–≤)
        const positionDiff = Math.abs(newPosition - currentPosition);
        const maxDiff = 6;
        
        if (positionDiff > maxDiff) {
            this._debug('–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ', {
                playerId,
                positionDiff
            });
            this.moveTokenToPosition(token, playerId, newPosition, isInner);
            return;
        }
        
        this._debug('–ù–∞—á–∏–Ω–∞–µ–º –ø–æ—à–∞–≥–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Ñ–∏—à–∫–∏', {
            playerId,
            from: currentPosition,
            to: newPosition
        });
        this.moveTokenStepByStep(token, playerId, currentPosition, newPosition, isInner);
    }
    
    /**
     * –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∏—à–∫–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é (–±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏)
     */
    moveTokenToPosition(token, playerId, position, isInner) {
        const baseCoords = this.getCellBaseCoordinates(position, isInner);
        if (!baseCoords) {
            this._warn('–ö–ª–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏', { position, isInner });
            return;
        }

        token.setAttribute('data-position', position);
        token.setAttribute('data-update-ts', String(Date.now()));
        token.dataset.isInner = String(Boolean(isInner));
        token.classList.toggle('inner', !!isInner);
        token.classList.toggle('outer', !isInner);
        token.classList.toggle('inner-track', !!isInner);
        token.classList.toggle('outer-track', !isInner);

        const tokensOnPosition = this._collectTokensOnPosition(position, isInner);
        const total = Math.max(tokensOnPosition.length, 1);
        const offset = this.getTokenOffset(playerId, position, isInner, tokensOnPosition);
        this.positionTokenElement(token, baseCoords, offset, total);
        this._debug(`–§–∏—à–∫–∞ ${playerId} –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${position}`, { offset });

        // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–¥–≤–∏–≥ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∏—à–µ–∫
        this.handleTokenCollisions(position, isInner);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π —Ñ–∏—à–µ–∫ –Ω–∞ –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ
     */
    handleTokenCollisions(position, isInner) {
        const tokensOnPosition = this._collectTokensOnPosition(position, isInner);
        if (tokensOnPosition.length > 1) {
            this._debug(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${tokensOnPosition.length} —Ñ–∏—à–µ–∫ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${position}, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–¥–≤–∏–≥`);
            this.arrangeTokensOnPosition(tokensOnPosition, position, isInner);
        }
    }
    
    /**
     * –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏—à–µ–∫ –Ω–∞ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å —Å–¥–≤–∏–≥–æ–º
     */
    arrangeTokensOnPosition(tokensOnPosition, position, isInner) {
        const baseCoords = this.getCellBaseCoordinates(position, isInner);
        if (!baseCoords) {
            this._debug('arrangeTokensOnPosition: –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–ª–µ—Ç–∫–∏', { position, isInner });
            return;
        }

        const total = tokensOnPosition.length || 1;

        tokensOnPosition.forEach(({ token, playerId }, index) => {
            const offset = this.calculateOffset(index, total);
            this.positionTokenElement(token, baseCoords, offset, total);
            this._debug(`–§–∏—à–∫–∞ ${playerId} —Å–¥–≤–∏–Ω—É—Ç–∞`, { position, offset });
        });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–≤–∏–≥–∞ –¥–ª—è —Ñ–∏—à–∫–∏
     */
    getTokenOffset(playerId, position, isInner, precomputedTokens = null) {
        const tokensOnPosition = precomputedTokens || this._collectTokensOnPosition(position, isInner);
        
        // –ï—Å–ª–∏ —Ñ–∏—à–∫–∞ –æ–¥–Ω–∞, —Å–¥–≤–∏–≥ –Ω–µ –Ω—É–∂–µ–Ω
        if (tokensOnPosition.length <= 1) {
            return { x: 0, y: 0 };
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π —Ñ–∏—à–∫–∏
        const currentIndex = tokensOnPosition.findIndex(t => t.playerId === playerId);
        if (currentIndex === -1) {
            return { x: 0, y: 0 };
        }
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–¥–≤–∏–≥–∞
        const offsetConfigs = {
            2: [
                { x: -8, y: 0 },
                { x: 8, y: 0 }
            ],
            3: [
                { x: -12, y: -6 },
                { x: 0, y: 6 },
                { x: 12, y: -6 }
            ],
            4: [
                { x: -12, y: -8 },
                { x: 12, y: -8 },
                { x: -12, y: 8 },
                { x: 12, y: 8 }
            ]
        };
        
        const config = offsetConfigs[tokensOnPosition.length] || offsetConfigs[4];
        return config[currentIndex] || { x: 0, y: 0 };
    }
    
    /**
     * –ü–æ—à–∞–≥–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Ñ–∏—à–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
     */
    moveTokenStepByStep(token, playerId, fromPosition, toPosition, isInner) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–π —Ñ–∏—à–∫–∏
        if (this.animatingTokens.has(playerId)) {
            this._debug('–§–∏—à–∫–∞ —É–∂–µ –¥–≤–∏–∂–µ—Ç—Å—è, –æ—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é', { playerId });
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏—à–∫—É –≤ —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–∏—Ä—É—é—â–∏—Ö—Å—è
        this.animatingTokens.add(playerId);

        const maxPosition = isInner ? 23 : 43; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ç—Ä–µ–∫–æ–≤
        const steps = [];
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
        let stepsToMove = toPosition - fromPosition;
        if (stepsToMove < 0) {
            // –ï—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 0 (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å 40 –Ω–∞ 2)
            stepsToMove = (maxPosition + 1) - fromPosition + toPosition;
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (1-6)
        const maxSteps = 6;
        const actualSteps = Math.min(stepsToMove, maxSteps);
        
        this._debug(`–î–≤–∏–∂–µ–Ω–∏–µ —Å ${fromPosition} –Ω–∞ ${toPosition}`, { actualSteps });
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∞–≥–∏ –¥–≤–∏–∂–µ–Ω–∏—è
        let currentPos = fromPosition;
        for (let i = 0; i < actualSteps; i++) {
            currentPos = (currentPos + 1) % (maxPosition + 1);
            steps.push(currentPos);
        }
        
        this._debug(`–®–∞–≥–∏ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è ${playerId}`, steps);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        let stepIndex = 0;
        const moveToNextStep = () => {
            if (stepIndex >= steps.length) {
                this._debug(`–î–≤–∏–∂–µ–Ω–∏–µ —Ñ–∏—à–∫–∏ ${playerId} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
                this.animatingTokens.delete(playerId);
                return;
            }
            
            const stepPosition = steps[stepIndex];
            const baseCoords = this.getCellBaseCoordinates(stepPosition, isInner);

            if (!baseCoords) {
                this._warn('–ö–ª–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è', { stepPosition, isInner });
                stepIndex += 1;
                setTimeout(moveToNextStep, 100);
                return;
            }

            const currentX = parseFloat(token.style.left) || 0;
            const currentY = parseFloat(token.style.top) || 0;

            token.setAttribute('data-position', stepPosition);
            token.setAttribute('data-update-ts', String(Date.now()));
            token.dataset.isInner = String(Boolean(isInner));

            let tokensOnPosition = this._collectTokensOnPosition(stepPosition, isInner);
            if (!tokensOnPosition.some((entry) => entry.playerId === playerId)) {
                tokensOnPosition = [...tokensOnPosition, { token, playerId }];
            }
            const total = Math.max(tokensOnPosition.length, 1);
            const offset = this.getTokenOffset(playerId, stepPosition, isInner, tokensOnPosition);
            const targetX = baseCoords.x + offset.x - 16;
            const targetY = baseCoords.y + offset.y - 16;

            this.animateTokenMovement(token, currentX, currentY, targetX, targetY);

            this._debug(`–®–∞–≥ ${stepIndex + 1}/${steps.length}`, {
                stepPosition,
                offset
            });

            this.handleTokenCollisions(stepPosition, isInner);

            stepIndex += 1;
            setTimeout(moveToNextStep, 200);
        };
        
        // –ù–∞—á–∏–Ω–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        moveToNextStep();
    }
    
    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ñ–∏—à–∫–∏
     */
    animateTokenMovement(token, fromX, fromY, toX, toY) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        token.classList.add('moving');
        
        // –°–æ–∑–¥–∞–µ–º keyframes –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        const keyframes = [
            { 
                left: `${fromX}px`, 
                top: `${fromY}px`,
                transform: 'scale(1)'
            },
            { 
                left: `${(fromX + toX) / 2}px`, 
                top: `${(fromY + toY) / 2}px`,
                transform: 'scale(1.2)'
            },
            { 
                left: `${toX}px`, 
                top: `${toY}px`,
                transform: 'scale(1)'
            }
        ];
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        token.animate(keyframes, {
            duration: 800,
            easing: 'cubic-bezier(0.4, 0, 0.2, 1)',
            fill: 'forwards'
        }).onfinish = () => {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            token.style.left = `${toX}px`;
            token.style.top = `${toY}px`;
            
            // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏
            token.classList.remove('moving');
        };
    }
    
    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–∏—à–∫–∏
     */
    animateTokenAppearance(token) {
        const keyframes = [
            { 
                opacity: '0',
                transform: 'scale(0) rotate(0deg)'
            },
            { 
                opacity: '1',
                transform: 'scale(1.2) rotate(180deg)'
            },
            { 
                opacity: '1',
                transform: 'scale(1) rotate(360deg)'
            }
        ];
        
        token.animate(keyframes, {
            duration: 600,
            easing: 'cubic-bezier(0.68, -0.55, 0.265, 1.55)',
            fill: 'forwards'
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏—à–µ–∫
     */
    updateTokens(players) {
        const normalized = this.normalizePlayers(players);
        if (!normalized.length) {
            this.clearTokens();
            return;
        }
        
        const grouped = this.groupPlayersByPosition(normalized);
        const processed = new Set();
        
        grouped.forEach(({ position, isInner, players: playersAtPosition }) => {
            const trackElement = this.getTrackElement(isInner);
            if (!trackElement) {
                this._warn(`–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${isInner ? this.innerTrackSelector : this.outerTrackSelector}`);
                return;
            }

            const baseCoords = this.getCellBaseCoordinates(position, isInner);
            if (!baseCoords) {
                this._debug('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–∫–∏', { position, isInner });
                return;
            }
            
            playersAtPosition.forEach((player, index) => {
                const token = this.ensureToken(player, index, playersAtPosition.length, trackElement);
                const offset = this.calculateOffset(index, playersAtPosition.length);
                this.positionTokenElement(token, baseCoords, offset, playersAtPosition.length);
                processed.add(player.id);
            });
        });
        
        this.tokens.forEach((token, playerId) => {
            if (!processed.has(playerId)) {
                if (token.parentNode) {
                    token.parentNode.removeChild(token);
                }
                this.tokens.delete(playerId);
            }
        });
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏—à–µ–∫ –∏–∑ GameState
     */
    forceUpdate() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if (this._isForceUpdating || this._forceUpdateTimer) {
            this._debug('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º forceUpdate - —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ', {
                isForceUpdating: this._isForceUpdating
            });
            return;
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const stack = new Error().stack;
        const caller = stack ? stack.split('\n')[2]?.trim() : 'unknown';
        this._debug('forceUpdate –≤—ã–∑–≤–∞–Ω', caller);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã
        this._isForceUpdating = true;
        
        // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        this._forceUpdateTimer = setTimeout(() => {
            this._performForceUpdate();
            this._forceUpdateTimer = null;
            // –§–ª–∞–≥ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω –≤ _performForceUpdate –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        }, 150); // –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ 150–º—Å –¥–ª—è –ª—É—á—à–µ–π –∑–∞—â–∏—Ç—ã
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏—à–µ–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º GameStateManager
     */
    forceUpdateFromGameState() {
        this._debug('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ GameStateManager');
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ GameStateManager
        if (window.app && window.app.getModule) {
            const gameStateManager = window.app.getModule('gameStateManager');
            if (gameStateManager && typeof gameStateManager.getState === 'function') {
                const state = gameStateManager.getState();
                if (state && state.players && state.players.length > 0) {
                    this._debug('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ GameStateManager, –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏—à–∫–∏', state.players.length);
                    this.updateTokens(state.players);
                    return;
                }
            }
        }
        
        // –ï—Å–ª–∏ GameStateManager –Ω–µ –¥–∞–ª –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π forceUpdate
        this.forceUpdate();
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏—à–µ–∫ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
     */
    forceCreateTokens() {
        this._info('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏—à–µ–∫');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
        const players = this.getPlayers();
        if (!players || players.length === 0) {
            this._warn('–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏—à–µ–∫');
            return;
        }
        
        this._info('–°–æ–∑–¥–∞–µ–º —Ñ–∏—à–∫–∏ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤', players.length);
        
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∏—à–∫–∏
        this.clearTokens();
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–∏—à–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        this.renderTokens(players);
    }
    
    /**
     * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    _performForceUpdate() {
        // –§–ª–∞–≥ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ forceUpdate(), –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–∫—É
        try {
            this._debug('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏—à–µ–∫');
            const players = this.getPlayers();
            
            if (players && players.length > 0) {
                this._debug('–û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏—à–∫–∏ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤', players.length);
                this.updateTokens(players);
            } else {
                this._debug('–ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
                
                // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ GameStateManager –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                if (window.app && window.app.getModule) {
                    const gameStateManager = window.app.getModule('gameStateManager');
                    if (gameStateManager && typeof gameStateManager.forceUpdate === 'function') {
                        this._debug('–ó–∞–ø—É—Å–∫–∞–µ–º forceUpdate GameStateManager');
                        gameStateManager.forceUpdate();
                        
                        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                        setTimeout(() => {
                            const updatedPlayers = this.getPlayers();
                            if (updatedPlayers && updatedPlayers.length > 0) {
                                this._debug('–§–∏—à–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ forceUpdate', updatedPlayers.length);
                                this.updateTokens(updatedPlayers);
                            }
                        }, 500);
                    }
                }
            }
        } finally {
            // –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            setTimeout(() => {
                this._isForceUpdating = false;
            }, 50); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –≤—Å–µ—Ö —Ñ–∏—à–µ–∫ —Å —É—á–µ—Ç–æ–º –∫–æ–ª–ª–∏–∑–∏–π
     */
    scheduleTokenPositionRefresh() {
        const raf = typeof window !== 'undefined' ? window.requestAnimationFrame : null;
        if (typeof raf !== 'function') {
            this.updateAllTokenPositions();
            return;
        }
        if (this._pendingPositionRefresh) {
            cancelAnimationFrame(this._pendingPositionRefresh);
        }
        this._pendingPositionRefresh = raf(() => {
            this._pendingPositionRefresh = null;
            this.updateAllTokenPositions();
        });
    }

    updateAllTokenPositions() {
        this._debug('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π —Ñ–∏—à–µ–∫ —Å —É—á–µ—Ç–æ–º –∫–æ–ª–ª–∏–∑–∏–π');
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∏—à–∫–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
        const positionGroups = new Map();
        
        this.tokens.forEach((token, playerId) => {
            const position = parseInt(token.getAttribute('data-position')) || 0;
            const isInner = token.classList.contains('inner-track');
            const key = `${position}-${isInner}`;
            
            if (!positionGroups.has(key)) {
                positionGroups.set(key, { position, isInner, tokens: [] });
            }
            
            positionGroups.get(key).tokens.push({ token, playerId });
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
        positionGroups.forEach(({ position, isInner, tokens }) => {
            if (!tokens.length) {
                return;
            }
            const baseCoords = this.getCellBaseCoordinates(position, isInner);
            if (!baseCoords) {
                this._debug('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤ ‚Äî –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–ª–µ—Ç–∫–∏', { position, isInner });
                return;
            }
            const total = tokens.length;
            tokens.forEach(({ token, playerId }, index) => {
                const offset = this.calculateOffset(index, total);
                this.positionTokenElement(token, baseCoords, offset, total);
                this._debug(`–§–∏—à–∫–∞ ${playerId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏`, {
                    position,
                    offset
                });
            });
        });
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã, –ø–æ–∑–∏—Ü–∏–∏)
     */
    normalizePlayers(players = []) {
        const result = [];
        const seen = new Set();
        const source = Array.isArray(players) ? players : [];
        
        source.forEach((player, idx) => {
            if (!player) {
                return;
            }
            const key = player.id || player.userId || player.username || `player_${idx}`;
            if (seen.has(key)) {
                return;
            }
            seen.add(key);
            result.push({
                ...player,
                id: player.id || player.userId || key,
                position: Number(player.position) || 0,
                isInner: Boolean(player.isInner),
                token: player.token || this.getDefaultTokenForPlayer(player, idx)
            });
        });
        
        return result;
    }

    /**
     * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ç—Ä–µ–∫—É
     */
    groupPlayersByPosition(players) {
        const groups = new Map();
        players.forEach(player => {
            const groupKey = `${player.position}|${player.isInner ? 'inner' : 'outer'}`;
            if (!groups.has(groupKey)) {
                groups.set(groupKey, {
                    position: player.position,
                    isInner: player.isInner,
                    players: []
                });
            }
            groups.get(groupKey).players.push(player);
        });
        return groups;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∏—à–∫—É –∏–≥—Ä–æ–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DOM-—ç–ª–µ–º–µ–Ω—Ç
     */
    ensureToken(player, index, totalPlayers, trackElement) {
        let token = this.tokens.get(player.id);
        if (!token) {
            token = this.createPlayerToken(player, index, totalPlayers);
            trackElement.appendChild(token);
            this.tokens.set(player.id, token);
            this.animateTokenAppearance(token);
        } else {
            token.dataset.position = player.position;
            token.dataset.playerName = player.username;
             token.dataset.isInner = String(Boolean(player.isInner));
            token.classList.toggle('inner', !!player.isInner);
            token.classList.toggle('outer', !player.isInner);
            token.classList.toggle('inner-track', !!player.isInner);
            token.classList.toggle('outer-track', !player.isInner);
            token.textContent = this.getTokenIcon(player.token);
            token.title = `${player.username} - $${player.money || 0}`;
        }
        return token;
    }

    /**
     * –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏—à–∫–∏ —Å —É—á—ë—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è
     */
    positionTokenElement(token, baseCoords, offset, totalPlayers = 1) {
        if (!token) return;
        const halfSize = 16; // –ø–æ–ª–æ–≤–∏–Ω–∞ —à–∏—Ä–∏–Ω—ã/–≤—ã—Å–æ—Ç—ã —Ç–æ–∫–µ–Ω–∞
        token.style.left = `${baseCoords.x + offset.x - halfSize}px`;
        token.style.top = `${baseCoords.y + offset.y - halfSize}px`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∏—à–µ–∫
        if (totalPlayers > 1) {
            token.style.zIndex = 2000 + Math.abs(offset.x + offset.y); /* –§–∏—à–∫–∏ –ø–æ–≤–µ—Ä—Ö */
            token.style.boxShadow = '0 0 8px rgba(255, 255, 255, 0.4)';
            token.style.border = '2px solid rgba(255, 255, 255, 0.6)';
        } else {
            token.style.zIndex = '2000'; /* –ë–∞–∑–æ–≤—ã–π z-index */
            token.style.boxShadow = '';
            token.style.border = '';
        }
    }

    _log(level, message, meta) {
        const logger = this.logger;
        if (logger && typeof logger[level] === 'function') {
            try {
                logger[level](message, meta ?? null, 'PlayerTokens');
                return;
            } catch (error) {
                console.warn('[PlayerTokens] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ logger', error);
            }
        }
        const consoleFn = console[level] || console.log;
        if (meta !== undefined) {
            consoleFn(`[PlayerTokens] ${message}`, meta);
        } else {
            consoleFn(`[PlayerTokens] ${message}`);
        }
    }

    _debug(message, meta) {
        if (!this.debugEnabled) {
            return;
        }
        this._log('debug', message, meta);
    }

    _info(message, meta) {
        this._log('info', message, meta);
    }

    _warn(message, meta) {
        this._log('warn', message, meta);
    }

    _error(message, meta) {
        this._log('error', message, meta);
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        if (this._forceUpdateTimer) {
            clearTimeout(this._forceUpdateTimer);
            this._forceUpdateTimer = null;
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this._isForceUpdating = false;
        
        // –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        this.tokens.clear();
        this.animatingTokens.clear();
        
        this._debug('–†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã');
    }
}

if (typeof console !== 'undefined' && typeof console.debug === 'function') {
    console.debug('üéØ PlayerTokens: –ö–ª–∞—Å—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ window...');
}
window.PlayerTokens = PlayerTokens;
if (typeof console !== 'undefined' && typeof console.debug === 'function') {
    console.debug('üéØ PlayerTokens: –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, window.PlayerTokens =', !!window.PlayerTokens);
}
