/**
 * PlayerTokens v1.0.0
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∏—à–µ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ
 */

class PlayerTokens {
    constructor(config = {}) {
        this.gameState = config.gameState || null;
        this.eventBus = config.eventBus || null;
        this.outerTrackSelector = config.outerTrackSelector || '#outer-track';
        this.innerTrackSelector = config.innerTrackSelector || '#inner-track';
        
        this.tokens = new Map(); // –•—Ä–∞–Ω–µ–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–∏—à–µ–∫
        
        console.log('üéØ PlayerTokens: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    init() {
        this.setupEventListeners();
        this.addStyles();
        
        console.log('‚úÖ PlayerTokens: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        if (this.eventBus) {
            this.eventBus.on('game:playersUpdated', (data) => {
                this.updateTokens(data.players);
            });
            
            this.eventBus.on('player:positionUpdated', (data) => {
                this.updateTokenPosition(data.playerId, data.position, data.player.isInner);
            });
            
            this.eventBus.on('game:playersUpdated', (data) => {
                this.clearTokens();
                this.renderTokens(data.players);
            });
        }
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è —Ñ–∏—à–µ–∫
     */
    addStyles() {
        if (document.getElementById('player-tokens-styles')) return;
        
        const styles = document.createElement('style');
        styles.id = 'player-tokens-styles';
        styles.textContent = `
            .player-token {
                position: absolute;
                width: 24px;
                height: 24px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 0.8rem;
                font-weight: 600;
                border: 2px solid rgba(255, 255, 255, 0.8);
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
                transition: all 0.3s ease;
                z-index: 100;
                pointer-events: none;
            }
            
            .player-token:hover {
                transform: scale(1.1);
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
            }
            
            .player-token.outer {
                background: linear-gradient(135deg, #3b82f6, #2563eb);
                color: white;
            }
            
            .player-token.inner {
                background: linear-gradient(135deg, #10b981, #059669);
                color: white;
            }
            
            .player-token.multiple {
                /* –°—Ç–∏–ª–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∏—à–µ–∫ –Ω–∞ –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ */
            }
            
            /* –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–∏—à–∫–∏ */
            @keyframes tokenAppear {
                from {
                    opacity: 0;
                    transform: scale(0);
                }
                to {
                    opacity: 1;
                    transform: scale(1);
                }
            }
            
            .player-token.appearing {
                animation: tokenAppear 0.3s ease-out;
            }
            
            /* –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è */
            @keyframes tokenMove {
                from {
                    transform: scale(1);
                }
                50% {
                    transform: scale(1.2);
                }
                to {
                    transform: scale(1);
                }
            }
            
            .player-token.moving {
                animation: tokenMove 0.5s ease-in-out;
            }
        `;
        
        document.head.appendChild(styles);
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∏—à–µ–∫
     */
    clearTokens() {
        this.tokens.forEach((token) => {
            if (token.parentNode) {
                token.parentNode.removeChild(token);
            }
        });
        this.tokens.clear();
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä —Ñ–∏—à–µ–∫ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
     */
    renderTokens(players) {
        if (!players || players.length === 0) return;
        
        console.log('üéØ PlayerTokens: –†–µ–Ω–¥–µ—Ä —Ñ–∏—à–µ–∫ –¥–ª—è', players.length, '–∏–≥—Ä–æ–∫–æ–≤');
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–º–µ—â–µ–Ω–∏—è
        const positionGroups = new Map();
        
        players.forEach((player, index) => {
            const position = player.position || 0;
            const isInner = player.isInner || false;
            
            if (!positionGroups.has(`${position}-${isInner}`)) {
                positionGroups.set(`${position}-${isInner}`, []);
            }
            positionGroups.get(`${position}-${isInner}`).push(player);
        });
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–∏—à–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
        positionGroups.forEach((playersAtPosition, positionKey) => {
            const [position, isInner] = positionKey.split('-');
            this.createTokensAtPosition(playersAtPosition, parseInt(position), isInner === 'true');
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏—à–µ–∫ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
     */
    createTokensAtPosition(players, position, isInner) {
        const trackSelector = isInner ? this.innerTrackSelector : this.outerTrackSelector;
        const trackElement = document.querySelector(trackSelector);
        
        if (!trackElement) {
            console.warn('‚ö†Ô∏è PlayerTokens: –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω:', trackSelector);
            return;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–ª–µ—Ç–∫—É –ø–æ –ø–æ–∑–∏—Ü–∏–∏
        const cell = trackElement.querySelector(`[data-position="${position}"]`);
        if (!cell) {
            console.warn('‚ö†Ô∏è PlayerTokens: –ö–ª–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏:', position);
            return;
        }
        
        const cellRect = cell.getBoundingClientRect();
        const trackRect = trackElement.getBoundingClientRect();
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é (—Ü–µ–Ω—Ç—Ä –∫–ª–µ—Ç–∫–∏)
        const baseX = cellRect.left - trackRect.left + cellRect.width / 2;
        const baseY = cellRect.top - trackRect.top + cellRect.height / 2;
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–∏—à–∫–∏ —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º
        players.forEach((player, index) => {
            const token = this.createPlayerToken(player, index, players.length);
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∏—à–µ–∫
            const offset = this.calculateOffset(index, players.length);
            
            token.style.left = `${baseX + offset.x - 12}px`; // -12 –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (24px/2)
            token.style.top = `${baseY + offset.y - 12}px`;
            
            trackElement.appendChild(token);
            this.tokens.set(player.id, token);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
            this.animateTokenAppearance(token);
            
            console.log(`üéØ PlayerTokens: –§–∏—à–∫–∞ ${player.username} —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${position}`);
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–∞ —Ñ–∏—à–∫–∏
     */
    createPlayerToken(player, index, totalPlayers) {
        const token = document.createElement('div');
        token.className = `player-token ${player.isInner ? 'inner' : 'outer'}`;
        token.dataset.playerId = player.id;
        token.dataset.playerName = player.username;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∫–æ–Ω–∫—É —Ñ–∏—à–∫–∏ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
        const tokenIcon = this.getTokenIcon(player.token);
        token.textContent = tokenIcon;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–æ–∫–µ –≤ title
        token.title = `${player.username} - $${player.money || 0}`;
        
        return token;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —Ç–æ–∫–µ–Ω–∞
     */
    getTokenIcon(tokenId) {
        const tokenIcons = {
            'lion': 'ü¶Å',
            'eagle': 'ü¶Ö', 
            'fox': 'ü¶ä',
            'bear': 'üêª',
            'tiger': 'üêÖ',
            'wolf': 'üê∫',
            'elephant': 'üêò',
            'shark': 'ü¶à',
            'owl': 'ü¶â',
            'dolphin': 'üê¨'
        };
        
        return tokenIcons[tokenId] || 'üéØ';
    }
    
    /**
     * –†–∞—Å—á–µ—Ç —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∏—à–µ–∫
     */
    calculateOffset(index, totalPlayers) {
        if (totalPlayers === 1) {
            return { x: 0, y: 0 };
        }
        
        // –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º —Ñ–∏—à–∫–∏ –ø–æ –∫—Ä—É–≥—É
        const angle = (index * 2 * Math.PI) / totalPlayers;
        const radius = 8; // –†–∞–¥–∏—É—Å —Å–º–µ—â–µ–Ω–∏—è –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        
        return {
            x: Math.cos(angle) * radius,
            y: Math.sin(angle) * radius
        };
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ñ–∏—à–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
     */
    updateTokenPosition(playerId, newPosition, isInner) {
        const token = this.tokens.get(playerId);
        if (!token) {
            console.warn('‚ö†Ô∏è PlayerTokens: –§–∏—à–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞:', playerId);
            return;
        }
        
        const trackSelector = isInner ? this.innerTrackSelector : this.outerTrackSelector;
        const trackElement = document.querySelector(trackSelector);
        
        if (!trackElement) {
            console.warn('‚ö†Ô∏è PlayerTokens: –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω:', trackSelector);
            return;
        }
        
        const cell = trackElement.querySelector(`[data-position="${newPosition}"]`);
        if (!cell) {
            console.warn('‚ö†Ô∏è PlayerTokens: –ö–ª–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏:', newPosition);
            return;
        }
        
        const cellRect = cell.getBoundingClientRect();
        const trackRect = trackElement.getBoundingClientRect();
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        const newX = cellRect.left - trackRect.left + cellRect.width / 2;
        const newY = cellRect.top - trackRect.top + cellRect.height / 2;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Ñ–∏—à–∫–∏
        const currentX = parseFloat(token.style.left) || 0;
        const currentY = parseFloat(token.style.top) || 0;
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        this.animateTokenMovement(token, currentX, currentY, newX - 12, newY - 12);
        
        console.log(`üéØ PlayerTokens: –§–∏—à–∫–∞ ${playerId} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${newPosition}`);
    }
    
    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ñ–∏—à–∫–∏
     */
    animateTokenMovement(token, fromX, fromY, toX, toY) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        token.classList.add('moving');
        
        // –°–æ–∑–¥–∞–µ–º keyframes –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        const keyframes = [
            { 
                left: `${fromX}px`, 
                top: `${fromY}px`,
                transform: 'scale(1)'
            },
            { 
                left: `${(fromX + toX) / 2}px`, 
                top: `${(fromY + toY) / 2}px`,
                transform: 'scale(1.2)'
            },
            { 
                left: `${toX}px`, 
                top: `${toY}px`,
                transform: 'scale(1)'
            }
        ];
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        token.animate(keyframes, {
            duration: 800,
            easing: 'cubic-bezier(0.4, 0, 0.2, 1)',
            fill: 'forwards'
        }).onfinish = () => {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            token.style.left = `${toX}px`;
            token.style.top = `${toY}px`;
            
            // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏
            token.classList.remove('moving');
        };
    }
    
    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–∏—à–∫–∏
     */
    animateTokenAppearance(token) {
        const keyframes = [
            { 
                opacity: '0',
                transform: 'scale(0) rotate(0deg)'
            },
            { 
                opacity: '1',
                transform: 'scale(1.2) rotate(180deg)'
            },
            { 
                opacity: '1',
                transform: 'scale(1) rotate(360deg)'
            }
        ];
        
        token.animate(keyframes, {
            duration: 600,
            easing: 'cubic-bezier(0.68, -0.55, 0.265, 1.55)',
            fill: 'forwards'
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏—à–µ–∫
     */
    updateTokens(players) {
        this.clearTokens();
        this.renderTokens(players);
    }
}

window.PlayerTokens = PlayerTokens;
