/**
 * BankModuleServer v2.0.0
 * –ù–æ–≤—ã–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –º–æ–¥—É–ª—å, –∑–∞–≥—Ä—É–∂–∞—é—â–∏–π –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–µ—Ä–≤–µ—Ä–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
 */

class BankModuleServer {
    constructor(config = {}) {
        this.config = config;
        this.gameState = config.gameState || null;
        this.eventBus = config.eventBus || null;
        this.roomApi = config.roomApi || null;
        this.professionSystem = config.professionSystem || null;
        this.gameStateManager = config.gameStateManager || null;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–Ω–∫–∞ (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å —Å–µ—Ä–≤–µ—Ä–∞)
        this.bankState = {
            roomId: null,
            playerId: null,
            balance: 0,
            income: 0,
            expenses: 0,
            netIncome: 0,
            salary: 0,
            credit: 0,
            maxCredit: 0,
            players: [],
            transactions: []
        };
        
        // UI —ç–ª–µ–º–µ–Ω—Ç—ã
        this.ui = null;
        this.isOpen = false;
        this.isLoading = false;
        this._isTransferring = false;
        this._lastDataLoad = 0;
        this._dataCacheTimeout = 30000; // 30 —Å–µ–∫—É–Ω–¥ –∫—ç—à
        
        console.log('üè¶ BankModuleServer: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (v2.0.0)');
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    init() {
        this.createUI();
        this.setupEventListeners();
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async loadServerData(force = false) {
        if (this.isLoading) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        const now = Date.now();
        if (!force && (now - this._lastDataLoad) < this._dataCacheTimeout) {
            console.log('üöÄ BankModuleServer: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            this.updateUIFromServer();
            return;
        }
        
        this.isLoading = true;
        this.showLoadingState(true);
        
        try {
            const roomId = this.getRoomId();
            if (!roomId) {
                throw new Error('Room ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            console.log('üåê BankModuleServer: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã:', roomId);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã, –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞–µ–º –∏–∑ –Ω–µ–≥–æ
            const gameStateData = await this.fetchGameState(roomId);
            
            if (gameStateData) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–Ω–∫–∞ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ gameState
                this.updateBankStateFromServer(gameStateData, null);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π
                await this.loadTransactionsHistory();
                
                console.log('‚úÖ BankModuleServer: –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
            } else {
                console.warn('‚ö†Ô∏è BankModuleServer: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ');
                this.loadLocalData();
            }
            
        } catch (error) {
            console.error('‚ùå BankModuleServer: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
            if (!error.message?.includes('Load failed') && 
                !error.message?.includes('–¢–∞–π–º–∞—É—Ç') &&
                error.name !== 'TypeError') {
                this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞', 'error');
            }
            
            // Fallback: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ GameStateManager
            this.loadLocalData();
        } finally {
            this.isLoading = false;
            this.showLoadingState(false);
            this._lastDataLoad = Date.now();
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async fetchGameState(roomId) {
        // –ê—Ç–æ–º–∞—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ pending —Ñ–ª–∞–≥–∞
        if (window.CommonUtils && !window.CommonUtils.gameStateLimiter.setRequestPending(roomId)) {
            console.log('üö´ BankModuleServer: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ rate limiting –∏–ª–∏ concurrent request');
            return null;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 8000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 8 —Å–µ–∫—É–Ω–¥
        
        try {
            const response = await fetch(`/api/rooms/${roomId}/game-state`, {
                signal: controller.signal,
                headers: {
                    'Cache-Control': 'no-cache',
                    'Accept': 'application/json'
                }
            });
            clearTimeout(timeoutId);
            
            if (!response.ok) {
                if (response.status === 404) {
                    console.warn('‚ö†Ô∏è BankModuleServer: –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                    return null; // –í–µ—Ä–Ω–µ–º null –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
                }
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã: ${response.status}`);
            }
            
            let data;
            try {
                data = await response.json();
            } catch (jsonError) {
                console.warn('‚ö†Ô∏è BankModuleServer: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞:', jsonError);
                return null;
            }
            
            if (!data.success) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã');
            }
            
            return data.state;
        } catch (error) {
            clearTimeout(timeoutId);
            if (error.name === 'AbortError') {
                console.warn('‚ö†Ô∏è BankModuleServer: –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
            if (error.message?.includes('Load failed') || error.name === 'TypeError') {
                console.warn('‚ö†Ô∏è BankModuleServer: –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                return null;
            }
            
            throw error;
        } finally {
            // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ pending –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º limiter
            if (window.CommonUtils) {
                window.CommonUtils.gameStateLimiter.clearRequestPending(roomId);
            }
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ fallback
     */
    loadLocalData() {
        try {
            console.log('üîÑ BankModuleServer: –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback');
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ GameStateManager
            if (this.gameStateManager && typeof this.gameStateManager.getState === 'function') {
                const localState = this.gameStateManager.getState();
                if (localState && localState.players && localState.players.length > 0) {
                    console.log('‚úÖ BankModuleServer: –ü–æ–ª—É—á–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ GameStateManager');
                    this.updateBankStateFromServer({ players: localState.players }, null);
                    return;
                }
            }
            
            // –ï—Å–ª–∏ GameStateManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showNotification('–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –±–∞–Ω–∫ –ø–æ–∑–∂–µ', 'warning');
            
        } catch (error) {
            console.error('‚ùå BankModuleServer: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–Ω–∫–∞ –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    updateBankStateFromServer(gameState, balanceData) {
        const currentUser = this.getCurrentUserSync();
        if (!currentUser) {
            console.warn('‚ö†Ô∏è BankModuleServer: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        console.log('üîç BankModuleServer: –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
            userId: currentUser.id,
            username: currentUser.username,
            players: gameState.players?.map(p => ({ id: p.id, userId: p.userId, username: p.username }))
        });
        
        // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ —Ä–∞–∑–Ω—ã–º –ø–æ–ª—è–º
        let currentPlayer = gameState.players?.find(p => 
            p.id === currentUser.id || 
            p.userId === currentUser.id || 
            p.username === currentUser.username ||
            (p.userId && p.userId.toString() === currentUser.id.toString())
        );
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ username –∏–∑ localStorage
        if (!currentPlayer && currentUser.username) {
            currentPlayer = gameState.players?.find(p => 
                p.username === currentUser.username ||
                p.name === currentUser.username
            );
        }
        
        if (!currentPlayer) {
            console.warn('‚ö†Ô∏è BankModuleServer: –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã', {
                currentUser,
                availablePlayers: gameState.players?.map(p => ({ id: p.id, userId: p.userId, username: p.username }))
            });
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ fallback
            currentPlayer = gameState.players?.[0];
            if (currentPlayer) {
                console.log('üîß BankModuleServer: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ fallback:', currentPlayer.username);
            }
        }
        
        if (!currentPlayer) {
            console.error('‚ùå BankModuleServer: –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–µ');
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–Ω–∫–∞
        this.bankState.roomId = this.getRoomId();
        this.bankState.playerId = currentPlayer.id;
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Å fallback –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        let balance = (currentPlayer.money !== undefined && currentPlayer.money !== null) 
            ? currentPlayer.money 
            : ((currentPlayer.balance !== undefined && currentPlayer.balance !== null) 
                ? currentPlayer.balance 
                : 5000); // fallback —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è undefined/null
        
        // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å 0, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å 5000
        if (balance === 0) {
            balance = 5000;
            console.log('üí∞ BankModuleServer: –ë–∞–ª–∞–Ω—Å –±—ã–ª 0, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å 5000');
        }
        
        this.bankState.balance = balance;
        this.bankState.players = gameState.players || [];
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞
        const professionId = currentPlayer.profession || 'entrepreneur';
        const professionDetails = this.professionSystem?.getProfessionDetails(professionId, {
            money: currentPlayer.money || 0,
            children: currentPlayer.children || 0,
            paidOffLoans: currentPlayer.paidOffLoans || {},
            extraIncome: currentPlayer.extraIncome || 0,
            currentLoan: currentPlayer.currentLoan || 0,
            otherMonthlyAdjustments: currentPlayer.otherMonthlyAdjustments || 0
        });
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ ProfessionSystem
        if (professionDetails) {
            this.bankState.income = professionDetails.income?.total || 0;
            this.bankState.expenses = professionDetails.expenses?.total || 0;
            this.bankState.netIncome = professionDetails.netIncome?.netIncome || (this.bankState.income - this.bankState.expenses);
            this.bankState.salary = professionDetails.income?.salary || 0;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–µ–Ω—ã –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (this.bankState.income === 0 || this.bankState.expenses === 0) {
                console.log('‚ö†Ô∏è BankModuleServer: ProfessionSystem –≤–µ—Ä–Ω—É–ª –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                this.initEntrepreneurFallbackData(currentPlayer);
            } else {
                this.bankState.maxCredit = this.bankState.netIncome * 10;
            }
        } else {
            // Fallback –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è (–µ—Å–ª–∏ ProfessionSystem –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
            console.log('‚ö†Ô∏è BankModuleServer: ProfessionSystem –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
            this.initEntrepreneurFallbackData(currentPlayer);
        }
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è
        this.ensureCorrectEntrepreneurValues();
        
        this.bankState.credit = currentPlayer.currentLoan || 0;
        this.bankState.currentPlayer = currentPlayer;
        
        console.log('üìä BankModuleServer: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', {
            balance: this.bankState.balance,
            netIncome: this.bankState.netIncome,
            maxCredit: this.bankState.maxCredit,
            credit: this.bankState.credit
        });
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è –∫–∞–∫ fallback
     */
    initEntrepreneurFallbackData(currentPlayer) {
        console.log('üè¢ BankModuleServer: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è (fallback)');
        
        // 1. –ó–∞—Ä–ø–ª–∞—Ç–∞ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è - –≤—Å–µ–≥–¥–∞ $10,000 + –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ $0 = $10,000
        const salary = 10000; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è
        const passiveIncome = currentPlayer.extraIncome || 0;
        this.bankState.income = salary + passiveIncome;
        this.bankState.salary = salary;
        
        // 2. –†–∞—Å—Ö–æ–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è
        const childCount = currentPlayer.children || 0;
        const currentLoan = currentPlayer.currentLoan || 0;
        
        // –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è
        this.bankState.expenses = this.calculateEntrepreneurExpenses(currentLoan, childCount);
        
        // 3. PAYDAY = –î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫ = –¥–æ—Ö–æ–¥—ã - —Ä–∞—Å—Ö–æ–¥—ã
        this.bankState.netIncome = this.bankState.income - this.bankState.expenses;
        
        // 4. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç = —á–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ √ó 10
        this.bankState.maxCredit = Math.max(this.bankState.netIncome * 10, 0);
        
        console.log('üí∞ BankModuleServer: –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:', {
            income: this.bankState.income,
            expenses: this.bankState.expenses,
            netIncome: this.bankState.netIncome,
            maxCredit: this.bankState.maxCredit
        });
    }
    
    /**
     * –†–∞—Å—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è
     */
    calculateEntrepreneurExpenses(currentLoan = 0, childCount = 0) {
        // –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è:
        // 2.1 –ù–∞–ª–æ–≥–∏: $1,300 (13%) - –ø–æ–≥–∞—Å–∏—Ç—å –Ω–µ–ª—å–∑—è
        const taxes = 1300;
        
        // 2.2 –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: $1,500 - –ø–æ–≥–∞—Å–∏—Ç—å –Ω–µ–ª—å–∑—è  
        const otherExpenses = 1500;
        
        // 2.3 –ö—Ä–µ–¥–∏—Ç –Ω–∞ –∞–≤—Ç–æ: $700 (–º–æ–∂–Ω–æ –ø–æ–≥–∞—Å–∏—Ç—å 14,000)
        const autoLoan = 700;
        
        // 2.4 –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç: $500 (–º–æ–∂–Ω–æ –ø–æ–≥–∞—Å–∏—Ç—å 10,000)
        const educationLoan = 500;
        
        // 2.5 –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã: $1,000 (–º–æ–∂–Ω–æ –ø–æ–≥–∞—Å–∏—Ç—å 20,000)
        const creditCards = 1000;
        
        // 2.6 –ò–ø–æ—Ç–µ–∫–∞ —Å—Ç—É–¥–∏—è: $1,200 - $48,000
        const mortgage = 1200;
        
        // 2.7 –†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–µ–±–µ–Ω–∫–∞: $500 √ó –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π (–º–∞–∫—Å–∏–º—É–º 3)
        const childExpenses = Math.min(childCount, 3) * 500;
        
        // 2.8 –ë–∞–Ω–∫ –∫—Ä–µ–¥–∏—Ç: 10% –æ—Ç –≤–∑—è—Ç–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞
        const bankLoanExpenses = Math.floor(currentLoan * 0.1);
        
        // –ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥—ã: $6,200 + —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –¥–µ—Ç–µ–π + –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫—Ä–µ–¥–∏—Ç—É
        const totalExpenses = taxes + otherExpenses + autoLoan + educationLoan + 
                             creditCards + mortgage + childExpenses + bankLoanExpenses;
        
        console.log('üí∏ BankModuleServer: –†–∞—Å—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤:', {
            taxes,
            otherExpenses,
            autoLoan,
            educationLoan,
            creditCards,
            mortgage,
            childExpenses,
            bankLoanExpenses,
            totalExpenses
        });
        
        return totalExpenses;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è
     */
    ensureCorrectEntrepreneurValues() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
        const needsCorrection = this.bankState.income === 0 || 
                               this.bankState.expenses === 0 || 
                               this.bankState.income !== 10000 || 
                               this.bankState.maxCredit === 0 && this.bankState.netIncome > 0;
        
        if (needsCorrection) {
            console.log('üîß BankModuleServer: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è:', {
                current: {
                    income: this.bankState.income,
                    expenses: this.bankState.expenses,
                    netIncome: this.bankState.netIncome,
                    maxCredit: this.bankState.maxCredit
                }
            });
            
            // –î–æ—Ö–æ–¥—ã: –∑–∞—Ä–ø–ª–∞—Ç–∞ $10,000 + –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ $0 = $10,000
            this.bankState.income = 10000;
            this.bankState.salary = 10000;
            
            // –†–∞—Å—Ö–æ–¥—ã: $6,200 (–±–∞–∑–æ–≤—ã–µ) + –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
            this.bankState.expenses = 6200;
            
            // PAYDAY = $10,000 - $6,200 = $3,800
            this.bankState.netIncome = 3800;
            
            // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç = $3,800 √ó 10 = $38,000
            this.bankState.maxCredit = 38000;
            
            console.log('‚úÖ BankModuleServer: –ó–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ');
        }
        
        console.log('‚úÖ BankModuleServer: –§–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è:', {
            income: this.bankState.income,
            expenses: this.bankState.expenses,
            netIncome: this.bankState.netIncome,
            maxCredit: this.bankState.maxCredit,
            payday: this.bankState.netIncome
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    updateUIFromServer() {
        if (!this.ui) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        const balanceElement = this.ui.querySelector('#bank-balance');
        if (balanceElement) {
            balanceElement.textContent = `$${this.formatNumber(this.bankState.balance)}`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Ö–æ–¥—ã
        const incomeElement = this.ui.querySelector('#bank-income');
        if (incomeElement) {
            incomeElement.textContent = `$${this.formatNumber(this.bankState.income)}`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã
        const expensesElement = this.ui.querySelector('#bank-expenses');
        if (expensesElement) {
            expensesElement.textContent = `$${this.formatNumber(this.bankState.expenses)}`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —á–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥
        const netIncomeElement = this.ui.querySelector('#bank-net-income');
        if (netIncomeElement) {
            netIncomeElement.textContent = `$${this.formatNumber(this.bankState.netIncome)}/–º–µ—Å`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É (–µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç)
        const salaryElement = this.ui.querySelector('#bank-salary');
        if (salaryElement) {
            salaryElement.textContent = `$${this.formatNumber(this.bankState.salary)}/–º–µ—Å`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å
        const creditElement = this.ui.querySelector('#bank-credit');
        if (creditElement) {
            creditElement.textContent = `$${this.formatNumber(this.bankState.credit)}`;
            creditElement.style.color = this.bankState.credit > 0 ? '#ef4444' : '#10b981';
            creditElement.style.fontWeight = this.bankState.credit > 0 ? 'bold' : 'normal';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç
        const maxCreditElement = this.ui.querySelector('#bank-max-credit');
        if (maxCreditElement) {
            maxCreditElement.textContent = `$${this.formatNumber(this.bankState.maxCredit)}`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω–∏-–±–ª–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞
        const loanBalance = this.ui.querySelector('#loan-balance');
        if (loanBalance) {
            loanBalance.textContent = `$${this.formatNumber(this.bankState.credit)}`;
            loanBalance.style.color = this.bankState.credit > 0 ? '#ef4444' : '#10b981';
            loanBalance.style.fontWeight = this.bankState.credit > 0 ? 'bold' : 'normal';
        }
        
        const loanMax = this.ui.querySelector('#loan-max');
        if (loanMax) {
            loanMax.textContent = `$${this.formatNumber(this.bankState.maxCredit)}`;
            loanMax.style.color = '#10b981';
            loanMax.style.fontWeight = 'bold';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        this.updatePlayersList();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π
        this.updateTransactionsHistory();
        
        console.log('üîÑ BankModuleServer: UI –æ–±–Ω–æ–≤–ª–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞');
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    updatePlayersList() {
        const recipientSelect = this.ui.querySelector('#transfer-recipient');
        if (!recipientSelect) return;
        
        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        recipientSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞</option>';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ)
        this.bankState.players.forEach(player => {
            if (player.id !== this.bankState.playerId) {
                const option = document.createElement('option');
                option.value = player.id;
                const balance = player.balance || player.money || 0;
                option.textContent = `${player.username || player.name} ($${this.formatNumber(balance)})`;
                recipientSelect.appendChild(option);
            }
        });
        
        console.log(`üë• BankModuleServer: –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤: ${this.bankState.players.length} –∏–≥—Ä–æ–∫–æ–≤`);
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ UI –±–∞–Ω–∫ –º–æ–¥—É–ª—è
     */
    createUI() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ HTML, —á—Ç–æ –∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –º–æ–¥—É–ª–µ
        const bankModuleHTML = `
            <div id="bank-module-server" class="bank-module" style="display: none;">
                <div class="bank-overlay"></div>
                <div class="bank-container">
                    <div class="bank-header">
                        <div class="bank-title">
                            <span class="bank-icon">üè¶</span>
                            <span>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</span>
                            <span class="server-badge">–°–ï–†–í–ï–†</span>
                        </div>
                        <button class="bank-close" id="bank-close-server">‚úï</button>
                    </div>
                    
                    <div class="bank-content">
                        <div class="bank-left">
                            <div class="bank-status">
                                <div class="bank-status-header">
                                    <span class="bank-icon">üè¶</span>
                                    <span>–ë–∞–Ω–∫</span>
                                    <span class="status-badge active">–ê–∫—Ç–∏–≤–µ–Ω</span>
                                    <button class="refresh-btn" id="refresh-server-data">üîÑ</button>
                                </div>
                                
                                <div class="current-balance">
                                    <div class="balance-amount" id="bank-balance">$0</div>
                                    <div class="balance-description">–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π</div>
                                </div>
                                
                                <div class="financial-summary">
                                    <div class="summary-item">
                                        <span class="summary-icon income">üìà</span>
                                        <span class="summary-label">–î–æ—Ö–æ–¥:</span>
                                        <span class="summary-value income" id="bank-income">$0</span>
                                    </div>
                                    <div class="summary-item">
                                        <span class="summary-icon expense">üìâ</span>
                                        <span class="summary-label">–†–∞—Å—Ö–æ–¥—ã:</span>
                                        <span class="summary-value expense" id="bank-expenses">$0</span>
                                    </div>
                                    <div class="summary-item">
                                        <span class="summary-icon net">üíé</span>
                                        <span class="summary-label">–ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥:</span>
                                        <span class="summary-value net" id="bank-net-income">$0/–º–µ—Å</span>
                                    </div>
                                </div>
                                
                                <div class="credit-info">
                                    <div class="credit-item">
                                        <span class="credit-icon">üí≥</span>
                                        <span class="credit-label">–ö—Ä–µ–¥–∏—Ç:</span>
                                        <span class="credit-value" id="bank-credit">$0</span>
                                    </div>
                                    <div class="credit-item">
                                        <span class="credit-label">–ú–∞–∫—Å. –∫—Ä–µ–¥–∏—Ç:</span>
                                        <span class="credit-value max" id="bank-max-credit">$0</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="bank-right">
                            <div class="transfer-section">
                                <div class="section-title">
                                    <span class="section-icon">üí∏</span>
                                    <span>–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</span>
                                </div>
                                
                                <div class="transfer-form">
                                    <div class="form-group">
                                        <label for="transfer-recipient">–ü–æ–ª—É—á–∞—Ç–µ–ª—å</label>
                                        <select id="transfer-recipient" class="form-select">
                                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞</option>
                                        </select>
                                    </div>
                                    
                                    <div class="form-group">
                                        <label for="transfer-amount">–°—É–º–º–∞ ($)</label>
                                        <div class="amount-input">
                                            <input type="number" id="transfer-amount" class="form-input" placeholder="0" min="1">
                                            <button class="amount-eye" id="amount-eye">üëÅ</button>
                                        </div>
                                    </div>
                                    
                                    <div class="transfer-actions">
                                        <button class="transfer-btn" id="transfer-execute-server">
                                            <span class="btn-icon">‚úà</span>
                                            <span>–í–´–ü–û–õ–ù–ò–¢–¨ –ü–ï–†–ï–í–û–î</span>
                                        </button>
                                        <button class="transfer-reset" id="transfer-reset-server">–°–ë–†–û–°–ò–¢–¨</button>
                                    </div>
                                    
                                    <div class="loan-inline" style="margin-top:12px;padding-top:8px;border-top:1px dashed rgba(255,255,255,0.1)">
                                        <label for="loan-amount-server">–ö—Ä–µ–¥–∏—Ç (—à–∞–≥ 1000)</label>
                                        <div style="display:flex;gap:8px;align-items:center;margin-top:6px">
                                            <input type="number" id="loan-amount-server" class="form-input" placeholder="0" min="0" step="1000">
                                            <button class="transfer-btn" id="loan-take-server" style="min-width:120px">–í–ó–Ø–¢–¨</button>
                                            <button class="transfer-reset" id="loan-repay-server" style="min-width:120px">–ü–û–ì–ê–°–ò–¢–¨</button>
                                        </div>
                                        <div style="margin-top:8px;opacity:.85;display:flex;gap:16px">
                                            <div>–ë–∞–ª–∞–Ω—Å: <span id="loan-balance">$0</span></div>
                                            <div>–ú–∞–∫—Å.: <span id="loan-max">$0</span></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="transactions-section">
                                <div class="section-title">
                                    <span class="section-icon">üïê</span>
                                    <span>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</span>
                                    <span class="new-badge" id="new-transactions-server">0</span>
                                </div>
                                
                                <div class="transactions-list" id="transactions-list-server">
                                    <div class="loading-indicator" id="loading-indicator">
                                        <div class="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞...</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º HTML –≤ body
        document.body.insertAdjacentHTML('beforeend', bankModuleHTML);
        this.ui = document.getElementById('bank-module-server');
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–∞–¥—Ä–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        requestAnimationFrame(() => {
            this.addStyles();
            console.log('üè¶ BankModuleServer: UI —Å–æ–∑–¥–∞–Ω');
        });
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CSS —Å—Ç–∏–ª–µ–π (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)
     */
    addStyles() {
        const style = document.createElement('style');
        style.textContent = `
            .bank-module {
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                z-index: 10000;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            
            .bank-overlay {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.8);
                backdrop-filter: blur(5px);
            }
            
            .bank-container {
                position: relative;
                background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f0f23 100%);
                border-radius: 20px;
                border: 2px solid rgba(255, 255, 255, 0.1);
                box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
                width: 96%;
                max-width: 1400px;
                height: 92%;
                max-height: none;
                overflow: hidden;
                display: flex;
                flex-direction: column;
            }
            
            .bank-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 20px 30px;
                border-bottom: 1px solid rgba(255, 255, 255, 0.1);
                background: rgba(255, 255, 255, 0.05);
            }
            
            .bank-title {
                display: flex;
                align-items: center;
                gap: 12px;
                font-size: 1.5rem;
                font-weight: 600;
                color: white;
            }
            
            .server-badge {
                background: #10b981;
                color: white;
                padding: 4px 8px;
                border-radius: 4px;
                font-size: 0.7rem;
                font-weight: 600;
                text-transform: uppercase;
            }
            
            .refresh-btn {
                background: rgba(255, 255, 255, 0.1);
                border: 1px solid rgba(255, 255, 255, 0.2);
                color: white;
                padding: 8px 12px;
                border-radius: 6px;
                cursor: pointer;
                font-size: 1rem;
                transition: all 0.3s ease;
            }
            
            .refresh-btn:hover {
                background: rgba(255, 255, 255, 0.2);
            }
            
            .loading-indicator {
                text-align: center;
                padding: 40px;
                color: rgba(255, 255, 255, 0.7);
            }
            
            .loading-text {
                font-size: 1.1rem;
            }
            
            /* –ö–æ–ø–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è */
            .bank-icon {
                font-size: 1.8rem;
            }
            
            .bank-close {
                background: none;
                border: none;
                color: white;
                font-size: 1.5rem;
                cursor: pointer;
                padding: 8px;
                border-radius: 50%;
                transition: all 0.3s ease;
            }
            
            .bank-close:hover {
                background: rgba(255, 255, 255, 0.1);
            }
            
            .bank-content {
                display: flex;
                flex: 1;
                overflow: hidden;
            }
            
            .bank-left {
                flex: 1;
                padding: 30px;
                border-right: 1px solid rgba(255, 255, 255, 0.1);
                overflow-y: auto;
            }
            
            .bank-right {
                flex: 1;
                padding: 30px;
                overflow-y: auto;
            }
            
            .bank-status {
                background: rgba(255, 255, 255, 0.05);
                border-radius: 15px;
                padding: 25px;
                border: 1px solid rgba(255, 255, 255, 0.1);
            }
            
            .bank-status-header {
                display: flex;
                align-items: center;
                gap: 12px;
                margin-bottom: 25px;
            }
            
            .status-badge {
                background: #10b981;
                color: white;
                padding: 6px 12px;
                border-radius: 20px;
                font-size: 0.8rem;
                font-weight: 600;
                margin-left: auto;
            }
            
            .current-balance {
                text-align: center;
                margin-bottom: 30px;
            }
            
            .balance-amount {
                font-size: 3rem;
                font-weight: 700;
                color: #10b981;
                margin-bottom: 8px;
            }
            
            .balance-description {
                color: rgba(255, 255, 255, 0.7);
                font-size: 1rem;
            }
            
            .financial-summary {
                margin-bottom: 30px;
            }
            
            .summary-item {
                display: flex;
                align-items: center;
                gap: 12px;
                margin-bottom: 15px;
            }
            
            .summary-icon {
                font-size: 1.2rem;
            }
            
            .summary-label {
                color: white;
                font-weight: 500;
                min-width: 80px;
            }
            
            .summary-value {
                font-weight: 600;
                margin-left: auto;
            }
            
            .summary-value.income {
                color: #10b981;
            }
            
            .summary-value.expense {
                color: #ef4444;
            }
            
            .summary-value.payday {
                color: #f59e0b;
            }
            
            .summary-value.net {
                color: #10b981;
            }
            
            .credit-info {
                border-top: 1px solid rgba(255, 255, 255, 0.1);
                padding-top: 20px;
            }
            
            .credit-item {
                display: flex;
                align-items: center;
                gap: 12px;
                margin-bottom: 15px;
            }
            
            .credit-icon {
                font-size: 1.2rem;
            }
            
            .credit-label {
                color: white;
                font-weight: 500;
                min-width: 100px;
            }
            
            .credit-value {
                font-weight: 600;
                margin-left: auto;
            }
            
            .credit-value.max {
                color: #8b5cf6;
            }
            
            .transfer-section, .transactions-section {
                background: rgba(255, 255, 255, 0.05);
                border-radius: 15px;
                padding: 25px;
                border: 1px solid rgba(255, 255, 255, 0.1);
                margin-bottom: 20px;
            }
            
            .section-title {
                display: flex;
                align-items: center;
                gap: 12px;
                margin-bottom: 20px;
                font-size: 1.2rem;
                font-weight: 600;
                color: white;
            }
            
            .section-icon {
                font-size: 1.4rem;
            }
            
            .new-badge {
                background: #8b5cf6;
                color: white;
                padding: 4px 8px;
                border-radius: 12px;
                font-size: 0.8rem;
                font-weight: 600;
                margin-left: auto;
            }
            
            .form-group {
                margin-bottom: 20px;
            }
            
            .form-group label {
                display: block;
                color: white;
                font-weight: 500;
                margin-bottom: 8px;
            }
            
            .form-select, .form-input {
                width: 100%;
                padding: 12px 16px;
                background: rgba(255, 255, 255, 0.1);
                border: 1px solid rgba(255, 255, 255, 0.2);
                border-radius: 8px;
                color: white;
                font-size: 1rem;
            }
            
            .form-select:focus, .form-input:focus {
                outline: none;
                border-color: #10b981;
                box-shadow: 0 0 0 2px rgba(16, 185, 129, 0.2);
            }
            
            .amount-input {
                position: relative;
            }
            
            .amount-eye {
                position: absolute;
                right: 12px;
                top: 50%;
                transform: translateY(-50%);
                background: none;
                border: none;
                color: white;
                cursor: pointer;
                font-size: 1.2rem;
            }
            
            .transfer-actions {
                display: flex;
                gap: 12px;
            }
            
            .transfer-btn {
                background: linear-gradient(135deg, #3b82f6, #1d4ed8);
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 8px;
                font-weight: 600;
                cursor: pointer;
                flex: 1;
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 8px;
            }
            
            .transfer-reset {
                background: rgba(255, 255, 255, 0.1);
                color: white;
                border: 1px solid rgba(255, 255, 255, 0.2);
                padding: 12px 20px;
                border-radius: 8px;
                font-weight: 600;
                cursor: pointer;
            }
            
            .loan-inline input.form-input { 
                max-width: 160px; 
            }
            
            .transactions-list {
                max-height: 300px;
                overflow-y: auto;
            }
            
            .transaction-item {
                background: rgba(255, 255, 255, 0.05);
                border-radius: 10px;
                padding: 15px;
                margin-bottom: 10px;
                border: 1px solid rgba(255, 255, 255, 0.1);
            }
            
            .transaction-header {
                display: flex;
                align-items: center;
                gap: 12px;
                margin-bottom: 8px;
            }
            
            .transaction-icon {
                width: 40px;
                height: 40px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 18px;
                flex-shrink: 0;
            }
            
            .transaction-icon.transfer {
                background: rgba(59, 130, 246, 0.2);
                color: #60a5fa;
            }
            
            .transaction-icon.transfer-in {
                background: rgba(34, 197, 94, 0.2);
                color: #4ade80;
            }
            
            .transaction-icon.transfer-out {
                background: rgba(239, 68, 68, 0.2);
                color: #f87171;
            }
            
            .transaction-icon.credit-take {
                background: rgba(168, 85, 247, 0.2);
                color: #a78bfa;
            }
            
            .transaction-icon.credit-repay {
                background: rgba(34, 197, 94, 0.2);
                color: #4ade80;
            }
            
            .transaction-icon.default {
                background: rgba(156, 163, 175, 0.2);
                color: #d1d5db;
            }
            
            .transaction-info {
                flex: 1;
            }
            
            .transaction-type {
                font-weight: 600;
                color: #ffffff;
                margin-bottom: 2px;
            }
            
            .transaction-participant {
                font-size: 0.85rem;
                color: rgba(156, 163, 175, 0.9);
            }
            
            .transaction-amount {
                font-weight: 700;
                font-size: 1.1rem;
            }
            
            .transaction-amount.positive {
                color: #10b981;
            }
            
            .transaction-amount.negative {
                color: #ef4444;
            }
            
            .transaction-details {
                display: flex;
                justify-content: space-between;
                align-items: center;
                font-size: 0.8rem;
                color: rgba(156, 163, 175, 0.8);
            }
            
            .transaction-time {
                font-weight: 500;
            }
            
            .transaction-description {
                max-width: 200px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
            }
            
            .no-transactions {
                text-align: center;
                padding: 40px 20px;
                color: rgba(156, 163, 175, 0.8);
            }
            
            .no-transactions-icon {
                font-size: 48px;
                margin-bottom: 16px;
                opacity: 0.5;
            }
            
            .no-transactions-text {
                font-weight: 600;
                margin-bottom: 8px;
                color: rgba(156, 163, 175, 0.9);
            }
            
            .no-transactions-subtext {
                font-size: 0.9rem;
                opacity: 0.7;
            }
        `;
        
        document.head.appendChild(style);
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        if (!this.ui) return;
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥—É–ª—è
        const closeBtn = this.ui.querySelector('#bank-close-server');
        closeBtn.addEventListener('click', () => this.close());
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
        const refreshBtn = this.ui.querySelector('#refresh-server-data');
        refreshBtn.addEventListener('click', () => this.loadServerData(true));
        
        // –ü–µ—Ä–µ–≤–æ–¥—ã
        const transferExecute = this.ui.querySelector('#transfer-execute-server');
        transferExecute.addEventListener('click', () => this.executeTransfer());
        
        const transferReset = this.ui.querySelector('#transfer-reset-server');
        transferReset.addEventListener('click', () => this.resetTransferForm());
        
        // –ö—Ä–µ–¥–∏—Ç—ã
        const loanTake = this.ui.querySelector('#loan-take-server');
        const loanRepay = this.ui.querySelector('#loan-repay-server');
        if (loanTake) loanTake.addEventListener('click', () => this.takeCreditInline());
        if (loanRepay) loanRepay.addEventListener('click', () => this.repayCreditInline());
        
        console.log('üè¶ BankModuleServer: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }
    
    /**
     * –ü–æ–∫–∞–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoadingState(show) {
        const loadingIndicator = this.ui?.querySelector('#loading-indicator');
        if (loadingIndicator) {
            loadingIndicator.style.display = show ? 'block' : 'none';
        }
        
        const refreshBtn = this.ui?.querySelector('#refresh-server-data');
        if (refreshBtn) {
            refreshBtn.disabled = show;
            refreshBtn.textContent = show ? '‚è≥' : 'üîÑ';
        }
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–Ω–∫ –º–æ–¥—É–ª—è
     */
    async open() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º UI –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (!this.ui) {
            console.log('üè¶ BankModuleServer: UI –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º...');
            this.createUI();
            
            // –ñ–¥–µ–º —Å–æ–∑–¥–∞–Ω–∏—è UI —Å –Ω–µ–±–æ–ª—å—à–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
            let attempts = 0;
            while (!this.ui && attempts < 10) {
                await new Promise(resolve => setTimeout(resolve, 50));
                attempts++;
            }
            
            if (!this.ui) {
                console.error('‚ùå BankModuleServer: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å UI');
                return;
            }
        }
        
        this.ui.style.display = 'flex';
        this.isOpen = true;
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º UI —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (this.bankState.balance !== 0 || this.bankState.players.length > 0) {
            console.log('üöÄ BankModuleServer: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            this.updateUIFromServer();
        }
        
        // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–µ (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ)
        this.loadServerData().then(() => {
            this.updateUIFromServer();
        }).catch(error => {
            console.warn('‚ö†Ô∏è BankModuleServer: –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        });
        
        console.log('üè¶ BankModuleServer: –û—Ç–∫—Ä—ã—Ç');
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –±–∞–Ω–∫ –º–æ–¥—É–ª—è
     */
    close() {
        if (this.ui) {
            this.ui.style.display = 'none';
            this.isOpen = false;
            console.log('üè¶ BankModuleServer: –ó–∞–∫—Ä—ã—Ç');
        }
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
     */
    async executeTransfer() {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        if (this._isTransferring) {
            console.log('üîÑ BankModuleServer: –ü–µ—Ä–µ–≤–æ–¥ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
            return;
        }
        
        const recipientId = this.ui.querySelector('#transfer-recipient')?.value;
        const amountStr = this.ui.querySelector('#transfer-amount')?.value;
        const amount = parseInt(amountStr);
        
        if (!recipientId || !amountStr || isNaN(amount) || amount <= 0) {
            this.showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'error');
            this._isTransferring = false;
            return;
        }
        
        this._isTransferring = true;
        
        if (amount > this.bankState.balance) {
            this.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', 'error');
            this._isTransferring = false;
            return;
        }
        
        try {
            const response = await fetch('/api/bank/transfer', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    roomId: this.bankState.roomId,
                    fromPlayerId: this.bankState.playerId,
                    toPlayerId: recipientId,
                    amount: amount,
                    description: `–ü–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ BankModuleServer`
                })
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.showNotification(`–ü–µ—Ä–µ–≤–æ–¥ $${this.formatNumber(amount)} –≤—ã–ø–æ–ª–Ω–µ–Ω`, 'success');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
                const recipient = this.bankState.players.find(p => p.id === recipientId);
                this.addTransaction({
                    type: 'transfer',
                    amount: -amount, // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                    recipient: recipient,
                    sender: { id: this.bankState.playerId, username: this.getCurrentUserSync()?.username },
                    description: `–ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è ${recipient?.username || recipient?.name || '–∏–≥—Ä–æ–∫–∞'}`
                });
                
                this.resetTransferForm();
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å)
                await this.loadServerData(true);
                this.updateUIFromServer();
            } else {
                this.showNotification(result.message || '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞', 'error');
            }
        } catch (error) {
            console.error('‚ùå BankModuleServer: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞', 'error');
        } finally {
            this._isTransferring = false;
        }
    }
    
    /**
     * –í–∑—è—Ç–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
     */
    async takeCreditInline() {
        const amountInput = this.ui.querySelector('#loan-amount-server');
        const amount = Math.max(0, Math.floor((parseInt(amountInput.value) || 0) / 1000) * 1000);
        
        if (amount <= 0) {
            this.showNotification('–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0', 'error');
            return;
        }
        
        const maxAmount = this.bankState.maxCredit - this.bankState.credit;
        if (amount > maxAmount) {
            this.showNotification(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫—Ä–µ–¥–∏—Ç–∞. –î–æ—Å—Ç—É–ø–Ω–æ: $${this.formatNumber(maxAmount)}`, 'error');
            return;
        }
        
        try {
            const response = await fetch('/api/bank/loan/take', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    roomId: this.bankState.roomId,
                    playerId: this.bankState.playerId,
                    amount: amount
                })
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.showNotification(`–ö—Ä–µ–¥–∏—Ç $${this.formatNumber(amount)} –≤–∑—è—Ç —É—Å–ø–µ—à–Ω–æ`, 'success');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
                this.addTransaction({
                    type: 'credit',
                    amount: amount,
                    description: `–í–∑—è—Ç –∫—Ä–µ–¥–∏—Ç –Ω–∞ —Å—É–º–º—É $${this.formatNumber(amount)}`
                });
                
                amountInput.value = '';
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å)
                await this.loadServerData(true);
                this.updateUIFromServer();
            } else {
                this.showNotification(result.message || '–û—à–∏–±–∫–∞ –≤–∑—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–∞', 'error');
            }
        } catch (error) {
            console.error('‚ùå BankModuleServer: –û—à–∏–±–∫–∞ –≤–∑—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –≤–∑—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–∞', 'error');
        }
    }
    
    /**
     * –ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
     */
    async repayCreditInline() {
        const amountInput = this.ui.querySelector('#loan-amount-server');
        const amount = Math.max(0, Math.floor((parseInt(amountInput.value) || 0) / 1000) * 1000);
        
        if (amount <= 0) {
            this.showNotification('–°—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0', 'error');
            return;
        }
        
        if (amount > this.bankState.balance) {
            this.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è', 'error');
            return;
        }
        
        if (amount > this.bankState.credit) {
            this.showNotification(`–ù–µ–ª—å–∑—è –ø–æ–≥–∞—Å–∏—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –∑–∞–¥–æ–ª–∂–∞–Ω–æ. –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: $${this.formatNumber(this.bankState.credit)}`, 'error');
            return;
        }
        
        try {
            const response = await fetch('/api/bank/loan/repay', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    roomId: this.bankState.roomId,
                    playerId: this.bankState.playerId,
                    amount: amount
                })
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.showNotification(`–ö—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω –Ω–∞ $${this.formatNumber(amount)}`, 'success');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
                this.addTransaction({
                    type: 'credit',
                    amount: -amount, // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è
                    description: `–ü–æ–≥–∞—à–µ–Ω –∫—Ä–µ–¥–∏—Ç –Ω–∞ —Å—É–º–º—É $${this.formatNumber(amount)}`
                });
                
                amountInput.value = '';
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å)
                await this.loadServerData(true);
                this.updateUIFromServer();
            } else {
                this.showNotification(result.message || '–û—à–∏–±–∫–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞', 'error');
            }
        } catch (error) {
            console.error('‚ùå BankModuleServer: –û—à–∏–±–∫–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞', 'error');
        }
    }
    
    /**
     * –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞
     */
    resetTransferForm() {
        this.ui.querySelector('#transfer-recipient').value = '';
        this.ui.querySelector('#transfer-amount').value = '';
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–æ–º–Ω–∞—Ç—ã
     */
    getRoomId() {
        try {
            const urlParams = new URLSearchParams(window.location.hash.split('?')[1]);
            return urlParams.get('roomId');
        } catch (error) {
            console.error('‚ùå BankModuleServer: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–æ–º–Ω–∞—Ç—ã:', error);
            return null;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    async getCurrentUser() {
        try {
            const userData = localStorage.getItem('currentUser');
            if (userData) {
                return JSON.parse(userData);
            }
            
            const token = localStorage.getItem('authToken');
            if (token) {
                const payload = JSON.parse(atob(token.split('.')[1]));
                return {
                    id: payload.userId || payload.id,
                    username: payload.username || payload.email
                };
            }
            
            return null;
        } catch (error) {
            console.warn('‚ö†Ô∏è BankModuleServer: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return null;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    getCurrentUserSync() {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º sessionStorage (—Ç–∞–º –º–æ–∂–µ—Ç –±—ã—Ç—å ID –∏–≥—Ä–æ–∫–∞)
            const bundleRaw = sessionStorage.getItem('am_player_bundle');
            if (bundleRaw) {
                const bundle = JSON.parse(bundleRaw);
                if (bundle.userId || bundle.id || bundle.username) {
                    console.log('üîç BankModuleServer: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ sessionStorage:', bundle);
                    return {
                        id: bundle.userId || bundle.id,
                        username: bundle.username || bundle.currentUser?.username
                    };
                }
            }
            
            // –ó–∞—Ç–µ–º localStorage
            const userData = localStorage.getItem('currentUser');
            if (userData) {
                const user = JSON.parse(userData);
                console.log('üîç BankModuleServer: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ localStorage:', user);
                return user;
            }
            
            // –ò –Ω–∞–∫–æ–Ω–µ—Ü —Ç–æ–∫–µ–Ω
            const token = localStorage.getItem('authToken');
            if (token) {
                const payload = JSON.parse(atob(token.split('.')[1]));
                const user = {
                    id: payload.userId || payload.id,
                    username: payload.username || payload.email
                };
                console.log('üîç BankModuleServer: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ —Ç–æ–∫–µ–Ω–∞:', user);
                return user;
            }
            
            return null;
        } catch (error) {
            console.warn('‚ö†Ô∏è BankModuleServer: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return null;
        }
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç CommonUtils)
     */
    formatNumber(num) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —É—Ç–∏–ª–∏—Ç—É, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if (window.CommonUtils) {
            return window.CommonUtils.formatNumber(num);
        }
        // Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        return new Intl.NumberFormat('ru-RU').format(num);
    }
    
    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    showNotification(message, type = 'info') {
        console.log(`üè¶ BankModuleServer: ${type.toUpperCase()} - ${message}`);
        
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            z-index: 10001;
            font-weight: 600;
            max-width: 400px;
        `;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 3000);
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async loadTransactionsHistory() {
        try {
            const roomId = this.getRoomId();
            if (!roomId) {
                console.warn('‚ö†Ô∏è BankModuleServer: Room ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º ID –∏–≥—Ä–æ–∫–∞
            const playerId = this.bankState.playerId || this.getCurrentUserSync()?.id;
            if (!playerId) {
                console.warn('‚ö†Ô∏è BankModuleServer: Player ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
                this.bankState.transactions = [];
                return;
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
            const response = await fetch(`/api/bank/transactions/${roomId}/${playerId}`);
            if (!response.ok) {
                console.warn('‚ö†Ô∏è BankModuleServer: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π:', response.status);
                this.bankState.transactions = [];
                return;
            }

            const data = await response.json();
            if (data.success && data.data && Array.isArray(data.data.transactions)) {
                this.bankState.transactions = data.data.transactions;
                console.log('üìã BankModuleServer: –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', this.bankState.transactions.length);
            } else if (data.success && Array.isArray(data.transactions)) {
                // Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                this.bankState.transactions = data.transactions;
                console.log('üìã BankModuleServer: –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (fallback):', this.bankState.transactions.length);
            } else {
                this.bankState.transactions = [];
            }
        } catch (error) {
            console.error('‚ùå BankModuleServer: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π:', error);
            this.bankState.transactions = [];
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    updateTransactionsHistory() {
        const transactionsList = this.ui?.querySelector('#transactions-list-server');
        if (!transactionsList) return;

        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        transactionsList.innerHTML = '';

        if (!this.bankState.transactions || this.bankState.transactions.length === 0) {
            transactionsList.innerHTML = `
                <div class="no-transactions">
                    <div class="no-transactions-icon">üìã</div>
                    <div class="no-transactions-text">–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞</div>
                    <div class="no-transactions-subtext">–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</div>
                </div>
            `;
            return;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        const sortedTransactions = [...this.bankState.transactions].sort((a, b) => 
            new Date(b.timestamp || b.createdAt || 0) - new Date(a.timestamp || a.createdAt || 0)
        );

        // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞–∂–¥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        sortedTransactions.forEach((transaction, index) => {
            const transactionElement = this.createTransactionElement(transaction, index);
            transactionsList.appendChild(transactionElement);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        const badgeElement = this.ui?.querySelector('#new-transactions-server');
        if (badgeElement) {
            badgeElement.textContent = this.bankState.transactions.length.toString();
        }

        console.log(`üìã BankModuleServer: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ ${this.bankState.transactions.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    createTransactionElement(transaction, index) {
        const div = document.createElement('div');
        div.className = 'transaction-item';
        
        const { type, amount, recipient, sender, timestamp, description } = transaction;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ü–≤–µ—Ç –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        let icon = 'üí∞';
        let colorClass = '';
        let typeText = '';
        
        switch (type) {
            case 'transfer':
            case '–ø–µ—Ä–µ–≤–æ–¥':
                icon = 'üí∏';
                colorClass = 'transfer';
                typeText = '–ü–µ—Ä–µ–≤–æ–¥';
                break;
            case 'credit':
            case '–∫—Ä–µ–¥–∏—Ç':
                icon = 'üí≥';
                colorClass = amount > 0 ? 'credit-take' : 'credit-repay';
                typeText = amount > 0 ? '–í–∑—è—Ç –∫—Ä–µ–¥–∏—Ç' : '–ü–æ–≥–∞—à–µ–Ω –∫—Ä–µ–¥–∏—Ç';
                break;
            case 'payment':
            case '–ø–ª–∞—Ç–µ–∂':
                icon = 'üíµ';
                colorClass = 'payment';
                typeText = '–ü–ª–∞—Ç–µ–∂';
                break;
            default:
                icon = 'üí∞';
                colorClass = 'default';
                typeText = type || '–û–ø–µ—Ä–∞—Ü–∏—è';
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        const date = new Date(timestamp || transaction.createdAt);
        const timeStr = date.toLocaleString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ/–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        let participantText = '';
        if (type === 'transfer' || type === '–ø–µ—Ä–µ–≤–æ–¥') {
            if (recipient && this.bankState.playerId === recipient.id) {
                participantText = `–æ—Ç ${sender?.username || sender?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`;
                colorClass = 'transfer-in';
            } else {
                participantText = `–¥–ª—è ${recipient?.username || recipient?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`;
                colorClass = 'transfer-out';
            }
        }

        const amountText = amount ? `$${this.formatNumber(Math.abs(amount))}` : '';
        const amountClass = amount > 0 ? 'positive' : amount < 0 ? 'negative' : '';

        div.innerHTML = `
            <div class="transaction-header">
                <div class="transaction-icon ${colorClass}">${icon}</div>
                <div class="transaction-info">
                    <div class="transaction-type">${typeText}</div>
                    <div class="transaction-participant">${participantText}</div>
                </div>
                <div class="transaction-amount ${amountClass}">${amountText}</div>
            </div>
            <div class="transaction-details">
                <div class="transaction-time">${timeStr}</div>
                ${description ? `<div class="transaction-description">${description}</div>` : ''}
            </div>
        `;

        return div;
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
     */
    addTransaction(transaction) {
        if (!this.bankState.transactions) {
            this.bankState.transactions = [];
        }

        // –î–æ–±–∞–≤–ª—è–µ–º timestamp –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!transaction.timestamp && !transaction.createdAt) {
            transaction.timestamp = new Date().toISOString();
        }

        this.bankState.transactions.unshift(transaction);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
        if (this.bankState.transactions.length > 50) {
            this.bankState.transactions = this.bankState.transactions.slice(0, 50);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.updateTransactionsHistory();
        
        console.log('üìã BankModuleServer: –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é:', transaction);
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è
     */
    destroy() {
        if (this.ui && this.ui.parentNode) {
            this.ui.parentNode.removeChild(this.ui);
        }
        this.ui = null;
        console.log('üè¶ BankModuleServer: –£–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.BankModuleServer = BankModuleServer;
