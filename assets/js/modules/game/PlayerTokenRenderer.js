/**
 * PlayerTokenRenderer v1.0.0
 * –†–µ–Ω–¥–µ—Ä–µ—Ä —Ñ–∏—à–µ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ
 */

class PlayerTokenRenderer {
    constructor(config = {}) {
        this.gameState = config.gameState || null;
        this.eventBus = config.eventBus || null;
        this.movementService = config.movementService || null;
        
        this.tokens = new Map(); // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∏—à–µ–∫ –∏–≥—Ä–æ–∫–æ–≤
        this.colors = [
            '#ef4444', // –ö—Ä–∞—Å–Ω—ã–π
            '#3b82f6', // –°–∏–Ω–∏–π
            '#10b981', // –ó–µ–ª–µ–Ω—ã–π
            '#f59e0b', // –ñ–µ–ª—Ç—ã–π
            '#8b5cf6', // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            '#06b6d4', // –ì–æ–ª—É–±–æ–π
            '#f97316', // –û—Ä–∞–Ω–∂–µ–≤—ã–π
            '#84cc16'  // –õ–∞–π–º
        ];
        
        console.log('üéØ PlayerTokenRenderer: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        this.setupEventListeners();
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        if (this.eventBus) {
            this.eventBus.on('movement:step', this.handleMovementStep.bind(this));
            this.eventBus.on('movement:completed', this.handleMovementCompleted.bind(this));
            this.eventBus.on('game:player_joined', this.handlePlayerJoined.bind(this));
            this.eventBus.on('game:player_left', this.handlePlayerLeft.bind(this));
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –¥–≤–∏–∂–µ–Ω–∏—è
     */
    handleMovementStep(event) {
        const { playerId, step, position, isFinal } = event;
        this.animateTokenMovement(playerId, position, isFinal);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
     */
    handleMovementCompleted(event) {
        const { playerId, endPosition } = event;
        this.updateTokenPosition(playerId, endPosition);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
     */
    handlePlayerJoined(player) {
        this.createToken(player);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
     */
    handlePlayerLeft(playerId) {
        this.removeToken(playerId);
    }
    
    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ñ–∏—à–∫–∏
     */
    animateTokenMovement(playerId, position, isFinal = false) {
        const tokenElement = this.tokens.get(playerId);
        if (!tokenElement) return;
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–ª–µ–≤–æ–π –∫–ª–µ—Ç–∫–∏
        const targetCell = this.getCellCoordinates(position);
        if (!targetCell) return;
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        tokenElement.style.transition = isFinal ? 'all 0.5s ease-in-out' : 'all 0.3s ease-in-out';
        tokenElement.style.transform = `translate(${targetCell.x}px, ${targetCell.y}px)`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–≤–∏–∂–µ–Ω–∏—è
        if (!isFinal) {
            tokenElement.classList.add('moving');
        } else {
            setTimeout(() => {
                tokenElement.classList.remove('moving');
            }, 500);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–ª–µ—Ç–∫–∏
     */
    getCellCoordinates(position) {
        const { track, position: cellIndex } = position;
        
        if (track === 'outer') {
            return this.getOuterCellCoordinates(cellIndex);
        } else if (track === 'inner') {
            return this.getInnerCellCoordinates(cellIndex);
        }
        
        return null;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–Ω–µ—à–Ω–µ–π –∫–ª–µ—Ç–∫–∏
     */
    getOuterCellCoordinates(cellIndex) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫—Ä—É–≥–∞
        const angle = (cellIndex / 44) * 2 * Math.PI - Math.PI / 2;
        const radius = 200; // –†–∞–¥–∏—É—Å –≤–Ω–µ—à–Ω–µ–≥–æ –∫—Ä—É–≥–∞
        const centerX = 350; // –¶–µ–Ω—Ç—Ä –ø–æ–ª—è
        const centerY = 350;
        
        const x = centerX + Math.cos(angle) * radius;
        const y = centerY + Math.sin(angle) * radius;
        
        return { x: x - 15, y: y - 15 }; // –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏—à–∫–∏
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –∫–ª–µ—Ç–∫–∏
     */
    getInnerCellCoordinates(cellIndex) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫—Ä—É–≥–∞
        const angle = (cellIndex / 23) * 2 * Math.PI - Math.PI / 2;
        const radius = 120; // –†–∞–¥–∏—É—Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫—Ä—É–≥–∞
        const centerX = 350; // –¶–µ–Ω—Ç—Ä –ø–æ–ª—è
        const centerY = 350;
        
        const x = centerX + Math.cos(angle) * radius;
        const y = centerY + Math.sin(angle) * radius;
        
        return { x: x - 15, y: y - 15 }; // –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏—à–∫–∏
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ñ–∏—à–∫–∏
     */
    updateTokenPosition(playerId, position) {
        const tokenElement = this.tokens.get(playerId);
        if (!tokenElement) return;
        
        const coordinates = this.getCellCoordinates(position);
        if (coordinates) {
            tokenElement.style.transform = `translate(${coordinates.x}px, ${coordinates.y}px)`;
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏—à–∫–∏ –∏–≥—Ä–æ–∫–∞
     * @param {Object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @param {string} player.id - ID –∏–≥—Ä–æ–∫–∞
     * @param {string} player.username - –ò–º—è –∏–≥—Ä–æ–∫–∞
     * @param {string} player.token - –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω (—ç–º–æ–¥–∑–∏)
     * @param {number} player.position - –ü–æ–∑–∏—Ü–∏—è –Ω–∞ –ø–æ–ª–µ
     * @param {boolean} player.isActive - –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –∏–≥—Ä–æ–∫
     * @returns {HTMLElement} –≠–ª–µ–º–µ–Ω—Ç —Ñ–∏—à–∫–∏
     */
    createToken(player) {
        const tokenId = `token-${player.id}`;
        const colorIndex = Array.from(this.tokens.keys()).length % this.colors.length;
        const color = this.colors[colorIndex];
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ñ–∏—à–∫–∏
        const tokenElement = document.createElement('div');
        tokenElement.className = 'player-token';
        tokenElement.id = tokenId;
        tokenElement.dataset.playerId = player.id;
        tokenElement.dataset.position = player.position || 0;
        
        // –°—Ç–∏–ª–∏ —Ñ–∏—à–∫–∏
        tokenElement.style.cssText = `
            position: absolute;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            border: 3px solid ${color};
            background: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            font-weight: bold;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
            z-index: 100;
            transition: all 0.3s ease;
            cursor: pointer;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ç–æ–∫–µ–Ω–∞
        tokenElement.textContent = player.token || 'üéØ';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        if (player.isActive) {
            tokenElement.classList.add('active');
            tokenElement.style.animation = 'pulse 2s infinite';
            tokenElement.style.boxShadow = `0 0 0 4px ${color}40, 0 2px 8px rgba(0, 0, 0, 0.3)`;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        this.tokens.set(player.id, {
            element: tokenElement,
            player: player,
            color: color,
            position: player.position || 0
        });
        
        console.log(`üéØ PlayerTokenRenderer: –°–æ–∑–¥–∞–Ω–∞ —Ñ–∏—à–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${player.username}`);
        return tokenElement;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ñ–∏—à–∫–∏ –∏–≥—Ä–æ–∫–∞
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @param {number} newPosition - –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     */
    updatePosition(playerId, newPosition) {
        const tokenData = this.tokens.get(playerId);
        if (!tokenData) {
            console.warn(`‚ö†Ô∏è PlayerTokenRenderer: –§–∏—à–∫–∞ –∏–≥—Ä–æ–∫–∞ ${playerId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            return;
        }
        
        const { element, player } = tokenData;
        const oldPosition = tokenData.position;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –¥–∞–Ω–Ω—ã—Ö
        tokenData.position = newPosition;
        player.position = newPosition;
        element.dataset.position = newPosition;
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        const newCoords = this.getCellCoordinates(newPosition);
        if (newCoords) {
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            element.style.transition = 'all 0.5s ease-in-out';
            element.style.left = `${newCoords.x}px`;
            element.style.top = `${newCoords.y}px`;
            
            console.log(`üéØ PlayerTokenRenderer: –ò–≥—Ä–æ–∫ ${player.username} –ø–µ—Ä–µ–º–µ—â–µ–Ω —Å ${oldPosition} –Ω–∞ ${newPosition}`);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @param {boolean} isActive - –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –∏–≥—Ä–æ–∫
     */
    setActive(playerId, isActive) {
        const tokenData = this.tokens.get(playerId);
        if (!tokenData) return;
        
        const { element, color } = tokenData;
        
        if (isActive) {
            element.classList.add('active');
            element.style.animation = 'pulse 2s infinite';
            element.style.boxShadow = `0 0 0 4px ${color}40, 0 2px 8px rgba(0, 0, 0, 0.3)`;
        } else {
            element.classList.remove('active');
            element.style.animation = '';
            element.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.3)';
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–ª–µ—Ç–∫–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
     * @param {number} position - –ü–æ–∑–∏—Ü–∏—è –Ω–∞ –ø–æ–ª–µ
     * @returns {Object} –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã {x, y}
     */
    getCellCoordinates(position) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        const outerCells = document.querySelectorAll('#outer-track .track-cell');
        const innerCells = document.querySelectorAll('#inner-track .track-cell');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–º —Ç—Ä–µ–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–∑–∏—Ü–∏—è
        let targetCell;
        if (position < outerCells.length) {
            // –í–Ω–µ—à–Ω–∏–π —Ç—Ä–µ–∫
            targetCell = outerCells[position];
        } else {
            // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ç—Ä–µ–∫
            const innerPosition = position - outerCells.length;
            targetCell = innerCells[innerPosition];
        }
        
        if (!targetCell) {
            console.warn(`‚ö†Ô∏è PlayerTokenRenderer: –ö–ª–µ—Ç–∫–∞ —Å –ø–æ–∑–∏—Ü–∏–µ–π ${position} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            return null;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–ª–µ—Ç–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        const boardWrapper = document.querySelector('.board-wrapper');
        const cellRect = targetCell.getBoundingClientRect();
        const boardRect = boardWrapper.getBoundingClientRect();
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ñ–∏—à–∫—É –≤ –∫–ª–µ—Ç–∫–µ
        const cellCenterX = cellRect.left - boardRect.left + (cellRect.width / 2) - 16; // 16 = –ø–æ–ª–æ–≤–∏–Ω–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∏—à–∫–∏
        const cellCenterY = cellRect.top - boardRect.top + (cellRect.height / 2) - 16;
        
        return {
            x: cellCenterX,
            y: cellCenterY
        };
    }
    
    /**
     * –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ñ–∏—à–∫–∏ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ
     * @param {HTMLElement} tokenElement - –≠–ª–µ–º–µ–Ω—Ç —Ñ–∏—à–∫–∏
     * @param {number} position - –ü–æ–∑–∏—Ü–∏—è –Ω–∞ –ø–æ–ª–µ
     */
    placeToken(tokenElement, position) {
        const boardWrapper = document.querySelector('.board-wrapper');
        if (!boardWrapper) {
            console.error('‚ùå PlayerTokenRenderer: –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–∑–∏—Ü–∏–∏
        const coords = this.getCellCoordinates(position);
        if (!coords) return;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        tokenElement.style.left = `${coords.x}px`;
        tokenElement.style.top = `${coords.y}px`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        boardWrapper.appendChild(tokenElement);
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä –≤—Å–µ—Ö —Ñ–∏—à–µ–∫ –∏–≥—Ä–æ–∫–æ–≤
     * @param {Array} players - –ú–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤
     */
    renderPlayers(players) {
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∏—à–∫–∏
        this.clearAllTokens();
        
        // –°–æ–∑–¥–∞–µ–º –∏ —Ä–∞–∑–º–µ—â–∞–µ–º —Ñ–∏—à–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        players.forEach((player, index) => {
            const tokenElement = this.createToken({
                ...player,
                position: player.position || index, // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
                isActive: player.isActive || false
            });
            
            this.placeToken(tokenElement, player.position || index);
        });
        
        console.log(`üéØ PlayerTokenRenderer: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ ${players.length} —Ñ–∏—à–µ–∫ –∏–≥—Ä–æ–∫–æ–≤`);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏—à–µ–∫
     * @param {Array} players - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
     */
    updatePlayers(players) {
        players.forEach(player => {
            const tokenData = this.tokens.get(player.id);
            if (tokenData) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                if (player.position !== undefined && player.position !== tokenData.position) {
                    this.updatePosition(player.id, player.position);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                this.setActive(player.id, player.isActive || false);
            } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ñ–∏—à–∫—É
                const tokenElement = this.createToken(player);
                this.placeToken(tokenElement, player.position || 0);
            }
        });
        
        console.log('üéØ PlayerTokenRenderer: –§–∏—à–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏—à–∫–∏ –∏–≥—Ä–æ–∫–∞
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     */
    removeToken(playerId) {
        const tokenData = this.tokens.get(playerId);
        if (!tokenData) return;
        
        tokenData.element.remove();
        this.tokens.delete(playerId);
        
        console.log(`üéØ PlayerTokenRenderer: –§–∏—à–∫–∞ –∏–≥—Ä–æ–∫–∞ ${playerId} —É–¥–∞–ª–µ–Ω–∞`);
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∏—à–µ–∫
     */
    clearAllTokens() {
        this.tokens.forEach(tokenData => {
            tokenData.element.remove();
        });
        this.tokens.clear();
        
        console.log('üéØ PlayerTokenRenderer: –í—Å–µ —Ñ–∏—à–∫–∏ –æ—á–∏—â–µ–Ω—ã');
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏—à–∫–∏
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @returns {Object} –î–∞–Ω–Ω—ã–µ —Ñ–∏—à–∫–∏
     */
    getToken(playerId) {
        return this.tokens.get(playerId);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏—à–µ–∫
     * @returns {Map} –í—Å–µ —Ñ–∏—à–∫–∏
     */
    getAllTokens() {
        return this.tokens;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.PlayerTokenRenderer = PlayerTokenRenderer;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = PlayerTokenRenderer;
}
