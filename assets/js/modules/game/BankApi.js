/**
 * BankApi v1.0.0
 * API –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
 */

class BankApi {
    constructor() {
        this.baseUrl = '/api/bank';
        this.headers = {
            'Content-Type': 'application/json'
        };
        
        console.log('üè¶ BankApi: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
     */
    getHeaders() {
        const token = localStorage.getItem('aura_money_token');
        const userId = localStorage.getItem('aura_money_user_id');
        
        return {
            ...this.headers,
            'Authorization': `Bearer ${token}`,
            'x-user-id': userId
        };
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞
     */
    async request(endpoint, options = {}) {
        const url = `${this.baseUrl}${endpoint}`;
        const config = {
            headers: this.getHeaders(),
            ...options
        };
        
        try {
            const response = await fetch(url, config);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            return data;
        } catch (error) {
            console.error(`‚ùå BankApi: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ${endpoint}:`, error);
            throw error;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
     */
    async getPlayerBalance(playerId) {
        try {
            const response = await this.request(`/balance/${playerId}`);
            console.log(`üí∞ BankApi: –ü–æ–ª—É—á–µ–Ω –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞ ${playerId}:`, response);
            return response;
        } catch (error) {
            console.error(`‚ùå BankApi: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞ ${playerId}:`, error);
            throw error;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
     */
    async getAllBalances(roomId) {
        try {
            const response = await this.request(`/balances/${roomId}`);
            console.log(`üí∞ BankApi: –ü–æ–ª—É—á–µ–Ω—ã –±–∞–ª–∞–Ω—Å—ã –∫–æ–º–Ω–∞—Ç—ã ${roomId}:`, response);
            return response;
        } catch (error) {
            console.error(`‚ùå BankApi: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –∫–æ–º–Ω–∞—Ç—ã ${roomId}:`, error);
            throw error;
        }
    }
    
    /**
     * –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏
     */
    async transferMoney(fromPlayerId, toPlayerId, amount, roomId) {
        try {
            const response = await this.request('/transfer', {
                method: 'POST',
                body: JSON.stringify({
                    fromPlayerId: fromPlayerId,
                    toPlayerId: toPlayerId,
                    amount: amount,
                    roomId: roomId,
                    timestamp: new Date().toISOString()
                })
            });
            
            console.log(`üí∏ BankApi: –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω:`, response);
            return response;
        } catch (error) {
            console.error(`‚ùå BankApi: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:`, error);
            throw error;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
     */
    async updatePlayerBalance(playerId, newBalance, roomId, reason = 'manual') {
        try {
            const response = await this.request('/balance', {
                method: 'PUT',
                body: JSON.stringify({
                    playerId: playerId,
                    balance: newBalance,
                    roomId: roomId,
                    reason: reason,
                    timestamp: new Date().toISOString()
                })
            });
            
            console.log(`üí∞ BankApi: –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω:`, response);
            return response;
        } catch (error) {
            console.error(`‚ùå BankApi: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:`, error);
            throw error;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
     */
    async getTransactionHistory(playerId, roomId, limit = 50) {
        try {
            const response = await this.request(`/transactions/${roomId}/${playerId}?limit=${limit}`);
            console.log(`üìú BankApi: –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`, response);
            return response;
        } catch (error) {
            console.error(`‚ùå BankApi: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`, error);
            throw error;
        }
    }
    
    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–æ–º
     */
    async syncBankData(roomId) {
        try {
            const response = await this.request(`/sync/${roomId}`);
            console.log(`üîÑ BankApi: –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:`, response);
            return response;
        } catch (error) {
            console.error(`‚ùå BankApi: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:`, error);
            throw error;
        }
    }
    
    /**
     * –ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞
     */
    async payOffLoan(playerId, loanType, amount, roomId) {
        try {
            const response = await this.request('/payoff-loan', {
                method: 'POST',
                body: JSON.stringify({
                    playerId: playerId,
                    loanType: loanType,
                    amount: amount,
                    roomId: roomId,
                    timestamp: new Date().toISOString()
                })
            });
            
            console.log(`üí≥ BankApi: –ö—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω:`, response);
            return response;
        } catch (error) {
            console.error(`‚ùå BankApi: –û—à–∏–±–∫–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞:`, error);
            throw error;
        }
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞
     */
    async addChild(playerId, roomId) {
        try {
            const response = await this.request('/add-child', {
                method: 'POST',
                body: JSON.stringify({
                    playerId: playerId,
                    roomId: roomId,
                    timestamp: new Date().toISOString()
                })
            });
            
            console.log(`üë∂ BankApi: –†–µ–±–µ–Ω–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω:`, response);
            return response;
        } catch (error) {
            console.error(`‚ùå BankApi: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞:`, error);
            throw error;
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.BankApi = BankApi;
