/**
 * PlayersPanel v2.0.0 - –†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç GameStateManager –∏ PlayerList –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */

class PlayersPanel {
    constructor(config = {}) {
        this.gameStateManager = config.gameStateManager || null;
        this.eventBus = config.eventBus || null;
        this.containerId = config.containerId || 'players-panel';
        
        // –°–æ–∑–¥–∞–µ–º PlayerList –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
        this.playerList = null;
        this.currentUser = null;
        
        console.log('üë• PlayersPanel v2.0: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    init() {
        this.container = document.getElementById(this.containerId);
        if (!this.container) {
            console.error('‚ùå PlayersPanel: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', this.containerId);
            return;
        }
        
        this.setupEventListeners();
        this.render();
        this.initializePlayerList();
        this.renderCurrentPlayerInfo();
        
        console.log('‚úÖ PlayersPanel v2.0: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PlayerList
     */
    initializePlayerList() {
        if (!this.gameStateManager) {
            console.warn('‚ö†Ô∏è PlayersPanel: GameStateManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º PlayerList —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        this.playerList = new PlayerList('players-list', {
            showBalance: true,
            showStatus: true,
            showToken: true,
            showOrder: false,
            showCurrentUser: false, // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
            filterCurrentUser: true, // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
            sortBy: 'status'
        });
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GameStateManager
        this.gameStateManager.on('state:updated', (state) => {
            this.updateFromGameState(state);
        });
        
        this.gameStateManager.on('turn:changed', (data) => {
            this.handleTurnChanged(data);
        });
        
        this.gameStateManager.on('players:updated', (data) => {
            this.handlePlayersUpdated(data);
        });
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        if (this.eventBus) {
            // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
            this.eventBus.on('game:started', (data) => {
                if (data && Array.isArray(data.players)) {
                    this.gameStateManager?.updateFromServer({ players: data.players });
                }
            });
            
            this.eventBus.on('game:playersUpdated', (data) => {
                if (data && Array.isArray(data.players)) {
                    this.gameStateManager?.updateFromServer({ players: data.players });
                }
            });
            
            this.eventBus.on('game:activePlayerChanged', (data) => {
                if (data && data.activePlayer) {
                    this.gameStateManager?.updateFromServer({ activePlayer: data.activePlayer });
                }
            });
        }
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    render() {
        if (!this.container) return;
        
        this.container.innerHTML = `
            <div class="players-panel">
                <div class="panel-grid">
                    <header class="panel-header">
                        <h3>üë• –ò–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ</h3>
                        <div class="players-count" id="players-count">0/4</div>
                    </header>
                    
                    <section id="current-user-profile" class="current-user-profile">
                        <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –±—É–¥–µ—Ç –∑–¥–µ—Å—å -->
                    </section>
                    
                    <main class="players-list" id="players-list">
                        <div class="no-players-message">
                            <p>–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤</p>
                            <p>–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</p>
                        </div>
                    </main>
                    
                    <section class="game-controls">
                        <div class="dice-controls">
                            <button class="btn btn-primary" id="roll-dice" disabled>
                                <span class="btn-icon">üé≤</span>
                                <span class="btn-text">–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫</span>
                            </button>
                            <button class="btn btn-secondary" id="pass-turn" disabled>
                                <span class="btn-icon">‚û°Ô∏è</span>
                                <span class="btn-text">–ü–µ—Ä–µ–¥–∞—Ç—å —Ö–æ–¥</span>
                            </button>
                        </div>
                        
                        <div class="turn-history">
                            <h4>üìä –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
                            <div class="player-info">
                                <span class="label">–ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫:</span>
                                <span class="value" id="current-player">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                            </div>
                        </div>
                        
                        <button class="btn btn-secondary" id="view-stats">
                            <span class="btn-icon">üìà</span>
                            <span class="btn-text">–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</span>
                        </button>
                    </section>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        this.addStyles();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.setupControls();
        
        console.log('‚úÖ PlayersPanel v2.0: –û—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω');
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç GameStateManager
     * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     */
    updateFromGameState(state) {
        if (!this.playerList) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        this.playerList.updatePlayers(
            state.players || [],
            state.activePlayer,
            this.getCurrentUserId()
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤
        this.updatePlayersCount(state.players?.length || 0);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –∏–≥—Ä–æ–∫–µ
        this.updateActivePlayerInfo(state.activePlayer);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.updateControlButtons(state);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ö–æ–¥–∞
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã —Ö–æ–¥–∞
     */
    handleTurnChanged(data) {
        console.log('üîÑ PlayersPanel: –°–º–µ–Ω–∞ —Ö–æ–¥–∞', data);
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        if (this.playerList && data.activePlayer) {
            this.playerList.highlightActivePlayer(data.activePlayer.id);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –∏–≥—Ä–æ–∫–µ
        this.updateActivePlayerInfo(data.activePlayer);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
     */
    handlePlayersUpdated(data) {
        console.log('üë• PlayersPanel: –ò–≥—Ä–æ–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', data);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤
        if (data.players) {
            this.updatePlayersCount(data.players.length);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
     * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
     */
    updatePlayersCount(count) {
        const playersCount = document.getElementById('players-count');
        if (playersCount) {
            playersCount.textContent = `${count}/4`;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –∏–≥—Ä–æ–∫–µ
     * @param {Object} activePlayer - –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
     */
    updateActivePlayerInfo(activePlayer) {
        const currentPlayer = document.getElementById('current-player');
        if (currentPlayer) {
            if (activePlayer) {
                currentPlayer.textContent = PlayerStatusUtils.getPlayerDisplayName(activePlayer);
            } else {
                currentPlayer.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
            }
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     */
    updateControlButtons(state) {
        const rollBtn = document.getElementById('roll-dice');
        const passBtn = document.getElementById('pass-turn');
        
        if (rollBtn) {
            rollBtn.disabled = !state.canRoll;
        }
        
        if (passBtn) {
            passBtn.disabled = !state.canEndTurn;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {string|null} ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getCurrentUserId() {
        if (this.currentUser) {
            return this.currentUser.id || this.currentUser.userId || this.currentUser.username;
        }
        
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ sessionStorage
            const bundleRaw = sessionStorage.getItem('am_player_bundle');
            if (bundleRaw) {
                const bundle = JSON.parse(bundleRaw);
                this.currentUser = bundle.currentUser;
                return this.currentUser?.id || this.currentUser?.userId || this.currentUser?.username;
            }
            
            // Fallback –∫ localStorage
            const userRaw = localStorage.getItem('aura_money_user');
            if (userRaw) {
                this.currentUser = JSON.parse(userRaw);
                return this.currentUser?.id || this.currentUser?.userId || this.currentUser?.username;
            }
        } catch (error) {
            console.error('‚ùå PlayersPanel: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
        
        return null;
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    renderCurrentPlayerInfo() {
        const currentPlayerInfoContainer = document.getElementById('current-user-profile');
        if (!currentPlayerInfoContainer) {
            console.warn('‚ö†Ô∏è PlayersPanel: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return;
        }

        try {
            const currentUser = this.getCurrentUserFromStorage();
            
            if (currentUser) {
                const tokenEmoji = PlayerStatusUtils.getPlayerToken(currentUser);
                const avatarHtml = tokenEmoji; // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ —Ç–æ–∫–µ–Ω
                
                currentPlayerInfoContainer.innerHTML = `
                    <div class="current-user-card">
                        <div class="user-avatar">${avatarHtml}</div>
                        <div class="user-details">
                            <span class="user-name">${PlayerStatusUtils.getPlayerDisplayName(currentUser)}</span>
                            <span class="user-status">–í –∏–≥—Ä–µ</span>
                        </div>
                    </div>
                `;
                
                this.currentUser = currentUser;
                console.log('‚úÖ PlayersPanel: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–∞:', currentUser.username);
            } else {
                currentPlayerInfoContainer.innerHTML = `
                    <div class="current-user-card">
                        <div class="user-avatar">G</div>
                        <div class="user-details">
                            <span class="user-name">–ì–æ—Å—Ç—å</span>
                            <span class="user-status">–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</span>
                        </div>
                    </div>
                `;
                console.warn('‚ö†Ô∏è PlayersPanel: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            }
        } catch (error) {
            console.error('‚ùå PlayersPanel: –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
            currentPlayerInfoContainer.innerHTML = `
                <div class="current-user-card">
                    <div class="user-avatar">?</div>
                    <div class="user-details">
                        <span class="user-name">–û—à–∏–±–∫–∞</span>
                        <span class="user-status">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</span>
                    </div>
                </div>
            `;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     * @returns {Object|null} –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getCurrentUserFromStorage() {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ sessionStorage
            const bundleRaw = sessionStorage.getItem('am_player_bundle');
            if (bundleRaw) {
                const bundle = JSON.parse(bundleRaw);
                return bundle?.currentUser || null;
            }
            
            // Fallback –∫ localStorage
            const storedUser = localStorage.getItem('aura_money_user');
            if (storedUser) {
                return JSON.parse(storedUser);
            }
        } catch (error) {
            console.error('‚ùå PlayersPanel: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', error);
        }
        
        return null;
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ PlayersPanel)
     */
    addStyles() {
        if (document.getElementById('players-panel-styles')) return;
        
        const styles = document.createElement('style');
        styles.id = 'players-panel-styles';
        styles.textContent = `
            .players-panel {
                background: linear-gradient(145deg, rgba(20, 25, 40, 0.95), rgba(15, 20, 35, 0.95));
                border-radius: 1.5rem;
                padding: 2rem;
                border: 2px solid rgba(99, 102, 241, 0.3);
                backdrop-filter: blur(20px);
                color: #ffffff;
                max-width: 400px;
                width: 100%;
                box-shadow: 
                    0 20px 40px rgba(0, 0, 0, 0.4),
                    0 0 0 1px rgba(255, 255, 255, 0.05),
                    inset 0 1px 0 rgba(255, 255, 255, 0.1);
                position: relative;
                overflow: hidden;
                height: fit-content;
                max-height: calc(100vh - 120px);
            }
            
            .panel-grid {
                display: grid;
                grid-template-columns: 1fr;
                grid-template-rows: auto auto 1fr auto;
                grid-template-areas: 
                    "header"
                    "current-user"
                    "players"
                    "controls";
                gap: 1.5rem;
                height: 100%;
            }
            
            .panel-header {
                grid-area: header;
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding-bottom: 1rem;
                border-bottom: 2px solid rgba(99, 102, 241, 0.2);
                position: relative;
            }
            
            .panel-header h3 {
                margin: 0;
                font-size: 1.3rem;
                color: #ffffff;
                font-weight: 700;
                text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
            }
            
            .players-count {
                background: linear-gradient(135deg, rgba(99, 102, 241, 0.3), rgba(139, 92, 246, 0.3));
                color: #ffffff;
                padding: 0.4rem 1rem;
                border-radius: 1rem;
                font-weight: 700;
                font-size: 0.9rem;
                border: 1px solid rgba(99, 102, 241, 0.4);
                box-shadow: 0 4px 12px rgba(99, 102, 241, 0.2);
                backdrop-filter: blur(10px);
            }
            
            .current-user-profile {
                grid-area: current-user;
                padding: 0;
            }

            .current-user-card {
                display: flex;
                align-items: center;
                gap: 1rem;
                background: linear-gradient(135deg, rgba(99, 102, 241, 0.15), rgba(139, 92, 246, 0.1));
                border-radius: 1rem;
                padding: 1rem 1.25rem;
                border: 2px solid rgba(99, 102, 241, 0.3);
                box-shadow: 0 8px 25px rgba(99, 102, 241, 0.2);
                backdrop-filter: blur(10px);
                position: relative;
                overflow: hidden;
            }

            .current-user-card .user-avatar {
                width: 40px;
                height: 40px;
                border-radius: 50%;
                background: var(--accent-primary);
                color: white;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 1.5rem;
                font-weight: bold;
            }

            .current-user-card .user-details {
                display: flex;
                flex-direction: column;
            }

            .current-user-card .user-name {
                font-size: 1.1rem;
                font-weight: 600;
                color: white;
            }

            .current-user-card .user-status {
                font-size: 0.85rem;
                color: rgba(255, 255, 255, 0.7);
            }

            .players-list {
                grid-area: players;
                overflow-y: auto;
                max-height: 300px;
                padding-right: 0.5rem;
            }
            
            .no-players-message {
                text-align: center;
                color: #a0a0a0;
                padding: 1rem;
                background: rgba(255, 255, 255, 0.05);
                border-radius: 0.75rem;
                border: 1px solid rgba(255, 255, 255, 0.1);
            }
            
            .player-item {
                display: grid;
                grid-template-columns: auto 1fr auto;
                grid-template-areas: "avatar info money";
                align-items: center;
                gap: 1rem;
                padding: 1rem;
                background: linear-gradient(135deg, rgba(255, 255, 255, 0.08), rgba(255, 255, 255, 0.05));
                border-radius: 1rem;
                border: 2px solid rgba(255, 255, 255, 0.1);
                margin-bottom: 0.75rem;
                transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                position: relative;
                overflow: hidden;
                backdrop-filter: blur(10px);
                min-height: 80px;
            }
            
            .player-item.active {
                background: linear-gradient(135deg, rgba(99, 102, 241, 0.25), rgba(139, 92, 246, 0.2));
                border-color: #6366f1;
                box-shadow: 
                    0 0 25px rgba(99, 102, 241, 0.4),
                    0 0 50px rgba(99, 102, 241, 0.2);
                transform: scale(1.02);
                animation: activePlayerPulse 2s ease-in-out infinite;
            }
            
            @keyframes activePlayerPulse {
                0%, 100% {
                    box-shadow: 
                        0 0 25px rgba(99, 102, 241, 0.4),
                        0 0 50px rgba(99, 102, 241, 0.2);
                }
                50% {
                    box-shadow: 
                        0 0 35px rgba(99, 102, 241, 0.6),
                        0 0 70px rgba(99, 102, 241, 0.3);
                }
            }
            
            .player-avatar {
                grid-area: avatar;
                width: 45px;
                height: 45px;
                border-radius: 50%;
                background: linear-gradient(135deg, rgba(99, 102, 241, 0.3), rgba(139, 92, 246, 0.3));
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 1.6rem;
                border: 3px solid rgba(99, 102, 241, 0.4);
                transition: all 0.4s ease;
                box-shadow: 0 4px 12px rgba(99, 102, 241, 0.2);
                position: relative;
                z-index: 2;
            }
            
            .player-item.active .player-avatar {
                animation: avatarGlow 2s ease-in-out infinite;
            }
            
            @keyframes avatarGlow {
                0%, 100% {
                    box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);
                }
                50% {
                    box-shadow: 0 6px 20px rgba(99, 102, 241, 0.6);
                }
            }
            
            .player-info {
                grid-area: info;
                display: flex;
                flex-direction: column;
                gap: 0.25rem;
            }
            
            .player-name {
                color: #ffffff;
                font-weight: 600;
                font-size: 0.9rem;
                margin: 0;
            }
            
            .player-status {
                color: #a0a0a0;
                font-size: 0.8rem;
                margin: 0;
            }
            
            .player-money {
                grid-area: money;
                display: flex;
                align-items: center;
                gap: 0.5rem;
                background: linear-gradient(135deg, rgba(16, 185, 129, 0.15), rgba(5, 150, 105, 0.1));
                padding: 0.5rem 0.75rem;
                border-radius: 0.75rem;
                border: 1px solid rgba(16, 185, 129, 0.3);
                box-shadow: 0 2px 8px rgba(16, 185, 129, 0.2);
                white-space: nowrap;
            }
            
            .money-icon {
                font-size: 1rem;
                filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.3));
            }
            
            .money-amount {
                color: #10b981;
                font-weight: 700;
                font-size: 0.9rem;
                text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
            }
            
            .game-controls {
                grid-area: controls;
                display: flex;
                flex-direction: column;
                gap: 1rem;
            }

            .dice-controls {
                display: flex;
                gap: 1rem;
                flex-direction: row;
                margin-bottom: 1.5rem;
            }

            .dice-controls .btn {
                flex: 1;
                min-width: 140px;
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 0.5rem;
            }
            
            .turn-history {
                background: linear-gradient(135deg, rgba(255, 255, 255, 0.08), rgba(255, 255, 255, 0.05));
                border-radius: 1rem;
                padding: 1.5rem;
                border: 2px solid rgba(99, 102, 241, 0.2);
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            }
            
            .turn-history h4 {
                margin: 0 0 0.5rem 0;
                color: #ffffff;
                font-size: 1rem;
            }
            
            .player-info {
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            
            .player-info .label {
                color: #a0a0a0;
                font-size: 0.9rem;
            }
            
            .player-info .value {
                color: #ffffff;
                font-weight: 600;
                font-size: 0.9rem;
            }
            
            .btn {
                padding: 1rem 1.5rem;
                border: none;
                border-radius: 1rem;
                font-weight: 700;
                font-size: 0.95rem;
                cursor: pointer;
                transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                text-decoration: none;
                display: inline-flex;
                align-items: center;
                justify-content: center;
                gap: 0.75rem;
                position: relative;
                overflow: hidden;
                backdrop-filter: blur(10px);
            }
            
            .btn-primary {
                background: linear-gradient(135deg, #6366f1, #8b5cf6);
                color: white;
                border: 2px solid rgba(99, 102, 241, 0.3);
                box-shadow: 0 8px 25px rgba(99, 102, 241, 0.3);
            }
            
            .btn-primary:hover:not(:disabled) {
                background: linear-gradient(135deg, #8b5cf6, #a855f7);
                transform: translateY(-3px);
                box-shadow: 0 12px 35px rgba(99, 102, 241, 0.5);
                border-color: rgba(99, 102, 241, 0.6);
            }
            
            .btn-secondary {
                background: linear-gradient(135deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.1));
                color: #ffffff;
                border: 2px solid rgba(255, 255, 255, 0.2);
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            }
            
            .btn-secondary:hover:not(:disabled) {
                background: linear-gradient(135deg, rgba(255, 255, 255, 0.25), rgba(255, 255, 255, 0.15));
                border-color: rgba(255, 255, 255, 0.4);
                transform: translateY(-3px);
                box-shadow: 0 12px 35px rgba(0, 0, 0, 0.3);
            }
            
            .btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
                transform: none !important;
                box-shadow: none !important;
            }
        `;
        
        document.head.appendChild(styles);
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    setupControls() {
        const rollDiceBtn = document.getElementById('roll-dice');
        if (rollDiceBtn) {
            rollDiceBtn.addEventListener('click', () => {
                this.rollDice();
            });
        }

        const passTurnBtn = document.getElementById('pass-turn');
        if (passTurnBtn) {
            passTurnBtn.addEventListener('click', () => {
                this.passTurn();
            });
        }
        
        const viewStatsBtn = document.getElementById('view-stats');
        if (viewStatsBtn) {
            viewStatsBtn.addEventListener('click', () => {
                this.showStats();
            });
        }
    }
    
    /**
     * –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
     */
    rollDice() {
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è TurnService
        if (this.eventBus) {
            this.eventBus.emit('dice:roll', {});
        }
    }

    /**
     * –ü–µ—Ä–µ–¥–∞—á–∞ —Ö–æ–¥–∞
     */
    passTurn() {
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è TurnService
        if (this.eventBus) {
            this.eventBus.emit('turn:pass', {});
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    showStats() {
        console.log('üìä PlayersPanel: –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    destroy() {
        if (this.playerList) {
            this.playerList.destroy();
        }
        
        console.log('üë• PlayersPanel v2.0: –£–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
window.PlayersPanel = PlayersPanel;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = PlayersPanel;
}
