/**
 * PlayersPanel v1.0.0
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
 */

class PlayersPanel {
    constructor(config = {}) {
        this.gameState = config.gameState || null;
        this.eventBus = config.eventBus || null;
        this.containerId = config.containerId || 'game-control-panel';
        
        console.log('üë• PlayersPanel: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    init() {
        this.container = document.getElementById(this.containerId);
        if (!this.container) {
            console.error('‚ùå PlayersPanel: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', this.containerId);
            return;
        }
        
        this.setupEventListeners();
        this.render();
        
        console.log('‚úÖ PlayersPanel: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        if (this.eventBus) {
            this.eventBus.on('game:playersUpdated', (data) => {
                this.updatePlayers(data.players);
            });
            
            this.eventBus.on('game:activePlayerChanged', (data) => {
                this.updateActivePlayer(data.activePlayer);
            });
        }
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    render() {
        if (!this.container) return;
        
        this.container.innerHTML = `
            <div class="players-panel">
                <div class="panel-header">
                    <h3>üë• –ò–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ</h3>
                    <div class="players-count" id="players-count">0/4</div>
                </div>
                
                <div class="players-list" id="players-list">
                    <div class="no-players-message">
                        <p>–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤</p>
                        <p>–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</p>
                    </div>
                </div>
                
                <div class="game-controls">
                    <button class="btn btn-primary" id="roll-dice" disabled>
                        üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
                    </button>
                    
                    <div class="turn-info">
                        <div class="turn-item">
                            <span class="label">–•–æ–¥:</span>
                            <span class="value" id="current-turn">–û–∂–∏–¥–∞–Ω–∏–µ</span>
                        </div>
                        <div class="turn-item">
                            <span class="label">–ö—É–±–∏–∫:</span>
                            <span class="value" id="dice-result">-</span>
                        </div>
                    </div>
                    
                    <div class="turn-history">
                        <h4>–•–æ–¥ 1</h4>
                        <div class="player-info">
                            <span class="label">–ò–≥—Ä–æ–∫:</span>
                            <span class="value" id="current-player">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                        </div>
                    </div>
                    
                    <button class="btn btn-secondary" id="view-stats">
                        üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    </button>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        this.addStyles();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.setupControls();
        
        console.log('‚úÖ PlayersPanel: –û—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω');
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
     */
    addStyles() {
        if (document.getElementById('players-panel-styles')) return;
        
        const styles = document.createElement('style');
        styles.id = 'players-panel-styles';
        styles.textContent = `
            .players-panel {
                background: rgba(255, 255, 255, 0.05);
                border-radius: 1rem;
                padding: 1.5rem;
                border: 1px solid rgba(255, 255, 255, 0.1);
                backdrop-filter: blur(10px);
                color: #ffffff;
                max-width: 350px;
                width: 100%;
            }
            
            .panel-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 1rem;
                padding-bottom: 0.5rem;
                border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            }
            
            .panel-header h3 {
                margin: 0;
                font-size: 1.2rem;
                color: #ffffff;
            }
            
            .players-count {
                background: rgba(59, 130, 246, 0.2);
                color: #3b82f6;
                padding: 0.25rem 0.75rem;
                border-radius: 0.5rem;
                font-weight: 600;
                font-size: 0.9rem;
            }
            
            .players-list {
                margin-bottom: 1.5rem;
            }
            
            .no-players-message {
                text-align: center;
                color: #a0a0a0;
                padding: 1rem;
                background: rgba(255, 255, 255, 0.05);
                border-radius: 0.75rem;
                border: 1px solid rgba(255, 255, 255, 0.1);
            }
            
            .no-players-message p {
                margin: 0.25rem 0;
                font-size: 0.9rem;
            }
            
            .player-item {
                display: flex;
                align-items: center;
                gap: 0.75rem;
                padding: 0.75rem;
                background: rgba(255, 255, 255, 0.05);
                border-radius: 0.75rem;
                border: 1px solid rgba(255, 255, 255, 0.1);
                margin-bottom: 0.5rem;
                transition: all 0.3s ease;
            }
            
            .player-item:hover {
                background: rgba(255, 255, 255, 0.08);
                border-color: rgba(255, 255, 255, 0.2);
            }
            
            .player-item.active {
                background: rgba(59, 130, 246, 0.1);
                border-color: #3b82f6;
            }
            
            .player-avatar {
                width: 32px;
                height: 32px;
                border-radius: 50%;
                background: rgba(255, 255, 255, 0.1);
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 1.2rem;
                border: 2px solid rgba(255, 255, 255, 0.2);
                transition: all 0.3s ease;
            }
            
            .player-item:hover .player-avatar {
                border-color: rgba(255, 255, 255, 0.4);
                background: rgba(255, 255, 255, 0.15);
            }
            
            .player-info {
                flex: 1;
            }
            
            .player-name {
                color: #ffffff;
                font-weight: 600;
                font-size: 0.9rem;
                margin: 0;
            }
            
            .player-status {
                color: #a0a0a0;
                font-size: 0.8rem;
                margin: 0;
            }
            
            .player-money {
                color: #10b981;
                font-weight: 600;
                font-size: 0.8rem;
            }
            
            .game-controls {
                display: flex;
                flex-direction: column;
                gap: 1rem;
            }
            
            .turn-info {
                background: rgba(255, 255, 255, 0.05);
                border-radius: 0.75rem;
                padding: 1rem;
                border: 1px solid rgba(255, 255, 255, 0.1);
            }
            
            .turn-item {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 0.5rem;
            }
            
            .turn-item:last-child {
                margin-bottom: 0;
            }
            
            .turn-item .label {
                color: #a0a0a0;
                font-size: 0.9rem;
            }
            
            .turn-item .value {
                color: #ffffff;
                font-weight: 600;
                font-size: 0.9rem;
            }
            
            .turn-history {
                background: rgba(255, 255, 255, 0.05);
                border-radius: 0.75rem;
                padding: 1rem;
                border: 1px solid rgba(255, 255, 255, 0.1);
            }
            
            .turn-history h4 {
                margin: 0 0 0.5rem 0;
                color: #ffffff;
                font-size: 1rem;
            }
            
            .player-info {
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            
            .player-info .label {
                color: #a0a0a0;
                font-size: 0.9rem;
            }
            
            .player-info .value {
                color: #ffffff;
                font-weight: 600;
                font-size: 0.9rem;
            }
            
            .btn {
                padding: 0.75rem 1rem;
                border: none;
                border-radius: 0.75rem;
                font-weight: 600;
                font-size: 0.9rem;
                cursor: pointer;
                transition: all 0.3s ease;
                text-decoration: none;
                display: inline-flex;
                align-items: center;
                justify-content: center;
                gap: 0.5rem;
            }
            
            .btn-primary {
                background: linear-gradient(135deg, #3b82f6, #2563eb);
                color: white;
            }
            
            .btn-primary:hover:not(:disabled) {
                background: linear-gradient(135deg, #2563eb, #1d4ed8);
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
            }
            
            .btn-secondary {
                background: rgba(255, 255, 255, 0.1);
                color: #ffffff;
                border: 1px solid rgba(255, 255, 255, 0.2);
            }
            
            .btn-secondary:hover:not(:disabled) {
                background: rgba(255, 255, 255, 0.15);
                border-color: rgba(255, 255, 255, 0.3);
            }
            
            .btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
                transform: none !important;
                box-shadow: none !important;
            }
        `;
        
        document.head.appendChild(styles);
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    setupControls() {
        const rollDiceBtn = document.getElementById('roll-dice');
        if (rollDiceBtn) {
            rollDiceBtn.addEventListener('click', () => {
                this.rollDice();
            });
        }
        
        const viewStatsBtn = document.getElementById('view-stats');
        if (viewStatsBtn) {
            viewStatsBtn.addEventListener('click', () => {
                this.showStats();
            });
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
     */
    updatePlayers(players) {
        const playersList = document.getElementById('players-list');
        const playersCount = document.getElementById('players-count');
        
        if (!playersList || !playersCount) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        playersCount.textContent = `${players.length}/4`;
        
        if (players.length === 0) {
            playersList.innerHTML = `
                <div class="no-players-message">
                    <p>–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤</p>
                    <p>–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</p>
                </div>
            `;
        } else {
            playersList.innerHTML = players.map((player, index) => `
                <div class="player-item ${index === 0 ? 'active' : ''}" data-player-id="${player.id}">
                    <div class="player-avatar">${this.getTokenIcon(player.token)}</div>
                    <div class="player-info">
                        <p class="player-name">${player.username || `–ò–≥—Ä–æ–∫ ${index + 1}`}</p>
                        <p class="player-status">${player.isReady ? '–ì–æ—Ç–æ–≤' : '–ì–æ—Ç–æ–≤–∏—Ç—Å—è'}</p>
                    </div>
                    <div class="player-money">$${player.money || 0}</div>
                </div>
            `).join('');
        }
        
        console.log('üë• PlayersPanel: –ò–≥—Ä–æ–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', players.length);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    updateActivePlayer(activePlayer) {
        const playerItems = document.querySelectorAll('.player-item');
        const currentPlayer = document.getElementById('current-player');
        const currentTurn = document.getElementById('current-turn');
        
        playerItems.forEach(item => {
            item.classList.remove('active');
            if (item.dataset.playerId === activePlayer.id) {
                item.classList.add('active');
            }
        });
        
        if (currentPlayer) {
            currentPlayer.textContent = activePlayer.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫';
        }
        
        if (currentTurn) {
            currentTurn.textContent = '–ê–∫—Ç–∏–≤–µ–Ω';
        }
        
        console.log('üéØ PlayersPanel: –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:', activePlayer.username);
    }
    
    /**
     * –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
     */
    rollDice() {
        if (this.gameState) {
            const roll = this.gameState.rollDice();
            const diceResult = document.getElementById('dice-result');
            if (diceResult) {
                diceResult.textContent = roll;
            }
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —Ç–æ–∫–µ–Ω–∞
     */
    getTokenIcon(tokenId) {
        const tokenIcons = {
            'lion': 'ü¶Å',
            'eagle': 'ü¶Ö', 
            'fox': 'ü¶ä',
            'bear': 'üêª',
            'tiger': 'üêÖ',
            'wolf': 'üê∫',
            'elephant': 'üêò',
            'shark': 'ü¶à',
            'owl': 'ü¶â',
            'dolphin': 'üê¨'
        };
        
        return tokenIcons[tokenId] || 'üéØ';
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    showStats() {
        console.log('üìä PlayersPanel: –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    }
}

window.PlayersPanel = PlayersPanel;
