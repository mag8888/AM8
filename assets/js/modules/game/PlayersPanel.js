/**
 * PlayersPanel v2.0.0 - –†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç GameStateManager –∏ PlayerList –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */

class PlayersPanel {
    constructor(config = {}) {
        this.gameStateManager = config.gameStateManager || null;
        this.eventBus = config.eventBus || null;
        this.containerId = config.containerId || 'players-panel';
        
        // –°–æ–∑–¥–∞–µ–º PlayerList –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
        this.playerList = null;
        this.currentUser = null;
        this._lastStateKey = null;
        
        // –°–æ–∑–¥–∞–µ–º BankModule –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.bankModule = null;
        
        console.log('üë• PlayersPanel v2.0: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    init() {
        this.container = document.getElementById(this.containerId);
        if (!this.container) {
            console.error('‚ùå PlayersPanel: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', this.containerId);
            return;
        }
        
        this.setupEventListeners();
        this.render();
        
        // –°–æ–∑–¥–∞–µ–º BankModule –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.createBankModule();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        if (this.gameStateManager && typeof this.gameStateManager.getState === 'function') {
            try {
                const state = this.gameStateManager.getState();
                this.updateFromGameState(state || {});
            } catch (_) {}
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        setTimeout(() => {
            this.forceLoadPlayers();
        }, 1000);
        
        console.log('‚úÖ PlayersPanel v2.0: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ BankModule
     */
    createBankModule() {
        if (this.bankModule) {
            return; // –£–∂–µ —Å–æ–∑–¥–∞–Ω
        }
        
        if (!window.BankModule) {
            console.warn('‚ö†Ô∏è PlayersPanel: BankModule –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            return;
        }
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ app
            const app = window.app;
            if (!app) {
                console.warn('‚ö†Ô∏è PlayersPanel: App –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            const gameState = app.getModule('gameState');
            const eventBus = app.getEventBus();
            const roomApi = app.getModule('roomApi');
            const professionSystem = app.getModule('professionSystem');
            
            this.bankModule = new window.BankModule({
                gameState: gameState,
                eventBus: eventBus,
                roomApi: roomApi,
                professionSystem: professionSystem,
                gameStateManager: this.gameStateManager
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ app –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
            app.modules.set('bankModule', this.bankModule);
            
            console.log('üè¶ PlayersPanel: BankModule —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
        } catch (error) {
            console.error('‚ùå PlayersPanel: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è BankModule:', error);
        }
    }
    
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        if (this.eventBus) {
            // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
            this.eventBus.on('game:started', (data) => {
                if (data && Array.isArray(data.players)) {
                    this.gameStateManager?.updateFromServer({ players: data.players });
                }
            });
            
            this.eventBus.on('game:playersUpdated', (data) => {
                if (data && Array.isArray(data.players)) {
                    this.gameStateManager?.updateFromServer({ players: data.players });
                }
            });
            
            this.eventBus.on('game:activePlayerChanged', (data) => {
                if (data && data.activePlayer) {
                    this.gameStateManager?.updateFromServer({ activePlayer: data.activePlayer });
                }
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É–±–∏–∫–∞
            this.eventBus.on('dice:rolled', (data) => {
                if (data && data.value !== undefined) {
                    this.updateDiceResult(data.value);
                }
            });
        }

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        if (this.gameStateManager && typeof this.gameStateManager.on === 'function') {
            this.gameStateManager.on('state:updated', (state) => {
                this.updateFromGameState(state || {});
            });
            this.gameStateManager.on('turn:changed', (data) => {
                this.handleTurnChanged(data || {});
            });
            this.gameStateManager.on('players:updated', (players) => {
                this.onPlayersUpdated(players);
            });
            this.gameStateManager.on('game:playersUpdated', (players) => {
                this.onPlayersUpdated(players);
            });
        }
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (this.eventBus && typeof this.eventBus.on === 'function') {
            this.eventBus.on('push:message', (message) => {
                if (message.type === 'turn_changed' || message.type === 'game_state_updated') {
                    console.log('üéØ PlayersPanel: –ü–æ–ª—É—á–µ–Ω–æ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Ö–æ–¥–∞');
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    if (this.gameStateManager && typeof this.gameStateManager.forceUpdate === 'function') {
                        this.gameStateManager.forceUpdate();
                    }
                }
            });
        } else {
            console.warn('‚ö†Ô∏è PlayersPanel: eventBus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –±–∞–Ω–∫–∞
        const bankButton = document.getElementById('open-bank');
        if (bankButton) {
            bankButton.addEventListener('click', () => {
                console.log('üè¶ PlayersPanel: –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –±–∞–Ω–∫–∞');
                this.openBankModule();
            });
            console.log('‚úÖ PlayersPanel: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –±–∞–Ω–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω');
        } else {
            console.warn('‚ö†Ô∏è PlayersPanel: –ö–Ω–æ–ø–∫–∞ –±–∞–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
     * @param {Array} players - –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
     */
    onPlayersUpdated(players) {
        console.log('üë• PlayersPanel: –ò–≥—Ä–æ–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', players);
        if (this.playerList) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ players —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
            if (Array.isArray(players)) {
                this.playerList.updatePlayers(players);
            } else {
                console.warn('PlayersPanel: players –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', typeof players, players);
                // Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ GameStateManager
                if (this.gameStateManager) {
                    const state = this.gameStateManager.getState();
                    const playersArray = state?.players || [];
                    if (Array.isArray(playersArray)) {
                        this.playerList.updatePlayers(playersArray);
                    }
                }
            }
        }
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    render() {
        if (!this.container) return;
        
        this.container.innerHTML = `
            <div class="players-panel">
                <div class="panel-grid">
                    <section class="game-controls">
                        <div class="dice-controls">
                            <!-- –ö–Ω–æ–ø–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ TurnController -->
                            <div class="dice-display">
                                <div id="dice-result" class="dice-value">üé≤</div>
                                <div class="dice-label">–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞</div>
                            </div>
                            <button class="btn btn-secondary" id="pass-turn" type="button" disabled>
                                <span class="btn-icon">‚û°Ô∏è</span>
                                <span class="btn-text">–ü–µ—Ä–µ–¥–∞—Ç—å —Ö–æ–¥</span>
                            </button>
                        </div>
                        
                        <div class="turn-info">
                            <div class="player-info">
                                <span class="label">–•–æ–¥:</span>
                                <span class="value" id="current-player">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                            </div>
                            <div class="player-info">
                                <span class="label">–ö—É–±–∏–∫:</span>
                                <span class="value" id="dice-result">üé≤</span>
                            </div>
                        </div>
                        
                        <div class="bank-section">
                            <button class="btn btn-bank" id="open-bank" type="button">
                                <span class="btn-icon">üè¶</span>
                                <span class="btn-text">–ë–∞–Ω–∫</span>
                            </button>
                        </div>
                    </section>
                    
                    <!-- –°–µ–∫—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤ -->
                    <section class="players-section">
                        <div class="players-header">
                            <h3 class="players-title">üë• –ò–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ</h3>
                            <span class="players-count" id="players-count">0/4</span>
                        </div>
                        <div class="players-list" id="players-list">
                            <!-- –ò–≥—Ä–æ–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                        </div>
                    </section>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        this.addStyles();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.setupControls();
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –±–∞–Ω–∫–∞
        const bankButton = document.getElementById('open-bank');
        if (bankButton) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
            bankButton.removeEventListener('click', this.openBankModule);
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            bankButton.addEventListener('click', () => {
                console.log('üè¶ PlayersPanel: –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –±–∞–Ω–∫–∞ (–∏–∑ render)');
                this.openBankModule();
            });
            console.log('‚úÖ PlayersPanel: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –±–∞–Ω–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω –≤ render');
        }
        
        console.log('‚úÖ PlayersPanel v2.0: –û—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω');
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç GameStateManager
     * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     */
    updateFromGameState(state) {
        // Throttling: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        const stateKey = JSON.stringify({
            activePlayer: state.activePlayer?.id,
            canRoll: state.canRoll,
            canMove: state.canMove,
            canEndTurn: state.canEndTurn,
            lastDiceResult: state.lastDiceResult?.total,
            playersCount: state.players?.length || 0
        });
        
        if (this._lastStateKey === stateKey) {
            return; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        }
        this._lastStateKey = stateKey;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –∏–≥—Ä–æ–∫–µ
        this.updateActivePlayerInfo(state.activePlayer);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.updateControlButtons(state);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∏–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if (state && Object.prototype.hasOwnProperty.call(state, 'lastDiceResult')) {
            const diceResultValue = state.lastDiceResult && typeof state.lastDiceResult === 'object'
                ? state.lastDiceResult.value ?? state.lastDiceResult.total
                : state.lastDiceResult;
            this.updateDiceResult(diceResultValue);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        if (state.players && Array.isArray(state.players) && state.players.length > 0) {
            this.updatePlayersList(state.players);
        } else {
            // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã–µ, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
            this.forceLoadPlayers();
        }
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
     */
    forceLoadPlayers() {
        const roomId = window.location.hash.split('roomId=')[1];
        if (!roomId) return;
        
        console.log('üîß PlayersPanel: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã:', roomId);
        
        fetch(`/api/rooms/${roomId}/game-state`)
            .then(response => response.json())
            .then(data => {
                if (data.success && data.state && data.state.players && data.state.players.length > 0) {
                    console.log('üîß PlayersPanel: –ü–æ–ª—É—á–µ–Ω—ã –∏–≥—Ä–æ–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ:', data.state.players);
                    this.updatePlayersList(data.state.players);
                    
                    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º GameStateManager
                    const gameStateManager = window.app?.services?.get('gameStateManager');
                    if (gameStateManager) {
                        gameStateManager.updateFromServer(data.state);
                    }
                }
            })
            .catch(err => console.error('‚ùå PlayersPanel: –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤:', err));
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ö–æ–¥–∞
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã —Ö–æ–¥–∞
     */
    handleTurnChanged(data) {
        console.log('üîÑ PlayersPanel: –°–º–µ–Ω–∞ —Ö–æ–¥–∞', data);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –∏–≥—Ä–æ–∫–µ
        this.updateActivePlayerInfo(data.activePlayer);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
     * @param {Array} players - –ú–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤
     */
    updatePlayersList(players = []) {
        const playersList = document.getElementById('players-list');
        const playersCount = document.getElementById('players-count');
        
        if (!playersList || !playersCount) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤
        playersCount.textContent = `${players.length}/4`;
        
        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        playersList.innerHTML = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        players.forEach((player, index) => {
            const playerElement = this.createPlayerElement(player, index);
            playersList.appendChild(playerElement);
        });
        
        console.log('üë• PlayersPanel: –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤', players.length);
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å —Å –±–∞–Ω–∫–æ–º, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
        this.syncBalanceWithBank(players);
    }
    
    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–æ–≤ —Å –±–∞–Ω–∫–æ–º
     * @param {Array} players - –ú–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤
     */
    syncBalanceWithBank(players) {
        if (!this.bankModule) return;
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const currentUserId = this.getCurrentUserId();
            if (!currentUserId) return;
            
            // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ
            const currentPlayer = players.find(p => 
                p.id === currentUserId || 
                p.userId === currentUserId || 
                p.username === currentUserId
            );
            
            if (currentPlayer && this.bankModule.updatePlayerBalance) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –±–∞–Ω–∫–µ
                this.bankModule.updatePlayerBalance(currentPlayer);
                console.log('üí∞ PlayersPanel: –ë–∞–ª–∞–Ω—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–∞–Ω–∫–æ–º:', currentPlayer.balance || currentPlayer.money);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è PlayersPanel: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–≥—Ä–æ–∫–∞
     * @param {Object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @param {number} index - –ò–Ω–¥–µ–∫—Å –∏–≥—Ä–æ–∫–∞
     * @returns {HTMLElement} –≠–ª–µ–º–µ–Ω—Ç –∏–≥—Ä–æ–∫–∞
     */
    createPlayerElement(player, index) {
        const playerDiv = document.createElement('div');
        playerDiv.className = 'player-item';
        
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        const balance = player.balance || player.money || player.cash || 0;
        
        playerDiv.innerHTML = `
            <div class="player-avatar">
                <span class="player-icon">üéØ</span>
            </div>
            <div class="player-info">
                <div class="player-name">${player.username || '–ò–≥—Ä–æ–∫ ' + (index + 1)}</div>
                <div class="player-status ${player.isActive ? 'active' : 'inactive'}">
                    ${player.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–û–∂–∏–¥–∞–Ω–∏–µ'}
                </div>
                <div class="player-balance">$${balance}</div>
            </div>
            <div class="player-token">
                <span class="token-icon">üé≤</span>
            </div>
        `;
        
        return playerDiv;
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
     */
    handlePlayersUpdated(data) {
        console.log('üë• PlayersPanel: –ò–≥—Ä–æ–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', data);
        // –ò–≥—Ä–æ–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –∏–≥—Ä–æ–∫–µ
     * @param {Object} activePlayer - –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
     */
    updateActivePlayerInfo(activePlayer) {
        const currentPlayer = document.getElementById('current-player');
        if (currentPlayer) {
            if (activePlayer) {
                currentPlayer.textContent = PlayerStatusUtils.getPlayerDisplayName(activePlayer);
            } else {
                currentPlayer.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
            }
        }
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–Ω–∫ –º–æ–¥—É–ª—è
     */
    openBankModule() {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π BankModule
            if (this.bankModule) {
                this.bankModule.open();
                console.log('üè¶ PlayersPanel: –ë–∞–Ω–∫ –º–æ–¥—É–ª—å –æ—Ç–∫—Ä—ã—Ç');
            } else {
                console.warn('‚ö†Ô∏è PlayersPanel: BankModule –Ω–µ —Å–æ–∑–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º...');
                this.createBankModule();
                if (this.bankModule) {
                    this.bankModule.open();
                } else {
                    console.error('‚ùå PlayersPanel: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å BankModule');
                }
            }
        } catch (error) {
            console.error('‚ùå PlayersPanel: –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–Ω–∫–∞:', error);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫—É–±–∏–∫–∞
     * @param {number} result - –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
     */
    updateDiceResult(result) {
        const diceResult = document.getElementById('dice-result');
        if (diceResult) {
            const numericValue = typeof result === 'object'
                ? Number(result?.value ?? result?.total)
                : Number(result);
            if (Number.isFinite(numericValue) && numericValue >= 1 && numericValue <= 6) {
                const diceEmoji = this.getDiceEmoji(numericValue);
                diceResult.textContent = `${diceEmoji} ${numericValue}`;
            } else {
                diceResult.textContent = 'üé≤';
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –∫—É–±–∏–∫–∞
     * @param {number} value - –ó–Ω–∞—á–µ–Ω–∏–µ –∫—É–±–∏–∫–∞ (1-6)
     * @returns {string} –≠–º–æ–¥–∑–∏ –∫—É–±–∏–∫–∞
     */
    getDiceEmoji(value) {
        const diceEmojis = ['‚öÄ', '‚öÅ', '‚öÇ', '‚öÉ', '‚öÑ', '‚öÖ'];
        return diceEmojis[value - 1] || '‚öÄ';
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     */
    updateControlButtons(state) {
        // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É roll-dice - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ TurnController
        const passBtn = document.getElementById('pass-turn');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–π –ª–∏ —ç—Ç–æ —Ö–æ–¥
        const currentUserId = this.getCurrentUserId();
        const activePlayer = state.activePlayer;
        
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ isMyTurn
        let isMyTurn = false;
        if (activePlayer && currentUserId) {
            isMyTurn = 
                activePlayer.id === currentUserId ||
                activePlayer.userId === currentUserId ||
                activePlayer.username === currentUserId ||
                (activePlayer.username && currentUserId && activePlayer.username === currentUserId);
        }
        
        if (passBtn) {
            // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ —Ö–æ–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –º–æ–π —Ö–æ–¥ –ò –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥
            const shouldBeDisabled = !isMyTurn || !state.canEndTurn;
            passBtn.disabled = shouldBeDisabled;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é
            if (isMyTurn && state.canEndTurn) {
                passBtn.classList.add('active');
            } else {
                passBtn.classList.remove('active');
            }
        }
        
        console.log('üéØ PlayersPanel: –û–±–Ω–æ–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', {
            currentUserId,
            activePlayerId: activePlayer?.id,
            activePlayerUsername: activePlayer?.username,
            activePlayerUserId: activePlayer?.userId,
            isMyTurn,
            canRoll: state.canRoll,
            canEndTurn: state.canEndTurn,
            passBtnDisabled: passBtn?.disabled,
            shouldBeDisabled: !isMyTurn || !state.canEndTurn,
            turnCheckDetails: {
                idMatch: activePlayer?.id === currentUserId,
                userIdMatch: activePlayer?.userId === currentUserId,
                usernameMatch: activePlayer?.username === currentUserId
            }
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
     */
    async handleEndTurn() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º TurnService —á–µ—Ä–µ–∑ window.app
            const app = window.app;
            const turnService = app && app.getModule ? app.getModule('turnService') : null;
            
            if (!turnService) {
                console.warn('‚ö†Ô∏è PlayersPanel: TurnService –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞
            if (!turnService.canEndTurn()) {
                console.warn('‚ö†Ô∏è PlayersPanel: –ù–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–æ–π —Ö–æ–¥ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ TurnService)
            const currentUserId = this.getCurrentUserId();
            const state = turnService.getState();
            
            if (!state || !state.activePlayer) {
                console.warn('‚ö†Ô∏è PlayersPanel: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞');
                return;
            }
            
            const activePlayer = state.activePlayer;
            const isMyTurn = 
                activePlayer.id === currentUserId ||
                activePlayer.userId === currentUserId ||
                (activePlayer.username && currentUserId && activePlayer.username === currentUserId);
            
            if (!isMyTurn) {
                console.warn('‚ö†Ô∏è PlayersPanel: –ù–µ –≤–∞—à —Ö–æ–¥ - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ', {
                    activePlayer: activePlayer.username || activePlayer.id,
                    currentUserId
                });
                return;
            }
            
            console.log('üéØ PlayersPanel: –ó–∞–≤–µ—Ä—à–∞–µ–º —Ö–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            await turnService.endTurn();
        } catch (error) {
            console.error('‚ùå PlayersPanel: –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞:', error);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {string|null} ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getCurrentUserId() {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ TurnService
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ sessionStorage
            const bundleRaw = sessionStorage.getItem('am_player_bundle');
            if (bundleRaw) {
                const bundle = JSON.parse(bundleRaw);
                const userId = bundle?.currentUser?.id || bundle?.currentUser?.userId;
                if (userId) {
                    console.log('üîç PlayersPanel: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ bundle:', userId);
                    return userId;
                }
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ localStorage
            const userRaw = localStorage.getItem('aura_money_user');
            if (userRaw) {
                const user = JSON.parse(userRaw);
                const userId = user?.id || user?.userId;
                if (userId) {
                    console.log('üîç PlayersPanel: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage:', userId);
                    return userId;
                }
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ app
            if (window.app && window.app.getModule) {
                const userModel = window.app.getModule('userModel');
                if (userModel && userModel.getCurrentUser) {
                    const currentUser = userModel.getCurrentUser();
                    if (currentUser && (currentUser.id || currentUser.userId)) {
                        const userId = currentUser.id || currentUser.userId;
                        console.log('üîç PlayersPanel: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ userModel:', userId);
                        return userId;
                    }
                }
            }
            
            console.warn('‚ö†Ô∏è PlayersPanel: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return null;
        } catch (error) {
            console.error('‚ùå PlayersPanel: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return null;
        }
    }
    
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ PlayersPanel)
     */
    addStyles() {
        if (document.getElementById('players-panel-styles')) return;
        
        const styles = document.createElement('style');
        styles.id = 'players-panel-styles';
        styles.textContent = `
            .players-panel {
                background: linear-gradient(145deg, rgba(20, 25, 40, 0.95), rgba(15, 20, 35, 0.95));
                border-radius: 1.5rem;
                padding: 2rem;
                border: 2px solid rgba(99, 102, 241, 0.3);
                backdrop-filter: blur(20px);
                color: #ffffff;
                max-width: 400px;
                width: 100%;
                box-shadow: 
                    0 20px 40px rgba(0, 0, 0, 0.4),
                    0 0 0 1px rgba(255, 255, 255, 0.05),
                    inset 0 1px 0 rgba(255, 255, 255, 0.1);
                position: relative;
                overflow: hidden;
                height: fit-content;
                max-height: calc(100vh - 120px);
            }
            
            .panel-grid {
                display: flex;
                flex-direction: column;
                gap: 1.5rem;
                height: 100%;
            }
            
            
            .game-controls {
                display: flex;
                flex-direction: column;
                gap: 1.5rem;
            }

            .dice-controls {
                display: flex;
                gap: 1rem;
                flex-direction: row;
            }

            /* –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –∫—É–±–∏–∫ –≤ –≤–µ—Ä—Ö–Ω–µ–º –±–ª–æ–∫–µ */
            .dice-display #dice-result {
                font-size: 9rem;
                line-height: 1;
            }

            .dice-controls .btn {
                flex: 1;
                min-width: 140px;
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 0.5rem;
            }
            
            .turn-info {
                background: linear-gradient(135deg, rgba(255, 255, 255, 0.08), rgba(255, 255, 255, 0.05));
                border-radius: 1rem;
                padding: 1.5rem;
                border: 2px solid rgba(99, 102, 241, 0.2);
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            }
            
            .turn-info .player-info {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 0.75rem;
            }
            
            .turn-info .player-info:last-child {
                margin-bottom: 0;
            }
            
            .turn-info .label {
                color: #a0a0a0;
                font-size: 0.9rem;
            }
            
            .turn-info .value {
                color: #ffffff;
                font-weight: 600;
                font-size: 0.9rem;
            }

            /* –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –∫—É–±–∏–∫ –≤ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏ "–ö—É–±–∏–∫:" */
            .turn-info .player-info .value#dice-result {
                font-size: 3rem;
                font-weight: 800;
                color: #22c55e;
            }
            
            
            .btn {
                padding: 1rem 1.5rem;
                border: none;
                border-radius: 1rem;
                font-weight: 700;
                font-size: 0.95rem;
                cursor: pointer;
                transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                text-decoration: none;
                display: inline-flex;
                align-items: center;
                justify-content: center;
                gap: 0.75rem;
                position: relative;
                overflow: hidden;
                backdrop-filter: blur(10px);
            }
            
            .btn-primary {
                background: linear-gradient(135deg, #6366f1, #8b5cf6);
                color: white;
                border: 2px solid rgba(99, 102, 241, 0.3);
                box-shadow: 0 8px 25px rgba(99, 102, 241, 0.3);
            }
            
            .btn-primary:hover:not(:disabled) {
                background: linear-gradient(135deg, #8b5cf6, #a855f7);
                transform: translateY(-3px);
                box-shadow: 0 12px 35px rgba(99, 102, 241, 0.5);
                border-color: rgba(99, 102, 241, 0.6);
            }
            
            .btn-secondary {
                background: linear-gradient(135deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.1));
                color: #ffffff;
                border: 2px solid rgba(255, 255, 255, 0.2);
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            }
            
            .btn-secondary:hover:not(:disabled) {
                background: linear-gradient(135deg, rgba(255, 255, 255, 0.25), rgba(255, 255, 255, 0.15));
                border-color: rgba(255, 255, 255, 0.4);
                transform: translateY(-3px);
                box-shadow: 0 12px 35px rgba(0, 0, 0, 0.3);
            }
            
            .btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
                transform: none !important;
                box-shadow: none !important;
            }
            
            .bank-section {
                margin-top: 15px;
                display: flex;
                justify-content: center;
            }
            
            .btn-bank {
                background: linear-gradient(135deg, #8b5cf6, #7c3aed);
                border: 1px solid rgba(139, 92, 246, 0.3);
                color: white;
                font-weight: 600;
                padding: 12px 24px;
                border-radius: 10px;
                transition: all 0.3s ease;
                box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
            }
            
            .btn-bank:hover {
                background: linear-gradient(135deg, #7c3aed, #6d28d9);
                transform: translateY(-2px);
                box-shadow: 0 6px 16px rgba(139, 92, 246, 0.4);
            }
            
            .btn-bank:active {
                transform: translateY(0);
            }
            
            /* –°—Ç–∏–ª–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ */
            .players-section {
                margin-top: 1.5rem;
                padding-top: 1.5rem;
                border-top: 1px solid rgba(255, 255, 255, 0.1);
            }
            
            .players-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 1rem;
            }
            
            .players-title {
                font-size: 1.1rem;
                font-weight: 600;
                color: #ffffff;
                margin: 0;
            }
            
            .players-count {
                background: rgba(99, 102, 241, 0.2);
                color: #6366f1;
                padding: 0.25rem 0.75rem;
                border-radius: 1rem;
                font-size: 0.875rem;
                font-weight: 500;
                border: 1px solid rgba(99, 102, 241, 0.3);
            }
            
            .players-list {
                display: flex;
                flex-direction: column;
                gap: 0.75rem;
            }
            
            .player-item {
                display: flex;
                align-items: center;
                gap: 0.75rem;
                padding: 0.75rem;
                background: rgba(255, 255, 255, 0.05);
                border-radius: 0.75rem;
                border: 1px solid rgba(255, 255, 255, 0.1);
                transition: all 0.3s ease;
            }
            
            .player-item:hover {
                background: rgba(255, 255, 255, 0.08);
                border-color: rgba(255, 255, 255, 0.2);
            }
            
            .player-avatar {
                width: 2.5rem;
                height: 2.5rem;
                border-radius: 50%;
                background: linear-gradient(135deg, #6366f1, #8b5cf6);
                display: flex;
                align-items: center;
                justify-content: center;
                flex-shrink: 0;
            }
            
            .player-icon {
                font-size: 1.25rem;
            }
            
            .player-info {
                flex: 1;
                min-width: 0;
            }
            
            .player-name {
                font-weight: 600;
                color: #ffffff;
                font-size: 0.875rem;
                margin-bottom: 0.25rem;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
            }
            
            .player-status {
                font-size: 0.75rem;
                font-weight: 500;
                margin-bottom: 0.25rem;
            }
            
            .player-status.active {
                color: #10b981;
            }
            
            .player-status.inactive {
                color: #6b7280;
            }
            
            .player-balance {
                font-size: 0.75rem;
                color: #fbbf24;
                font-weight: 600;
            }
            
            .player-token {
                flex-shrink: 0;
            }
            
            .token-icon {
                font-size: 1rem;
                opacity: 0.7;
            }
        `;
        
        document.head.appendChild(styles);
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     * –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: PlayersPanel —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç UI, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–æ–¥–∞–º–∏ —á–µ—Ä–µ–∑ TurnController
     */
    setupControls() {
        // PlayersPanel –±–æ–ª—å—à–µ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç –±—Ä–æ—Å–∫–æ–º –∫—É–±–∏–∫–∞ –∏ —Ö–æ–¥–∞–º–∏
        // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∞ TurnController
        console.log('‚ÑπÔ∏è PlayersPanel: UI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è TurnController');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –±–∞–Ω–∫–∞
        const openBankBtn = this.container.querySelector('#open-bank');
        if (openBankBtn) {
            openBankBtn.addEventListener('click', () => {
                this.openBankModule();
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–¥–∞—Ç—å —Ö–æ–¥"
        const passTurnBtn = this.container.querySelector('#pass-turn');
        if (passTurnBtn) {
            passTurnBtn.addEventListener('click', () => {
                this.handleEndTurn();
            });
        }
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è TurnService –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        try {
            const app = window.app;
            const turnService = app && app.getModule ? app.getModule('turnService') : null;
            if (turnService && typeof turnService.on === 'function') {
                turnService.on('roll:start', () => {
                    this._showRollingAnimation();
                });
                turnService.on('roll:success', (response) => {
                    const serverValue = response && (response.serverValue ?? response.diceResult?.value);
                    const localValue = response && response.localRoll && (response.localRoll.value || response.localRoll.total);
                    const value = serverValue ?? localValue ?? null;
                    if (value != null) this.updateDiceResult(value);
                });
                turnService.on('roll:finish', () => {
                    this._hideRollingAnimation();
                });
            }
        } catch (e) {
            console.warn('‚ö†Ô∏è PlayersPanel: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è TurnService', e);
        }
    }

    // –ü—Å–µ–≤–¥–æ-–∞–Ω–∏–º–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ "–ö—É–±–∏–∫:"
    _showRollingAnimation() {
        const el = document.getElementById('dice-result');
        if (!el) return;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        el.classList.add('rolling');
        
        const seq = ['‚öÄ','‚öÅ','‚öÇ','‚öÉ','‚öÑ','‚öÖ'];
        let i = 0;
        this._rollingTimer && clearInterval(this._rollingTimer);
        this._rollingTimer = setInterval(() => {
            el.textContent = seq[i % seq.length];
            i++;
        }, 90);
    }
    
    _hideRollingAnimation() {
        if (this._rollingTimer) {
            clearInterval(this._rollingTimer);
            this._rollingTimer = null;
        }
        
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏
        const el = document.getElementById('dice-result');
        if (el) {
            el.classList.remove('rolling');
        }
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    destroy() {
        console.log('üë• PlayersPanel v2.0: –£–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
window.PlayersPanel = PlayersPanel;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = PlayersPanel;
}
