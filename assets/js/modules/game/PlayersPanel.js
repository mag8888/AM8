/**
 * PlayersPanel v2.0.0 - –†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç GameStateManager –∏ PlayerList –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */

class PlayersPanel {
    constructor(config = {}) {
        this.gameStateManager = config.gameStateManager || null;
        this.eventBus = config.eventBus || null;
        this.containerId = config.containerId || 'players-panel';
        
        // –°–æ–∑–¥–∞–µ–º PlayerList –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
        this.playerList = null;
        this.currentUser = null;
        this._lastStateKey = null;
        
        // –°–æ–∑–¥–∞–µ–º BankModule –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.bankModule = null;
        
        // –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        this._playersCache = new Map();
        this._lastFetchTime = 0;
        this._cacheTimeout = 5000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
        
        // AbortController –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        this._currentAbortController = null;
        
        // Rate limiting –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è 429 –æ—à–∏–±–æ–∫
        this._lastApiRequestTime = 0;
        this._minRequestInterval = 3000; // –ú–∏–Ω–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        console.log('üë• PlayersPanel v2.0: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    init() {
        this.container = document.getElementById(this.containerId);
        if (!this.container) {
            console.error('‚ùå PlayersPanel: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', this.containerId);
            return;
        }
        
        this.setupEventListeners();
        this.render();
        
        // –°–æ–∑–¥–∞–µ–º BankModule –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.createBankModule();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        if (this.gameStateManager && typeof this.gameStateManager.getState === 'function') {
            try {
                const state = this.gameStateManager.getState();
                this.updateFromGameState(state || {});
            } catch (_) {}
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.showLoadingState();
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º GameStateManager –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ –ø—Ä—è–º—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
        this.loadPlayersViaGameStateManager();
        
        console.log('‚úÖ PlayersPanel v2.0: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ BankModuleServer (–Ω–æ–≤—ã–π –º–æ–¥—É–ª—å —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞)
     */
    createBankModule() {
        if (this.bankModule) {
            console.log('üè¶ PlayersPanel: BankModule —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return; // –£–∂–µ —Å–æ–∑–¥–∞–Ω
        }
        
        console.log('üè¶ PlayersPanel: –°–æ–∑–¥–∞–Ω–∏–µ BankModuleServer...');
        
        if (!window.BankModuleServer) {
            console.error('‚ùå PlayersPanel: BankModuleServer –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ window');
            return;
        }
        
        try {
            const app = window.app;
            if (!app) {
                console.warn('‚ö†Ô∏è PlayersPanel: App –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            const gameState = app.getModule('gameState');
            const eventBus = app.getEventBus();
            const roomApi = app.getModule('roomApi');
            const professionSystem = app.getModule('professionSystem');
            
            console.log('üè¶ PlayersPanel: –°–æ–∑–¥–∞–µ–º BankModuleServer —Å –º–æ–¥—É–ª—è–º–∏:', {
                gameState: !!gameState,
                eventBus: !!eventBus,
                roomApi: !!roomApi,
                professionSystem: !!professionSystem,
                gameStateManager: !!this.gameStateManager
            });
            
            this.bankModule = new window.BankModuleServer({
                gameState: gameState,
                eventBus: eventBus,
                roomApi: roomApi,
                professionSystem: professionSystem,
                gameStateManager: this.gameStateManager
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ app.modules
            if (app.modules && typeof app.modules.set === 'function') {
                app.modules.set('bankModuleServer', this.bankModule);
            }
            
            console.log('‚úÖ PlayersPanel: BankModuleServer —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå PlayersPanel: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è BankModuleServer:', error);
            console.error('‚ùå PlayersPanel: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        }
    }
    
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        if (this.eventBus) {
            // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
            this.eventBus.on('game:started', (data) => {
                if (data && Array.isArray(data.players)) {
                    this.gameStateManager?.updateFromServer({ players: data.players });
                }
            });
            
            this.eventBus.on('game:playersUpdated', (data) => {
                if (data && Array.isArray(data.players)) {
                    this.gameStateManager?.updateFromServer({ players: data.players });
                }
            });
            
            this.eventBus.on('game:activePlayerChanged', (data) => {
                if (data && data.activePlayer) {
                    this.gameStateManager?.updateFromServer({ activePlayer: data.activePlayer });
                }
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É–±–∏–∫–∞
            this.eventBus.on('dice:rolled', (data) => {
                if (data && data.value !== undefined) {
                    this.updateDiceResult(data.value);
                }
            });
        }

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        if (this.gameStateManager && typeof this.gameStateManager.on === 'function') {
            this.gameStateManager.on('state:updated', (state) => {
                this.updateFromGameState(state || {});
            });
            this.gameStateManager.on('turn:changed', (data) => {
                this.handleTurnChanged(data || {});
            });
            this.gameStateManager.on('players:updated', (players) => {
                this.onPlayersUpdated(players);
            });
            this.gameStateManager.on('game:playersUpdated', (players) => {
                this.onPlayersUpdated(players);
            });
        }
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (this.eventBus && typeof this.eventBus.on === 'function') {
            this.eventBus.on('push:message', (message) => {
                if (message.type === 'turn_changed' || message.type === 'game_state_updated') {
                    console.log('üéØ PlayersPanel: –ü–æ–ª—É—á–µ–Ω–æ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Ö–æ–¥–∞');
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    if (this.gameStateManager && typeof this.gameStateManager.forceUpdate === 'function') {
                        this.gameStateManager.forceUpdate();
                    }
                }
            });
        } else {
            console.warn('‚ö†Ô∏è PlayersPanel: eventBus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –±–∞–Ω–∫–∞ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ render() –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è DOM
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
     * @param {Array} players - –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
     */
    onPlayersUpdated(players) {
        console.log('üë• PlayersPanel: –ò–≥—Ä–æ–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', players);
        if (this.playerList) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ players —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
            if (Array.isArray(players)) {
                this.playerList.updatePlayers(players);
            } else {
                console.warn('PlayersPanel: players –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', typeof players, players);
                // Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ GameStateManager
                if (this.gameStateManager) {
                    const state = this.gameStateManager.getState();
                    const playersArray = state?.players || [];
                    if (Array.isArray(playersArray)) {
                        this.playerList.updatePlayers(playersArray);
                    }
                }
            }
        }
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ - –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω
     */
    render() {
        if (!this.container) return;
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å DOM
        if (this._lastRenderContent) {
            return; // –£–∂–µ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º DocumentFragment –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è DOM –æ–ø–µ—Ä–∞—Ü–∏–π
        const fragment = document.createDocumentFragment();
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = `
            <div class="game-right-panel">
                <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏ -->
                <div class="panel-header">
                    <div class="panel-title">
                        <span class="title-icon">üéÆ</span>
                        <span class="title-text">–ò–≥—Ä–æ–≤–∞—è –ø–∞–Ω–µ–ª—å</span>
                    </div>
                    <div class="panel-subtitle">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π</div>
                </div>

                <!-- –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ -->
                <div class="active-player-widget">
                    <div class="widget-header">
                        <span class="widget-icon">üë§</span>
                        <span class="widget-title">–ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫</span>
                    </div>
                    <div class="player-info-card" id="active-player-card">
                        <div class="player-avatar-container">
                            <div class="player-avatar" id="active-player-avatar">
                                <span class="avatar-text">üë§</span>
                            </div>
                            <div class="player-status-indicator" id="player-status-indicator"></div>
                        </div>
                        <div class="player-details">
                            <div class="player-name" id="current-player-name">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                            <div class="player-status" id="turn-status">
                                <span class="status-icon">‚è≥</span>
                                <span class="status-text">–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</span>
                                <div class="player-timer" id="player-timer" style="display: none;">
                                    <div class="timer-ring">
                                        <svg class="timer-svg" viewBox="0 0 36 36">
                                            <path class="timer-bg" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"></path>
                                            <path class="timer-progress" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"></path>
                                        </svg>
                                        <span class="timer-text" id="timer-text">30</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ -->
                <div class="dice-widget">
                    <div class="widget-header">
                        <span class="widget-icon">üé≤</span>
                        <span class="widget-title">–ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞</span>
                    </div>
                    <div class="dice-container">
                        <div class="dice-display" id="dice-display">
                            <div class="dice-main" id="dice-result-value">
                                <div class="dice-face">
                                    <span class="dice-number">-</span>
                                </div>
                            </div>
                            <div class="dice-history" id="roll-history">
                                <!-- –ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ—Å–∫–æ–≤ –±—É–¥–µ—Ç –∑–¥–µ—Å—å -->
                            </div>
                        </div>
                        <div class="dice-controls">
                            <button class="dice-btn primary" id="roll-dice-btn" type="button">
                                <span class="btn-icon">üé≤</span>
                                <span class="btn-text">–ë–†–û–°–ò–¢–¨</span>
                                <div class="btn-glow"></div>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- –ò–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è -->
                <div class="actions-widget">
                    <div class="widget-header">
                        <span class="widget-icon">‚ö°</span>
                        <span class="widget-title">–î–µ–π—Å—Ç–≤–∏—è</span>
                    </div>
                    <div class="actions-grid">
                        <button class="action-btn bank-btn" id="open-bank" type="button">
                            <div class="btn-icon">üè¶</div>
                            <div class="btn-label">–ë–∞–Ω–∫</div>
                            <div class="btn-glow"></div>
                        </button>
                        <button class="action-btn pass-btn" id="pass-turn" type="button" disabled>
                            <div class="btn-icon">‚û°Ô∏è</div>
                            <div class="btn-label">–°–ª–µ–¥—É—é—â–∏–π</div>
                            <div class="btn-glow"></div>
                        </button>
                    </div>
                </div>

                <!-- –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ -->
                <div class="players-widget">
                    <div class="widget-header">
                        <span class="widget-icon">üë•</span>
                        <span class="widget-title">–ò–≥—Ä–æ–∫–∏</span>
                        <span class="players-count" id="players-count">0/4</span>
                    </div>
                    <div class="players-list" id="players-list">
                        <!-- –ò–≥—Ä–æ–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                    </div>
                </div>
            </div>
        `;
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ fragment –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        fragment.appendChild(tempDiv.firstElementChild);
        this.container.appendChild(fragment);
        
        // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Ä–µ–Ω–¥–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω
        this._lastRenderContent = true;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∏–ª–∏
        this.addNewStyles();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.setupControls();
        
        console.log('‚úÖ PlayersPanel v3.0: –ù–æ–≤—ã–π –¥–∏–∑–∞–π–Ω –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ)');
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç GameStateManager
     * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     */
    updateFromGameState(state) {
        // Throttling: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        const stateKey = JSON.stringify({
            activePlayer: state.activePlayer?.id,
            canRoll: state.canRoll,
            canMove: state.canMove,
            canEndTurn: state.canEndTurn,
            lastDiceResult: state.lastDiceResult?.total,
            playersCount: state.players?.length || 0
        });
        
        if (this._lastStateKey === stateKey) {
            return; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        }
        this._lastStateKey = stateKey;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –∏–≥—Ä–æ–∫–µ
        this.updateActivePlayerInfo(state.activePlayer);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.updateControlButtons(state);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∏–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if (state && Object.prototype.hasOwnProperty.call(state, 'lastDiceResult')) {
            const diceResultValue = state.lastDiceResult && typeof state.lastDiceResult === 'object'
                ? state.lastDiceResult.value ?? state.lastDiceResult.total
                : state.lastDiceResult;
            this.updateDiceResult(diceResultValue);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        console.log('üîß PlayersPanel: updateFromGameState - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:', state.players);
        console.log('üîß PlayersPanel: updateFromGameState - —Ç–∏–ø players:', typeof state.players, Array.isArray(state.players));
        
        if (state.players && Array.isArray(state.players)) {
            if (state.players.length > 0) {
                console.log('üë• PlayersPanel: –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏–≥—Ä–æ–∫–æ–≤:', state.players.length);
                console.log('üë• PlayersPanel: –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫:', state.players[0]);
                this.updatePlayersList(state.players);
            } else {
                console.log('‚ö†Ô∏è PlayersPanel: –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏');
                this.showLoadingState();
                // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ GameStateManager
                this.loadPlayersViaGameStateManager();
            }
        } else {
            console.log('‚ö†Ô∏è PlayersPanel: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–æ–∫–∞—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ GameStateManager');
            console.log('‚ö†Ô∏è PlayersPanel: state.players:', state.players);
            // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º GameStateManager
            this.loadPlayersViaGameStateManager();
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ GameStateManager (–Ω–æ–≤—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
     */
    async loadPlayersViaGameStateManager() {
        const roomId = this.getCurrentRoomId();
        
        if (!roomId) {
            console.warn('‚ö†Ô∏è PlayersPanel: roomId –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
            this.showErrorState('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        const now = Date.now();
        const cacheKey = `players_${roomId}`;
        const cachedData = this._playersCache.get(cacheKey);
        
        if (cachedData && (now - this._lastFetchTime) < this._cacheTimeout) {
            console.log('üöÄ PlayersPanel: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ GameStateManager');
            this.updatePlayersList(cachedData);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º GameStateManager —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            if (this.gameStateManager) {
                this.gameStateManager.updateFromServer({ players: cachedData });
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ GameStateManager
            this.startPeriodicUpdatesViaGameStateManager(roomId);
            return;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º GameStateManager –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if (this.gameStateManager && typeof this.gameStateManager.fetchGameState === 'function') {
            console.log('üîÑ PlayersPanel: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ GameStateManager');
            try {
                const state = await this.gameStateManager.fetchGameState(roomId);
                const players = state?.players || this.gameStateManager.getState()?.players || [];
                
                if (Array.isArray(players) && players.length > 0) {
                    this._playersCache.set(cacheKey, players);
                    this._lastFetchTime = Date.now();
                    this.updatePlayersList(players);
                    this.startPeriodicUpdatesViaGameStateManager(roomId);
                } else {
                    console.warn('‚ö†Ô∏è PlayersPanel: GameStateManager –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤');
                    this.showEmptyState();
                }
            } catch (error) {
                console.error('‚ùå PlayersPanel: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ GameStateManager:', error);
                this.showErrorState(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
            }
            return;
        }

        console.warn('‚ö†Ô∏è PlayersPanel: GameStateManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º fallback');
        this.showErrorState('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ GameStateManager
     */
    startPeriodicUpdatesViaGameStateManager(roomId) {
        if (this.gameStateManager && typeof this.gameStateManager.startPeriodicUpdates === 'function') {
            console.log('üîÑ PlayersPanel: –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ GameStateManager');
            this.gameStateManager.startPeriodicUpdates(roomId, 45000); // 45 —Å–µ–∫—É–Ω–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ roomId
     */
    getCurrentRoomId() {
        // –°–ø–æ—Å–æ–± 1: –∏–∑ hash
        const hash = window.location.hash;
        const hashMatch = hash.match(/roomId=([^&]+)/);
        if (hashMatch) {
            return hashMatch[1];
        }
        
        // –°–ø–æ—Å–æ–± 2: –∏–∑ URL search params
        const urlParams = new URLSearchParams(window.location.search);
        let roomId = urlParams.get('roomId');
        if (roomId) {
            return roomId;
        }
        
        // –°–ø–æ—Å–æ–± 3: –∏–∑ sessionStorage
        try {
            const roomData = sessionStorage.getItem('am_room_data');
            if (roomData) {
                const parsed = JSON.parse(roomData);
                return parsed.roomId || parsed.id;
            }
        } catch (e) {
            console.warn('PlayersPanel: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è roomId –∏–∑ sessionStorage:', e);
        }
        
        return null;
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –∏ —Ñ–∏—à–µ–∫
     */
    forceRestorePlayers() {
        console.log('üîÑ PlayersPanel: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤');
        
        const roomId = this.getCurrentRoomId();
        if (!roomId) {
            console.warn('‚ö†Ô∏è PlayersPanel: roomId –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
            return;
        }

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ GameStateManager
        if (this.gameStateManager && typeof this.gameStateManager.forceUpdate === 'function') {
            console.log('üîÑ PlayersPanel: –ó–∞–ø—É—Å–∫–∞–µ–º forceUpdate GameStateManager');
            this.gameStateManager.forceUpdate();
        }

        // –¢–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ –Ω–∞—à –º–µ—Ç–æ–¥
        this.loadPlayersViaGameStateManager();

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏—à–∫–∏ —á–µ—Ä–µ–∑ PlayerTokens
        setTimeout(() => {
            if (window.app && typeof window.app.safePlayerTokensForceUpdate === 'function') {
                console.log('üéØ PlayersPanel: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏—à–∫–∏ —á–µ—Ä–µ–∑ PlayerTokens (–∑–∞—â–∏—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)');
                window.app.safePlayerTokensForceUpdate('PlayersPanel.forceRestorePlayers');
            } else if (window.app && window.app.getModule) {
                // Fallback –Ω–∞ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤, –µ—Å–ª–∏ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                const playerTokens = window.app.getModule('playerTokens');
                if (playerTokens && typeof playerTokens.forceUpdate === 'function') {
                    console.log('üéØ PlayersPanel: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏—à–∫–∏ —á–µ—Ä–µ–∑ PlayerTokens (fallback)');
                    playerTokens.forceUpdate();
                }
            }
        }, 200);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ EventBus
        setTimeout(() => {
            if (this.eventBus && typeof this.eventBus.emit === 'function') {
                console.log('üîÑ PlayersPanel: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤');
                this.eventBus.emit('players:restore');
                this.eventBus.emit('game:playersUpdated', { players: [] });
            }
        }, 500);
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ (deprecated - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å loadPlayersViaGameStateManager)
     */
    forceLoadPlayers() {
        // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ roomId –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        let roomId = null;
        
        // –°–ø–æ—Å–æ–± 1: –∏–∑ hash
        const hash = window.location.hash;
        const hashMatch = hash.match(/roomId=([^&]+)/);
        if (hashMatch) {
            roomId = hashMatch[1];
        }
        
        // –°–ø–æ—Å–æ–± 2: –∏–∑ URL search params
        if (!roomId) {
            const urlParams = new URLSearchParams(window.location.search);
            roomId = urlParams.get('roomId');
        }
        
        // –°–ø–æ—Å–æ–± 3: –∏–∑ sessionStorage
        if (!roomId) {
            try {
                const roomData = sessionStorage.getItem('am_room_data');
                if (roomData) {
                    const parsed = JSON.parse(roomData);
                    roomId = parsed.roomId || parsed.id;
                }
            } catch (e) {
                console.warn('PlayersPanel: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è roomId –∏–∑ sessionStorage:', e);
            }
        }
        
        if (!roomId) {
            console.warn('‚ö†Ô∏è PlayersPanel: roomId –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–≥—Ä–æ–∫–æ–≤');
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –±–µ–∑ roomId –Ω–µ –º–æ–∂–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            this.showErrorState('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        console.log('üîß PlayersPanel: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã:', roomId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        const now = Date.now();
        const cacheKey = `players_${roomId}`;
        const cachedData = this._playersCache.get(cacheKey);
        
        if (cachedData && (now - this._lastFetchTime) < this._cacheTimeout) {
            console.log('üöÄ PlayersPanel: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤');
            this.updatePlayersList(cachedData);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º GameStateManager —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            const gameStateManager = window.app?.services?.get('gameStateManager');
            if (gameStateManager && typeof gameStateManager.updateFromServer === 'function') {
                gameStateManager.updateFromServer({ players: cachedData });
            }
            
            // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É - —ç—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
            // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
            setTimeout(() => {
                this._fetchPlayersInBackground(roomId);
            }, 15000); // –ß–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            return;
        }
        
        this._fetchPlayersFromAPI(roomId);
    }
    
    /**
     * –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∫—ç—à–∞
     */
    _fetchPlayersInBackground(roomId) {
        // –ê—Ç–æ–º–∞—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ pending —Ñ–ª–∞–≥–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race condition
        if (window.CommonUtils && !window.CommonUtils.gameStateLimiter.setRequestPending(roomId)) {
            console.log('üö´ PlayersPanel: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ rate limiting –∏–ª–∏ concurrent request');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π rate limiting –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ pending —Ñ–ª–∞–≥–∞
        const now = Date.now();
        if (now - this._lastApiRequestTime < this._minRequestInterval) {
            console.log('üö´ PlayersPanel: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ rate limiting');
            // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ pending —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
            window.CommonUtils.gameStateLimiter.clearRequestPending(roomId);
            return;
        }
        
        this._lastApiRequestTime = now;
        
        fetch(`/api/rooms/${roomId}/game-state`)
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error(`HTTP ${response.status}`);
            })
            .then(data => {
                if (data && data.success && data.state && data.state.players) {
                    const cacheKey = `players_${roomId}`;
                    this._playersCache.set(cacheKey, data.state.players);
                    this._lastFetchTime = Date.now();
                    console.log('üîÑ PlayersPanel: –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–æ–Ω–µ');
                }
            })
            .catch(err => {
                console.warn('‚ö†Ô∏è PlayersPanel: –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞:', err);
            })
            .finally(() => {
                // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ pending –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º limiter
                if (window.CommonUtils) {
                    window.CommonUtils.gameStateLimiter.clearRequestPending(roomId);
                }
            });
    }
    
    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ —Å API 
     * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ loadPlayersViaGameStateManager() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ
     */
    _fetchPlayersFromAPI(roomId) {
        // –ê—Ç–æ–º–∞—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ pending —Ñ–ª–∞–≥–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race condition
        if (window.CommonUtils && !window.CommonUtils.gameStateLimiter.setRequestPending(roomId)) {
            console.log('üö´ PlayersPanel: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ rate limiting –∏–ª–∏ concurrent request');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π rate limiting –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ pending —Ñ–ª–∞–≥–∞
        const now = Date.now();
        if (now - this._lastApiRequestTime < this._minRequestInterval) {
            console.log('üö´ PlayersPanel: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ rate limiting');
            // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ pending —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
            window.CommonUtils.gameStateLimiter.clearRequestPending(roomId);
            return;
        }
        
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (this._currentAbortController) {
            this._currentAbortController.abort();
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π AbortController
        this._currentAbortController = new AbortController();
        this._lastApiRequestTime = now;
        
        fetch(`/api/rooms/${roomId}/game-state`, {
            signal: this._currentAbortController.signal
        })
            .then(response => {
                if (!response.ok) {
                    if (response.status === 429) {
                        console.warn('‚ö†Ô∏è PlayersPanel: HTTP 429, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å');
                        throw new Error('RATE_LIMITED'); // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è rate limit
                    }
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('üîß PlayersPanel: –û—Ç–≤–µ—Ç API:', data);
                
                if (data && data.success && data.state) {
                    const players = data.state.players || [];
                    if (Array.isArray(players) && players.length > 0) {
                        console.log('üîß PlayersPanel: –ü–æ–ª—É—á–µ–Ω—ã –∏–≥—Ä–æ–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ:', players);
                        
                        // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫
                        const cacheKey = `players_${roomId}`;
                        this._playersCache.set(cacheKey, players);
                        this._lastFetchTime = Date.now();
                        
                        this.updatePlayersList(players);
                        
                        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º GameStateManager
                        const gameStateManager = window.app?.services?.get('gameStateManager');
                        if (gameStateManager && typeof gameStateManager.updateFromServer === 'function') {
                            gameStateManager.updateFromServer(data.state);
                        }
                        
                        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                        setTimeout(() => {
                            this.preloadGameData();
                        }, 10000); // –ß–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    } else {
                        console.log('‚ö†Ô∏è PlayersPanel: –ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ API');
                        this.showEmptyState();
                    }
                } else {
                    console.warn('‚ö†Ô∏è PlayersPanel: –ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç API:', data);
                    this.showErrorState('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞');
                }
            })
            .catch(err => {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞
                if (err.name === 'AbortError') {
                    return;
                }
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ rate limit
                if (err.message === 'RATE_LIMITED') {
                    console.log('‚ö†Ô∏è PlayersPanel: –ü—Ä–æ–ø—É—â–µ–Ω –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ rate limit');
                    return;
                }
                console.error('‚ùå PlayersPanel: –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤:', err);
                this.showErrorState(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${err.message}`);
            })
            .finally(() => {
                // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ AbortController
                this._currentAbortController = null;
                // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ pending –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º limiter
                if (window.CommonUtils) {
                    window.CommonUtils.gameStateLimiter.clearRequestPending(roomId);
                }
            });
    }
    
    /**
     * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
     */
    preloadGameData() {
        // –ü–æ–ª—É—á–∞–µ–º roomId
        const hash = window.location.hash;
        const hashMatch = hash.match(/roomId=([^&]+)/);
        let roomId = hashMatch ? hashMatch[1] : null;
        
        if (!roomId) {
            try {
                const roomData = sessionStorage.getItem('am_room_data');
                if (roomData) {
                    const parsed = JSON.parse(roomData);
                    roomId = parsed.roomId || parsed.id;
                }
            } catch (e) {
                console.warn('PlayersPanel: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è roomId –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:', e);
            }
        }
        
        if (roomId) {
            // –ê—Ç–æ–º–∞—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ pending —Ñ–ª–∞–≥–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race condition
            if (window.CommonUtils && !window.CommonUtils.gameStateLimiter.setRequestPending(roomId)) {
                console.log('üö´ PlayersPanel: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –∏–∑-–∑–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ rate limiting –∏–ª–∏ concurrent request');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π rate limiting –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ pending —Ñ–ª–∞–≥–∞
            const now = Date.now();
            if (now - this._lastApiRequestTime < this._minRequestInterval) {
                console.log('üö´ PlayersPanel: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –∏–∑-–∑–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ rate limiting');
                // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ pending —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
                window.CommonUtils.gameStateLimiter.clearRequestPending(roomId);
                return;
            }
            
            // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –µ—Å—Ç—å
            if (this._currentAbortController) {
                this._currentAbortController.abort();
            }
            
            // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            this._currentAbortController = new AbortController();
            this._lastApiRequestTime = now;
            const timeoutId = setTimeout(() => {
                this._currentAbortController.abort();
                window.CommonUtils?.gameStateLimiter.clearRequestPending(roomId);
            }, 3000); // 3 —Å–µ–∫—É–Ω–¥—ã –≤–º–µ—Å—Ç–æ 5
            
            fetch(`/api/rooms/${roomId}/game-state`, {
                signal: this._currentAbortController.signal,
                headers: {
                    'Cache-Control': 'no-cache',
                    'Pragma': 'no-cache'
                }
            })
            .then(response => {
                clearTimeout(timeoutId);
                if (response.ok) {
                    return response.json();
                }
                if (response.status === 429) {
                    console.warn('‚ö†Ô∏è PlayersPanel: HTTP 429 –ø—Ä–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                    throw new Error('RATE_LIMITED');
                }
                throw new Error(`HTTP ${response.status}`);
            })
            .then(data => {
                if (data && data.success && data.state) {
                    // –ö—ç—à–∏—Ä—É–µ–º –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    const cacheKey = `preload_${roomId}`;
                    this._playersCache.set(cacheKey, data.state);
                    console.log('üöÄ PlayersPanel: –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
                }
            })
            .catch(err => {
                clearTimeout(timeoutId);
                if (err.name !== 'AbortError' && err.message !== 'RATE_LIMITED') {
                    console.warn('‚ö†Ô∏è PlayersPanel: –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
                }
            })
            .finally(() => {
                // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ pending –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º limiter
                if (window.CommonUtils) {
                    window.CommonUtils.gameStateLimiter.clearRequestPending(roomId);
                }
            });
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoadingState() {
        const playersList = document.getElementById('players-list');
        const playersCount = document.getElementById('players-count');
        
        if (playersList) {
            playersList.innerHTML = '<div class="loading-placeholder">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–∫–æ–≤...</div>';
        }
        
        if (playersCount) {
            playersCount.textContent = '?/4';
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
     */
    showErrorState(message = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤') {
        const playersList = document.getElementById('players-list');
        const playersCount = document.getElementById('players-count');
        
        if (playersList) {
            playersList.innerHTML = `<div class="error-placeholder">${message}</div>`;
        }
        
        if (playersCount) {
            playersCount.textContent = '?/4';
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    showEmptyState() {
        const playersList = document.getElementById('players-list');
        const playersCount = document.getElementById('players-count');
        
        if (playersList) {
            playersList.innerHTML = '<div class="empty-placeholder">–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ</div>';
        }
        
        if (playersCount) {
            playersCount.textContent = '0/4';
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ö–æ–¥–∞
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã —Ö–æ–¥–∞
     */
    handleTurnChanged(data) {
        console.log('üîÑ PlayersPanel: –°–º–µ–Ω–∞ —Ö–æ–¥–∞', data);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –∏–≥—Ä–æ–∫–µ
        this.updateActivePlayerInfo(data.activePlayer);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
     * @param {Array} players - –ú–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤
     */
    updatePlayersList(players = []) {
        console.log('üîß PlayersPanel: updatePlayersList –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', players);
        
        const playersList = document.getElementById('players-list');
        const playersCount = document.getElementById('players-count');
        
        if (!playersList) {
            console.error('‚ùå PlayersPanel: –≠–ª–µ–º–µ–Ω—Ç players-list –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        if (!playersCount) {
            console.error('‚ùå PlayersPanel: –≠–ª–µ–º–µ–Ω—Ç players-count –Ω–µ –Ω–∞–π–¥–µ–Ω');
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤
            playersCount.textContent = `${players.length}/4`;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        if (!Array.isArray(players)) {
            console.warn('‚ö†Ô∏è PlayersPanel: players –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', typeof players, players);
            playersList.innerHTML = '<div class="error-placeholder">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤</div>';
            return;
        }
        
        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        playersList.innerHTML = '';
        
        if (players.length === 0) {
            console.log('üë• PlayersPanel: –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            playersList.innerHTML = '<div class="empty-placeholder">–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ</div>';
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        players.forEach((player, index) => {
            if (!player) {
                console.warn('‚ö†Ô∏è PlayersPanel: –ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏', index);
                return;
            }
            
            try {
                const playerElement = this.createPlayerElement(player, index);
                if (playerElement) {
                    playersList.appendChild(playerElement);
                } else {
                    console.error('‚ùå PlayersPanel: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞:', player);
                }
            } catch (error) {
                console.error('‚ùå PlayersPanel: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–≥—Ä–æ–∫–∞:', error, player);
            }
        });
        
        console.log(`üë• PlayersPanel: –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ (${players.length})`);
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å —Å –±–∞–Ω–∫–æ–º, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
        this.syncBalanceWithBank(players);
    }
    
    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–æ–≤ —Å –±–∞–Ω–∫–æ–º
     * @param {Array} players - –ú–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤
     */
    syncBalanceWithBank(players) {
        if (!this.bankModule) return;
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const currentUserId = this.getCurrentUserId();
            if (!currentUserId) return;
            
            // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ
            const currentPlayer = players.find(p => 
                p.id === currentUserId || 
                p.userId === currentUserId || 
                p.username === currentUserId
            );
            
            if (currentPlayer && this.bankModule.updatePlayerBalance) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –±–∞–Ω–∫–µ
                this.bankModule.updatePlayerBalance(currentPlayer);
                console.log('üí∞ PlayersPanel: –ë–∞–ª–∞–Ω—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–∞–Ω–∫–æ–º:', currentPlayer.balance || currentPlayer.money);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è PlayersPanel: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–≥—Ä–æ–∫–∞
     * @param {Object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @param {number} index - –ò–Ω–¥–µ–∫—Å –∏–≥—Ä–æ–∫–∞
     * @returns {HTMLElement} –≠–ª–µ–º–µ–Ω—Ç –∏–≥—Ä–æ–∫–∞
     */
    createPlayerElement(player, index) {
        const playerDiv = document.createElement('div');
        playerDiv.className = 'player-item';
        
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        const balance = player.balance || player.money || player.cash || 0;
        
        playerDiv.innerHTML = `
            <div class="player-avatar">
                <span class="player-icon">üéØ</span>
            </div>
            <div class="player-info">
                <div class="player-name">${player.username || '–ò–≥—Ä–æ–∫ ' + (index + 1)}</div>
                <div class="player-status ${player.isActive ? 'active' : 'inactive'}">
                    ${player.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–û–∂–∏–¥–∞–Ω–∏–µ'}
                </div>
                <div class="player-balance">$${balance}</div>
            </div>
            <div class="player-token">
                <span class="token-icon">üé≤</span>
            </div>
        `;
        
        return playerDiv;
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
     */
    handlePlayersUpdated(data) {
        console.log('üë• PlayersPanel: –ò–≥—Ä–æ–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', data);
        // –ò–≥—Ä–æ–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –∏–≥—Ä–æ–∫–µ - –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
     * @param {Object} activePlayer - –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
     */
    updateActivePlayerInfo(activePlayer) {
        const currentPlayerName = document.getElementById('current-player-name');
        const turnStatus = document.getElementById('turn-status');
        const playerAvatar = document.getElementById('active-player-avatar');
        const playerTimer = document.getElementById('player-timer');
        const statusIndicator = document.getElementById('player-status-indicator');
        
        if (currentPlayerName) {
            if (activePlayer) {
                const displayName = PlayerStatusUtils.getPlayerDisplayName(activePlayer);
                currentPlayerName.textContent = displayName;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ —ç–º–æ–¥–∑–∏
                if (playerAvatar && displayName) {
                    const initials = displayName.split(' ')
                        .map(word => word.charAt(0))
                        .join('')
                        .toUpperCase()
                        .substring(0, 2);
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
                    const playerEmoji = this.getPlayerEmoji(displayName);
                    const avatarText = playerAvatar.querySelector('.avatar-text');
                    if (avatarText) {
                        avatarText.textContent = playerEmoji || initials || 'üë§';
                    }
                }
            } else {
                currentPlayerName.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
                const avatarText = playerAvatar?.querySelector('.avatar-text');
                if (avatarText) {
                    avatarText.textContent = 'üë§';
                }
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ö–æ–¥–∞
        if (turnStatus) {
            const statusIcon = turnStatus.querySelector('.status-icon');
            const statusText = turnStatus.querySelector('.status-text');
            
            if (statusIcon && statusText) {
                if (activePlayer) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –±—Ä–æ—Å–∞—Ç—å –∫—É–±–∏–∫
                    const canRoll = this.gameStateManager?.getState()?.canRoll || false;
                    const currentUserId = this.getCurrentUserId();
                    const isMyTurn = activePlayer && currentUserId && 
                        (activePlayer.id === currentUserId || 
                         activePlayer.userId === currentUserId || 
                         activePlayer.username === currentUserId);
                    
                    if (isMyTurn) {
                        if (canRoll) {
                            statusIcon.textContent = 'üé≤';
                            statusText.textContent = '–ú–æ–∂–Ω–æ –±—Ä–æ—Å–∞—Ç—å';
                            statusIndicator.style.background = '#22c55e';
                            this.showTimer(playerTimer, true);
                        } else {
                            statusIcon.textContent = '‚è≥';
                            statusText.textContent = '–û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π';
                            statusIndicator.style.background = '#f59e0b';
                            this.showTimer(playerTimer, false);
                        }
                    } else {
                        statusIcon.textContent = 'üë§';
                        statusText.textContent = `${PlayerStatusUtils.getPlayerDisplayName(activePlayer)} —Ö–æ–¥–∏—Ç`;
                        statusIndicator.style.background = '#6366f1';
                        this.showTimer(playerTimer, false);
                    }
                } else {
                    statusIcon.textContent = '‚è≥';
                    statusText.textContent = '–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö';
                    statusIndicator.style.background = '#6b7280';
                    this.showTimer(playerTimer, false);
                }
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞
     */
    getPlayerEmoji(playerName) {
        const emojiMap = {
            'admin': 'üëë',
            'roman': 'üéØ',
            'test': 'üß™',
            'player': 'üéÆ'
        };
        
        const name = playerName.toLowerCase();
        return emojiMap[name] || null;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Ç–∞–π–º–µ—Ä - –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
     */
    showTimer(timerElement, show) {
        if (timerElement) {
            timerElement.style.display = show ? 'block' : 'none';
            if (show) {
                this.startTurnTimer(timerElement);
            } else {
                this.stopTurnTimer();
            }
        }
    }

    startTurnTimer(timerElement) {
        this.stopTurnTimer();
        const timerText = timerElement.querySelector('.timer-text');
        if (!timerText) return;

        let seconds = 30; // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ö–æ–¥
        const updateTimer = () => {
            const mins = Math.floor(seconds / 60);
            const secs = seconds % 60;
            timerText.textContent = `${mins}:${secs.toString().padStart(2, '0')}`;
            
            if (seconds <= 0) {
                this.stopTurnTimer();
                return;
            }
            
            seconds--;
            this.timerId = setTimeout(updateTimer, 1000);
        };
        
        updateTimer();
    }

    stopTurnTimer() {
        if (this.timerId) {
            clearTimeout(this.timerId);
            this.timerId = null;
        }
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–Ω–∫ –º–æ–¥—É–ª—è
     */
    openBankModule() {
        console.log('üè¶ PlayersPanel: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –±–∞–Ω–∫...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        requestAnimationFrame(async () => {
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π BankModule –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                if (!this.bankModule) {
                    console.log('üè¶ PlayersPanel: BankModule –Ω–µ —Å–æ–∑–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º...');
                    this.createBankModule();
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                    await new Promise(resolve => {
                        const checkModule = () => {
                            if (this.bankModule) {
                                resolve();
                            } else {
                                requestAnimationFrame(checkModule);
                            }
                        };
                        requestAnimationFrame(checkModule);
                    });
                }
                
                if (this.bankModule) {
                    console.log('üè¶ PlayersPanel: –û—Ç–∫—Ä—ã–≤–∞–µ–º BankModule...');
                    await this.bankModule.open();
                    console.log('‚úÖ PlayersPanel: –ë–∞–Ω–∫ –º–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç');
                } else {
                    console.error('‚ùå PlayersPanel: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å BankModule');
                    
                    // –ë—ã—Å—Ç—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                    this.bankModule = null;
                    this.createBankModule();
                    
                    if (this.bankModule) {
                        await this.bankModule.open();
                        console.log('‚úÖ PlayersPanel: –ë–∞–Ω–∫ –º–æ–¥—É–ª—å –æ—Ç–∫—Ä—ã—Ç –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏');
                    } else {
                        console.error('‚ùå PlayersPanel: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - BankModule –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω');
                    }
                }
            } catch (error) {
                console.error('‚ùå PlayersPanel: –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–Ω–∫–∞:', error);
                console.error('‚ùå PlayersPanel: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.stack);
            }
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫—É–±–∏–∫–∞ - –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
     * @param {number} result - –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
     */
    updateDiceResult(result) {
        const diceResult = document.getElementById('dice-result-value');
        const rollHistory = document.getElementById('roll-history');
        
        if (diceResult) {
            const numericValue = typeof result === 'object'
                ? Number(result?.value ?? result?.total)
                : Number(result);
            
            const diceFace = diceResult.querySelector('.dice-face');
            const diceNumber = diceFace?.querySelector('.dice-number');
            
            if (Number.isFinite(numericValue) && numericValue >= 1 && numericValue <= 6) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if (diceNumber) {
                    diceNumber.textContent = numericValue;
                }
                
                if (diceFace) {
                    diceFace.classList.add('rolling');
                    setTimeout(() => {
                        diceFace.classList.remove('rolling');
                    }, 600);
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –±—Ä–æ—Å–∫–æ–≤
                this.addToRollHistory(numericValue, rollHistory);
            } else {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º placeholder —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if (diceNumber) {
                    diceNumber.textContent = '-';
                }
            }
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –±—Ä–æ—Å–∫–æ–≤ - –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
     */
    addToRollHistory(value, rollHistoryElement) {
        if (!rollHistoryElement) return;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∏—Å—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!this.rollHistory) {
            this.rollHistory = [];
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        this.rollHistory.unshift(value);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 5 –±—Ä–æ—Å–∫–∞–º–∏
        if (this.rollHistory.length > 5) {
            this.rollHistory = this.rollHistory.slice(0, 5);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        rollHistoryElement.innerHTML = this.rollHistory
            .map(val => `<div class="roll-item">${val}</div>`)
            .join('');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –∫—É–±–∏–∫–∞
     * @param {number} value - –ó–Ω–∞—á–µ–Ω–∏–µ –∫—É–±–∏–∫–∞ (1-6)
     * @returns {string} –≠–º–æ–¥–∑–∏ –∫—É–±–∏–∫–∞
     */
    getDiceEmoji(value) {
        const diceEmojis = ['‚öÄ', '‚öÅ', '‚öÇ', '‚öÉ', '‚öÑ', '‚öÖ'];
        return diceEmojis[value - 1] || '‚öÄ';
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     */
    updateControlButtons(state) {
        // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É roll-dice - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ TurnController
        const passBtn = document.getElementById('pass-turn');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–π –ª–∏ —ç—Ç–æ —Ö–æ–¥
        const currentUserId = this.getCurrentUserId();
        const activePlayer = state.activePlayer;
        
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ isMyTurn
        let isMyTurn = false;
        if (activePlayer && currentUserId) {
            isMyTurn = 
                activePlayer.id === currentUserId ||
                activePlayer.userId === currentUserId ||
                activePlayer.username === currentUserId ||
                (activePlayer.username && currentUserId && activePlayer.username === currentUserId);
        }
        
        if (passBtn) {
            // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ —Ö–æ–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –º–æ–π —Ö–æ–¥ –ò –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥
            const shouldBeDisabled = !isMyTurn || !state.canEndTurn;
            passBtn.disabled = shouldBeDisabled;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é
            if (isMyTurn && state.canEndTurn) {
                passBtn.classList.add('active');
            } else {
                passBtn.classList.remove('active');
            }
        }
        
        console.log('üéØ PlayersPanel: –û–±–Ω–æ–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', {
            currentUserId,
            activePlayerId: activePlayer?.id,
            activePlayerUsername: activePlayer?.username,
            activePlayerUserId: activePlayer?.userId,
            isMyTurn,
            canRoll: state.canRoll,
            canEndTurn: state.canEndTurn,
            passBtnDisabled: passBtn?.disabled,
            shouldBeDisabled: !isMyTurn || !state.canEndTurn,
            turnCheckDetails: {
                idMatch: activePlayer?.id === currentUserId,
                userIdMatch: activePlayer?.userId === currentUserId,
                usernameMatch: activePlayer?.username === currentUserId
            }
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
     */
    async handleEndTurn() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º TurnService —á–µ—Ä–µ–∑ window.app
            const app = window.app;
            const turnService = app && app.getModule ? app.getModule('turnService') : null;
            
            if (!turnService) {
                console.warn('‚ö†Ô∏è PlayersPanel: TurnService –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞
            if (!turnService.canEndTurn()) {
                console.warn('‚ö†Ô∏è PlayersPanel: –ù–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–æ–π —Ö–æ–¥ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ TurnService)
            const currentUserId = this.getCurrentUserId();
            const state = turnService.getState();
            
            if (!state || !state.activePlayer) {
                console.warn('‚ö†Ô∏è PlayersPanel: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞');
                return;
            }
            
            const activePlayer = state.activePlayer;
            const isMyTurn = 
                activePlayer.id === currentUserId ||
                activePlayer.userId === currentUserId ||
                (activePlayer.username && currentUserId && activePlayer.username === currentUserId);
            
            if (!isMyTurn) {
                console.warn('‚ö†Ô∏è PlayersPanel: –ù–µ –≤–∞—à —Ö–æ–¥ - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ', {
                    activePlayer: activePlayer.username || activePlayer.id,
                    currentUserId
                });
                return;
            }
            
            console.log('üéØ PlayersPanel: –ó–∞–≤–µ—Ä—à–∞–µ–º —Ö–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            await turnService.endTurn();
        } catch (error) {
            console.error('‚ùå PlayersPanel: –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞:', error);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {string|null} ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getCurrentUserId() {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ TurnService
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ sessionStorage
            const bundleRaw = sessionStorage.getItem('am_player_bundle');
            if (bundleRaw) {
                const bundle = JSON.parse(bundleRaw);
                const userId = bundle?.currentUser?.id || bundle?.currentUser?.userId;
                if (userId) {
                    console.log('üîç PlayersPanel: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ bundle:', userId);
                    return userId;
                }
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ localStorage
            const userRaw = localStorage.getItem('aura_money_user');
            if (userRaw) {
                const user = JSON.parse(userRaw);
                const userId = user?.id || user?.userId;
                if (userId) {
                    console.log('üîç PlayersPanel: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage:', userId);
                    return userId;
                }
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ app
            if (window.app && window.app.getModule) {
                const userModel = window.app.getModule('userModel');
                if (userModel && userModel.getCurrentUser) {
                    const currentUser = userModel.getCurrentUser();
                    if (currentUser && (currentUser.id || currentUser.userId)) {
                        const userId = currentUser.id || currentUser.userId;
                        console.log('üîç PlayersPanel: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ userModel:', userId);
                        return userId;
                    }
                }
            }
            
            console.warn('‚ö†Ô∏è PlayersPanel: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return null;
        } catch (error) {
            console.error('‚ùå PlayersPanel: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return null;
        }
    }
    
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ PlayersPanel)
     */
    addStyles() {
        if (document.getElementById('players-panel-styles')) return;
        
        const styles = document.createElement('style');
        styles.id = 'players-panel-styles';
        styles.textContent = `
            .players-panel {
                background: linear-gradient(145deg, rgba(20, 25, 40, 0.95), rgba(15, 20, 35, 0.95));
                border-radius: 1.5rem;
                padding: 2rem;
                border: 2px solid rgba(99, 102, 241, 0.3);
                backdrop-filter: blur(20px);
                color: #ffffff;
                max-width: 400px;
                width: 100%;
                box-shadow: 
                    0 20px 40px rgba(0, 0, 0, 0.4),
                    0 0 0 1px rgba(255, 255, 255, 0.05),
                    inset 0 1px 0 rgba(255, 255, 255, 0.1);
                position: relative;
                overflow: hidden;
                height: fit-content;
                max-height: calc(100vh - 120px);
            }
            
            .panel-grid {
                display: flex;
                flex-direction: column;
                gap: 1.5rem;
                height: 100%;
            }
            
            
            .game-controls {
                display: flex;
                flex-direction: column;
                gap: 1.5rem;
            }

            .dice-controls {
                display: flex;
                gap: 1rem;
                flex-direction: row;
            }

            /* –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –∫—É–±–∏–∫ –≤ –≤–µ—Ä—Ö–Ω–µ–º –±–ª–æ–∫–µ */
            .dice-display #dice-result {
                font-size: 9rem;
                line-height: 1;
            }

            .dice-controls .btn {
                flex: 1;
                min-width: 140px;
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 0.5rem;
            }
            
            .turn-info {
                background: linear-gradient(135deg, rgba(255, 255, 255, 0.08), rgba(255, 255, 255, 0.05));
                border-radius: 1rem;
                padding: 1.5rem;
                border: 2px solid rgba(99, 102, 241, 0.2);
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            }
            
            .turn-info .player-info {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 0.75rem;
            }
            
            .turn-info .player-info:last-child {
                margin-bottom: 0;
            }
            
            .turn-info .label {
                color: #a0a0a0;
                font-size: 0.9rem;
            }
            
            .turn-info .value {
                color: #ffffff;
                font-weight: 600;
                font-size: 0.9rem;
            }

            /* –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –∫—É–±–∏–∫ –≤ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏ "–ö—É–±–∏–∫:" */
            .turn-info .player-info .value#dice-result {
                font-size: 3rem;
                font-weight: 800;
                color: #22c55e;
            }
            
            
            .btn {
                padding: 1rem 1.5rem;
                border: none;
                border-radius: 1rem;
                font-weight: 700;
                font-size: 0.95rem;
                cursor: pointer;
                transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                text-decoration: none;
                display: inline-flex;
                align-items: center;
                justify-content: center;
                gap: 0.75rem;
                position: relative;
                overflow: hidden;
                backdrop-filter: blur(10px);
            }
            
            .btn-primary {
                background: linear-gradient(135deg, #6366f1, #8b5cf6);
                color: white;
                border: 2px solid rgba(99, 102, 241, 0.3);
                box-shadow: 0 8px 25px rgba(99, 102, 241, 0.3);
            }
            
            .btn-primary:hover:not(:disabled) {
                background: linear-gradient(135deg, #8b5cf6, #a855f7);
                transform: translateY(-3px);
                box-shadow: 0 12px 35px rgba(99, 102, 241, 0.5);
                border-color: rgba(99, 102, 241, 0.6);
            }
            
            .btn-secondary {
                background: linear-gradient(135deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.1));
                color: #ffffff;
                border: 2px solid rgba(255, 255, 255, 0.2);
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            }
            
            .btn-secondary:hover:not(:disabled) {
                background: linear-gradient(135deg, rgba(255, 255, 255, 0.25), rgba(255, 255, 255, 0.15));
                border-color: rgba(255, 255, 255, 0.4);
                transform: translateY(-3px);
                box-shadow: 0 12px 35px rgba(0, 0, 0, 0.3);
            }
            
            .btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
                transform: none !important;
                box-shadow: none !important;
            }
            
            .bank-section {
                margin-top: 15px;
                display: flex;
                justify-content: center;
            }
            
            .btn-bank {
                background: linear-gradient(135deg, #8b5cf6, #7c3aed);
                border: 1px solid rgba(139, 92, 246, 0.3);
                color: white;
                font-weight: 600;
                padding: 12px 24px;
                border-radius: 10px;
                transition: all 0.3s ease;
                box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
            }
            
            .btn-bank:hover {
                background: linear-gradient(135deg, #7c3aed, #6d28d9);
                transform: translateY(-2px);
                box-shadow: 0 6px 16px rgba(139, 92, 246, 0.4);
            }
            
            .btn-bank:active {
                transform: translateY(0);
            }
            
            /* –°—Ç–∏–ª–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ */
            .players-section {
                margin-top: 1.5rem;
                padding-top: 1.5rem;
                border-top: 1px solid rgba(255, 255, 255, 0.1);
            }
            
            .players-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 1rem;
            }
            
            .players-title {
                font-size: 1.1rem;
                font-weight: 600;
                color: #ffffff;
                margin: 0;
            }
            
            .players-count {
                background: rgba(99, 102, 241, 0.2);
                color: #6366f1;
                padding: 0.25rem 0.75rem;
                border-radius: 1rem;
                font-size: 0.875rem;
                font-weight: 500;
                border: 1px solid rgba(99, 102, 241, 0.3);
            }
            
            .players-list {
                display: flex;
                flex-direction: column;
                gap: 0.75rem;
            }
            
            .player-item {
                display: flex;
                align-items: center;
                gap: 0.75rem;
                padding: 0.75rem;
                background: rgba(255, 255, 255, 0.05);
                border-radius: 0.75rem;
                border: 1px solid rgba(255, 255, 255, 0.1);
                transition: all 0.3s ease;
            }
            
            .player-item:hover {
                background: rgba(255, 255, 255, 0.08);
                border-color: rgba(255, 255, 255, 0.2);
            }
            
            .player-avatar {
                width: 2.5rem;
                height: 2.5rem;
                border-radius: 50%;
                background: linear-gradient(135deg, #6366f1, #8b5cf6);
                display: flex;
                align-items: center;
                justify-content: center;
                flex-shrink: 0;
            }
            
            .player-icon {
                font-size: 1.25rem;
            }
            
            .player-info {
                flex: 1;
                min-width: 0;
            }
            
            .player-name {
                font-weight: 600;
                color: #ffffff;
                font-size: 0.875rem;
                margin-bottom: 0.25rem;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
            }
            
            .player-status {
                font-size: 0.75rem;
                font-weight: 500;
                margin-bottom: 0.25rem;
            }
            
            .player-status.active {
                color: #10b981;
            }
            
            .player-status.inactive {
                color: #6b7280;
            }
            
            .player-balance {
                font-size: 0.75rem;
                color: #fbbf24;
                font-weight: 600;
            }
            
            .player-token {
                flex-shrink: 0;
            }
            
            .token-icon {
                font-size: 1rem;
                opacity: 0.7;
            }

            /* === –ù–û–í–´–ô –£–õ–£–ß–®–ï–ù–ù–´–ô –î–ò–ó–ê–ô–ù –ü–†–ê–í–û–ô –ü–ê–ù–ï–õ–ò === */
            
            /* –û–±—â–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Å–µ–∫—Ü–∏–π */
            .section-title {
                font-size: 1rem;
                font-weight: 700;
                color: #ffffff;
                margin: 0 0 0.75rem 0;
                text-transform: uppercase;
                letter-spacing: 0.05em;
                opacity: 0.9;
            }

            /* –°–µ–∫—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ–¥–∞ */
            .current-turn-section {
                background: linear-gradient(135deg, rgba(255, 255, 255, 0.08), rgba(255, 255, 255, 0.05));
                border-radius: 1rem;
                padding: 1.25rem;
                border: 2px solid rgba(99, 102, 241, 0.2);
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
                margin-bottom: 1.5rem;
            }

            .active-player-card {
                display: flex;
                align-items: center;
                gap: 1rem;
                padding: 0.75rem;
                background: rgba(255, 255, 255, 0.05);
                border-radius: 0.75rem;
                border: 1px solid rgba(255, 255, 255, 0.1);
            }

            .player-avatar {
                width: 3rem;
                height: 3rem;
                background: linear-gradient(135deg, #6366f1, #8b5cf6);
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 1.25rem;
                box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);
            }

            .player-details {
                flex: 1;
                display: flex;
                flex-direction: column;
                gap: 0.5rem;
            }

            .player-name {
                font-size: 1.1rem;
                font-weight: 700;
                color: #ffffff;
                line-height: 1.2;
            }

            .player-status {
                display: flex;
                align-items: center;
                gap: 0.5rem;
                padding: 0.375rem 0.75rem;
                border-radius: 1.5rem;
                font-size: 0.8rem;
                font-weight: 600;
                transition: all 0.3s ease;
            }

            .player-status.waiting {
                background: rgba(156, 163, 175, 0.2);
                color: #a0a0a0;
                border: 1px solid rgba(156, 163, 175, 0.3);
            }

            .player-status.active {
                background: rgba(34, 197, 94, 0.2);
                color: #22c55e;
                border: 1px solid rgba(34, 197, 94, 0.3);
                animation: pulse 2s infinite;
            }

            .player-status.processing {
                background: rgba(245, 158, 11, 0.2);
                color: #f59e0b;
                border: 1px solid rgba(245, 158, 11, 0.3);
            }

            .player-status.loading {
                background: rgba(156, 163, 175, 0.15);
                color: #94a3b8;
                border: 1px solid rgba(156, 163, 175, 0.2);
            }

            .player-timer {
                display: none;
                align-items: center;
                gap: 0.375rem;
                padding: 0.25rem 0.5rem;
                background: rgba(239, 68, 68, 0.15);
                border-radius: 1rem;
                font-size: 0.75rem;
                color: #fca5a5;
                border: 1px solid rgba(239, 68, 68, 0.3);
                animation: timerPulse 1s infinite;
            }

            @keyframes pulse {
                0%, 100% { opacity: 1; }
                50% { opacity: 0.7; }
            }

            @keyframes timerPulse {
                0%, 100% { opacity: 0.8; }
                50% { opacity: 1; }
            }

            /* –°–µ–∫—Ü–∏—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ */
            .dice-roll-section {
                background: linear-gradient(135deg, rgba(255, 255, 255, 0.08), rgba(255, 255, 255, 0.05));
                border-radius: 1rem;
                padding: 1.25rem;
                border: 2px solid rgba(156, 163, 175, 0.2);
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
                margin-bottom: 1.5rem;
            }

            .dice-container {
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 1rem;
            }

            .dice-visual {
                width: 5rem;
                height: 5rem;
                background: linear-gradient(135deg, #ffffff, #f1f5f9);
                border-radius: 1rem;
                display: flex;
                align-items: center;
                justify-content: center;
                box-shadow: 
                    0 8px 32px rgba(0, 0, 0, 0.3),
                    inset 0 2px 4px rgba(255, 255, 255, 0.5),
                    inset 0 -2px 4px rgba(0, 0, 0, 0.1);
                border: 3px solid rgba(248, 250, 252, 0.8);
                position: relative;
            }

            .dice-visual::before {
                content: '';
                position: absolute;
                inset: -3px;
                background: linear-gradient(45deg, #6366f1, #8b5cf6, #6366f1);
                border-radius: 1rem;
                z-index: -1;
                opacity: 0.3;
            }

            .dice-face {
                font-size: 2.5rem;
                font-weight: 900;
                color: #1e293b;
                text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                transition: all 0.3s ease;
            }

            .dice-face.active {
                color: #059669;
                text-shadow: 0 0 20px rgba(5, 150, 105, 0.5);
                transform: scale(1.1);
            }

            .dice-face.rolling {
                animation: diceRoll 0.2s infinite;
            }

            @keyframes diceRoll {
                0% { transform: rotate(0deg) scale(1); }
                25% { transform: rotate(90deg) scale(1.1); }
                50% { transform: rotate(180deg) scale(0.9); }
                75% { transform: rotate(270deg) scale(1.1); }
                100% { transform: rotate(360deg) scale(1); }
            }

            .dice-actions {
                width: 100%;
            }

            .btn-roll {
                width: 100%;
                background: linear-gradient(135deg, #6366f1, #8b5cf6);
                color: white;
                border: 2px solid rgba(99, 102, 241, 0.3);
                box-shadow: 0 8px 25px rgba(99, 102, 241, 0.3);
                font-size: 1rem;
                padding: 0.875rem 1.5rem;
            }

            .btn-roll:hover:not(:disabled) {
                transform: translateY(-2px);
                box-shadow: 0 12px 35px rgba(99, 102, 241, 0.5);
            }

            .roll-history {
                display: flex;
                gap: 0.5rem;
                flex-wrap: wrap;
                justify-content: center;
                opacity: 0.6;
            }

            .roll-history-item {
                width: 2rem;
                height: 2rem;
                background: rgba(255, 255, 255, 0.1);
                border-radius: 0.25rem;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 0.8rem;
                font-weight: 600;
                color: #ffffff;
            }

            /* –°–µ–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π */
            .player-actions {
                background: linear-gradient(135deg, rgba(255, 255, 255, 0.08), rgba(255, 255, 255, 0.05));
                border-radius: 1rem;
                padding: 1.25rem;
                border: 2px solid rgba(245, 158, 11, 0.2);
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
                margin-bottom: 1.5rem;
            }

            .action-buttons {
                display: flex;
                flex-direction: column;
                gap: 0.75rem;
            }

            .btn-action {
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 0.75rem;
                padding: 0.875rem 1.25rem;
                border-radius: 0.75rem;
                font-weight: 600;
                font-size: 0.95rem;
                transition: all 0.3s ease;
                border: none;
                cursor: pointer;
            }

            .btn-bank {
                background: linear-gradient(135deg, #059669, #047857);
                color: white;
                border: 2px solid rgba(5, 150, 105, 0.3);
                box-shadow: 0 8px 25px rgba(5, 150, 105, 0.3);
            }

            .btn-bank:hover:not(:disabled) {
                transform: translateY(-2px);
                box-shadow: 0 12px 35px rgba(5, 150, 105, 0.5);
            }

            .btn-pass {
                background: linear-gradient(135deg, #f59e0b, #d97706);
                color: white;
                border: 2px solid rgba(245, 158, 11, 0.3);
                box-shadow: 0 8px 25px rgba(245, 158, 11, 0.3);
            }

            .btn-pass:hover:not(:disabled) {
                transform: translateY(-2px);
                box-shadow: 0 12px 35px rgba(245, 158, 11, 0.5);
            }

            .btn-pass:disabled {
                opacity: 0.5;
                cursor: not-allowed;
                transform: none;
            }

            /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
            @media (max-width: 768px) {
                .active-player-card {
                    flex-direction: column;
                    text-align: center;
                    gap: 0.75rem;
                }

                .dice-visual {
                    width: 4rem;
                    height: 4rem;
                }

                .dice-face {
                    font-size: 2rem;
                }

                .action-buttons {
                    gap: 0.5rem;
                }

                .btn-action {
                    padding: 0.75rem 1rem;
                    font-size: 0.9rem;
                }
            }
        `;
        
        document.head.appendChild(styles);
    }
    
    /**
     * –ù–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ v3.0
     */
    addNewStyles() {
        if (document.getElementById('game-right-panel-styles')) return;
        
        const styles = document.createElement('style');
        styles.id = 'game-right-panel-styles';
        styles.textContent = `
            /* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ */
            .game-right-panel {
                display: flex;
                flex-direction: column;
                gap: 1.5rem;
                height: 100vh;
                padding: 1.5rem;
                background: linear-gradient(180deg, 
                    rgba(15, 23, 42, 0.95) 0%, 
                    rgba(8, 13, 26, 0.98) 100%);
                border-left: 1px solid rgba(99, 102, 241, 0.2);
                backdrop-filter: blur(20px);
                overflow-y: auto;
                box-sizing: border-box;
            }

            /* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏ */
            .panel-header {
                text-align: center;
                padding-bottom: 1rem;
                border-bottom: 1px solid rgba(148, 163, 184, 0.1);
            }

            .panel-title {
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 0.75rem;
                font-size: 1.25rem;
                font-weight: 700;
                color: #f8fafc;
                margin-bottom: 0.5rem;
            }

            .title-icon {
                font-size: 1.5rem;
            }

            .panel-subtitle {
                font-size: 0.875rem;
                color: rgba(148, 163, 184, 0.8);
                font-weight: 500;
            }

            /* –û–±—â–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤ */
            .active-player-widget,
            .dice-widget,
            .actions-widget,
            .players-widget {
                background: rgba(255, 255, 255, 0.03);
                border-radius: 1rem;
                border: 1px solid rgba(255, 255, 255, 0.08);
                padding: 1.25rem;
                backdrop-filter: blur(10px);
                box-shadow: 
                    0 4px 20px rgba(0, 0, 0, 0.15),
                    inset 0 1px 0 rgba(255, 255, 255, 0.1);
                transition: all 0.3s ease;
            }

            .active-player-widget:hover,
            .dice-widget:hover,
            .actions-widget:hover,
            .players-widget:hover {
                border-color: rgba(99, 102, 241, 0.3);
                box-shadow: 
                    0 8px 30px rgba(0, 0, 0, 0.2),
                    0 0 20px rgba(99, 102, 241, 0.1);
            }

            /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤–∏–¥–∂–µ—Ç–æ–≤ */
            .widget-header {
                display: flex;
                align-items: center;
                gap: 0.75rem;
                margin-bottom: 1rem;
                font-size: 1rem;
                font-weight: 600;
                color: #f8fafc;
            }

            .widget-icon {
                font-size: 1.125rem;
            }

            .widget-title {
                flex: 1;
            }

            /* –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ */
            .player-info-card {
                display: flex;
                align-items: center;
                gap: 1rem;
                padding: 1rem;
                background: rgba(255, 255, 255, 0.05);
                border-radius: 0.75rem;
                border: 1px solid rgba(255, 255, 255, 0.1);
                position: relative;
            }

            .player-avatar-container {
                position: relative;
                flex-shrink: 0;
            }

            .player-avatar {
                width: 3.5rem;
                height: 3.5rem;
                border-radius: 50%;
                background: linear-gradient(135deg, #6366f1, #8b5cf6);
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 1.5rem;
                color: white;
                border: 2px solid rgba(255, 255, 255, 0.2);
                position: relative;
                overflow: hidden;
            }

            .player-avatar::before {
                content: '';
                position: absolute;
                inset: -2px;
                border-radius: 50%;
                background: linear-gradient(45deg, #6366f1, #8b5cf6, #ec4899);
                z-index: -1;
                animation: avatarGlow 3s ease-in-out infinite;
            }

            @keyframes avatarGlow {
                0%, 100% { opacity: 0.7; }
                50% { opacity: 1; }
            }

            .player-status-indicator {
                position: absolute;
                bottom: 0;
                right: 0;
                width: 1rem;
                height: 1rem;
                border-radius: 50%;
                background: #22c55e;
                border: 2px solid rgba(15, 23, 42, 0.95);
                animation: pulse 2s infinite;
            }

            @keyframes pulse {
                0%, 100% { transform: scale(1); opacity: 1; }
                50% { transform: scale(1.1); opacity: 0.8; }
            }

            .player-details {
                flex: 1;
                min-width: 0;
                display: flex;
                flex-direction: row;
                align-items: center;
                gap: 1rem;
                position: relative;
            }

            .player-name {
                font-size: 1.125rem;
                font-weight: 600;
                color: #f8fafc;
                line-height: 1.2;
                word-break: break-word;
                flex-shrink: 0;
            }

            .player-status {
                display: flex;
                align-items: center;
                gap: 0.5rem;
                font-size: 0.875rem;
                color: rgba(148, 163, 184, 0.9);
                line-height: 1.2;
                flex: 1;
            }

            .status-icon {
                font-size: 1rem;
            }

            /* –¢–∞–π–º–µ—Ä */
            .player-timer {
                margin-left: auto;
                margin-right: 0;
            }

            .timer-ring {
                position: relative;
                width: 2rem;
                height: 2rem;
            }

            .timer-svg {
                width: 100%;
                height: 100%;
                transform: rotate(-90deg);
            }

            .timer-bg {
                fill: none;
                stroke: rgba(148, 163, 184, 0.2);
                stroke-width: 2;
            }

            .timer-progress {
                fill: none;
                stroke: #f59e0b;
                stroke-width: 2;
                stroke-linecap: round;
                transition: stroke-dasharray 0.3s ease;
            }

            .timer-text {
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                font-size: 0.75rem;
                font-weight: 600;
                color: #f59e0b;
            }

            /* –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ */
            .dice-display {
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 1rem;
                margin-bottom: 1.5rem;
            }

            .dice-main {
                position: relative;
            }

            .dice-face {
                width: 4rem;
                height: 4rem;
                background: linear-gradient(135deg, #ffffff, #f1f5f9);
                border-radius: 0.75rem;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 2rem;
                font-weight: 700;
                color: #1e293b;
                border: 2px solid rgba(255, 255, 255, 0.3);
                box-shadow: 
                    0 8px 20px rgba(0, 0, 0, 0.2),
                    inset 0 1px 0 rgba(255, 255, 255, 0.5);
                transition: all 0.3s ease;
            }

            .dice-face.rolling {
                animation: diceRoll 0.6s ease-in-out;
            }

            @keyframes diceRoll {
                0%, 100% { transform: rotate(0deg) scale(1); }
                25% { transform: rotate(90deg) scale(1.1); }
                50% { transform: rotate(180deg) scale(1); }
                75% { transform: rotate(270deg) scale(1.1); }
            }

            .dice-number {
                user-select: none;
            }

            .dice-history {
                display: flex;
                gap: 0.5rem;
                max-width: 10rem;
                overflow-x: auto;
                padding: 0.5rem;
                background: rgba(255, 255, 255, 0.05);
                border-radius: 0.5rem;
                border: 1px solid rgba(255, 255, 255, 0.1);
            }

            .roll-item {
                min-width: 2rem;
                height: 2rem;
                background: rgba(255, 255, 255, 0.1);
                border-radius: 0.25rem;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 0.875rem;
                font-weight: 600;
                color: #f8fafc;
            }

            .dice-controls {
                width: 100%;
            }

            .dice-btn {
                width: 100%;
                padding: 1rem 1.5rem;
                background: linear-gradient(135deg, #6366f1, #8b5cf6);
                border: none;
                border-radius: 0.75rem;
                color: white;
                font-size: 1rem;
                font-weight: 700;
                text-transform: uppercase;
                letter-spacing: 0.05em;
                cursor: pointer;
                position: relative;
                overflow: hidden;
                transition: all 0.3s ease;
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 0.75rem;
            }

            .dice-btn:hover:not(:disabled) {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(99, 102, 241, 0.4);
            }

            .dice-btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }

            .btn-glow {
                position: absolute;
                inset: 0;
                background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.2), transparent);
                transform: translateX(-100%);
                transition: transform 0.6s ease;
            }

            .dice-btn:hover .btn-glow {
                transform: translateX(100%);
            }

            /* –ò–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */
            .actions-grid {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 1rem;
            }

            .action-btn {
                padding: 1.25rem 1rem;
                background: rgba(255, 255, 255, 0.05);
                border: 1px solid rgba(255, 255, 255, 0.1);
                border-radius: 0.75rem;
                cursor: pointer;
                transition: all 0.3s ease;
                position: relative;
                overflow: hidden;
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 0.5rem;
                text-align: center;
            }

            .action-btn:hover:not(:disabled) {
                background: rgba(255, 255, 255, 0.08);
                border-color: rgba(99, 102, 241, 0.3);
                transform: translateY(-2px);
                box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
            }

            .action-btn:disabled {
                opacity: 0.4;
                cursor: not-allowed;
            }

            .bank-btn:hover:not(:disabled) {
                border-color: rgba(34, 197, 94, 0.3);
                box-shadow: 0 8px 20px rgba(34, 197, 94, 0.15);
            }

            .pass-btn:hover:not(:disabled) {
                border-color: rgba(245, 158, 11, 0.3);
                box-shadow: 0 8px 20px rgba(245, 158, 11, 0.15);
            }

            .btn-icon {
                font-size: 1.5rem;
            }

            .btn-label {
                font-size: 0.875rem;
                font-weight: 600;
                color: #f8fafc;
            }

            /* –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ */
            .players-count {
                font-size: 0.875rem;
                color: rgba(148, 163, 184, 0.8);
                padding: 0.25rem 0.5rem;
                background: rgba(255, 255, 255, 0.05);
                border-radius: 0.5rem;
                border: 1px solid rgba(255, 255, 255, 0.1);
            }

            .players-list {
                display: flex;
                flex-direction: column;
                gap: 0.75rem;
                max-height: 20rem;
                overflow-y: auto;
            }

            .player-item {
                display: flex;
                align-items: center;
                gap: 0.75rem;
                padding: 0.75rem;
                background: rgba(255, 255, 255, 0.03);
                border-radius: 0.5rem;
                border: 1px solid rgba(255, 255, 255, 0.05);
                transition: all 0.2s ease;
            }

            .player-item:hover {
                background: rgba(255, 255, 255, 0.05);
                border-color: rgba(255, 255, 255, 0.1);
            }

            .player-item.active {
                border-color: rgba(99, 102, 241, 0.4);
                background: rgba(99, 102, 241, 0.1);
            }

            .player-avatar-small {
                width: 2rem;
                height: 2rem;
                border-radius: 50%;
                background: linear-gradient(135deg, #6366f1, #8b5cf6);
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 0.875rem;
                color: white;
                flex-shrink: 0;
            }

            .player-info {
                flex: 1;
                min-width: 0;
            }

            .player-info-name {
                font-size: 0.875rem;
                font-weight: 600;
                color: #f8fafc;
                word-break: break-word;
            }

            .player-info-balance {
                font-size: 0.75rem;
                color: rgba(148, 163, 184, 0.8);
                margin-top: 0.125rem;
            }

            /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
            @media (max-width: 480px) {
                .game-right-panel {
                    padding: 1rem;
                    gap: 1rem;
                }

                .player-info-card {
                    padding: 0.75rem;
                }

                .player-avatar {
                    width: 3rem;
                    height: 3rem;
                }

                .dice-face {
                    width: 3.5rem;
                    height: 3.5rem;
                    font-size: 1.75rem;
                }

                .actions-grid {
                    gap: 0.75rem;
                }

                .action-btn {
                    padding: 1rem 0.75rem;
                }
            }

            /* –°–∫—Ä–æ–ª–ª–±–∞—Ä */
            .game-right-panel::-webkit-scrollbar,
            .players-list::-webkit-scrollbar {
                width: 4px;
            }

            .game-right-panel::-webkit-scrollbar-track,
            .players-list::-webkit-scrollbar-track {
                background: rgba(255, 255, 255, 0.05);
                border-radius: 2px;
            }

            .game-right-panel::-webkit-scrollbar-thumb,
            .players-list::-webkit-scrollbar-thumb {
                background: rgba(99, 102, 241, 0.4);
                border-radius: 2px;
            }

            .game-right-panel::-webkit-scrollbar-thumb:hover,
            .players-list::-webkit-scrollbar-thumb:hover {
                background: rgba(99, 102, 241, 0.6);
            }
        `;
        
        document.head.appendChild(styles);
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     * –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: PlayersPanel —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç UI, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–æ–¥–∞–º–∏ —á–µ—Ä–µ–∑ TurnController
     */
    setupControls() {
        // PlayersPanel –±–æ–ª—å—à–µ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç –±—Ä–æ—Å–∫–æ–º –∫—É–±–∏–∫–∞ –∏ —Ö–æ–¥–∞–º–∏
        // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∞ TurnController
        console.log('‚ÑπÔ∏è PlayersPanel: UI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è TurnController');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –±–∞–Ω–∫–∞
        const openBankBtn = this.container.querySelector('#open-bank');
        if (openBankBtn) {
            openBankBtn.addEventListener('click', () => {
                console.log('üè¶ PlayersPanel: –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –±–∞–Ω–∫–∞ (–∏–∑ setupControls)');
                this.openBankModule();
            });
            console.log('‚úÖ PlayersPanel: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –±–∞–Ω–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω –≤ setupControls');
        } else {
            console.warn('‚ö†Ô∏è PlayersPanel: –ö–Ω–æ–ø–∫–∞ –±–∞–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ setupControls');
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–¥–∞—Ç—å —Ö–æ–¥"
        const passTurnBtn = this.container.querySelector('#pass-turn');
        if (passTurnBtn) {
            passTurnBtn.addEventListener('click', () => {
                this.handleEndTurn();
            });
        }
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è TurnService –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        try {
            const app = window.app;
            const turnService = app && app.getModule ? app.getModule('turnService') : null;
            if (turnService && typeof turnService.on === 'function') {
                turnService.on('roll:start', () => {
                    this._showRollingAnimation();
                });
                turnService.on('roll:success', (response) => {
                    const serverValue = response && (response.serverValue ?? response.diceResult?.value);
                    const localValue = response && response.localRoll && (response.localRoll.value || response.localRoll.total);
                    const value = serverValue ?? localValue ?? null;
                    if (value != null) this.updateDiceResult(value);
                });
                turnService.on('roll:finish', () => {
                    this._hideRollingAnimation();
                });
            }
        } catch (e) {
            console.warn('‚ö†Ô∏è PlayersPanel: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è TurnService', e);
        }
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ v3.0
    _showRollingAnimation() {
        const diceResult = document.getElementById('dice-result-value');
        
        if (diceResult) {
            const diceFace = diceResult.querySelector('.dice-face');
            const diceNumber = diceFace?.querySelector('.dice-number');
            
            if (diceFace) {
                diceFace.classList.add('rolling');
            }
            
            if (diceNumber) {
                const seq = ['1','2','3','4','5','6'];
                let i = 0;
                this._rollingTimer && clearInterval(this._rollingTimer);
                this._rollingTimer = setInterval(() => {
                    diceNumber.textContent = seq[i % seq.length];
                    i++;
                }, 120);
            }
        }
    }
    
    _hideRollingAnimation() {
        if (this._rollingTimer) {
            clearInterval(this._rollingTimer);
            this._rollingTimer = null;
        }
        
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã –∞–Ω–∏–º–∞—Ü–∏–∏
        const diceResult = document.getElementById('dice-result-value');
        if (diceResult) {
            const diceFace = diceResult.querySelector('.dice-face');
            if (diceFace) {
                diceFace.classList.remove('rolling');
            }
        }
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π –ø–∞–º—è—Ç–∏
     */
    destroy() {
        console.log('üë• PlayersPanel v2.0: –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å –æ—á–∏—Å—Ç–∫–æ–π –ø–∞–º—è—Ç–∏...');
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
        if (this.timerId) {
            clearTimeout(this.timerId);
            this.timerId = null;
        }
        
        if (this._rollingTimer) {
            clearInterval(this._rollingTimer);
            this._rollingTimer = null;
        }
        
        // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        if (this._currentAbortController) {
            this._currentAbortController.abort();
            this._currentAbortController = null;
        }
        
        // –û—á–∏—â–∞–µ–º –∫—ç—à
        if (this._playersCache) {
            this._playersCache.clear();
            this._playersCache = null;
        }
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º BankModule
        if (this.bankModule && typeof this.bankModule.destroy === 'function') {
            this.bankModule.destroy();
            this.bankModule = null;
        }
        
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
        if (this.eventBus) {
            this.eventBus.off('game:started');
            this.eventBus.off('game:playersUpdated');
            this.eventBus.off('game:turnChanged');
            this.eventBus.off('dice:rolled');
        }
        
        // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏
        this.container = null;
        this.gameStateManager = null;
        this.eventBus = null;
        this.playerList = null;
        
        console.log('‚úÖ PlayersPanel v2.0: –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
window.PlayersPanel = PlayersPanel;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = PlayersPanel;
}
