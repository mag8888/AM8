/**
 * TurnService v1.0.0
 * –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ–¥–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑—É–µ—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Ö–æ–¥–∞ (–±—Ä–æ—Å–æ–∫, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ) –∏ —ç–º–∏—Ç–∏—Ç —Å–æ–±—ã—Ç–∏—è
 */

class TurnService extends EventTarget {
    constructor({ state, roomApi, diceService, movementService, gameStateManager }) {
        super();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if (!state) {
            throw new Error('TurnService: state instance is required');
        }
        if (!roomApi) {
            throw new Error('TurnService: RoomApi instance is required');
        }
        
        this.state = state;
        this.roomApi = roomApi;
        this.diceService = diceService;
        this.movementService = movementService;
        this.gameStateManager = gameStateManager || null;
        this.listeners = new Map();
        this.lastRollValue = null;
        this._isRolling = false;
        this._isMoving = false;
        this._isEnding = false;
        this._lastIsMyTurnLog = null;
        this._cachedUserId = null;
        this._cachedUsername = null;
        
        console.log('üéÆ TurnService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ —Å —Å–æ–±—ã—Ç–∏—è–º–∏
     * @param {Object} options - –û–ø—Ü–∏–∏ –±—Ä–æ—Å–∫–∞
     * @param {string} options.diceChoice - 'single' –∏–ª–∏ 'double'
     * @param {boolean} options.isReroll - –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –±—Ä–æ—Å–æ–∫ (default: false)
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
     */
    async roll(options = {}) {
        const { diceChoice = 'single', isReroll = false } = options;
        const roomId = this.state.getRoomId();
        
        if (!roomId) {
            throw new Error('TurnService.roll: roomId is missing');
        }

        if (this._isRolling) {
            console.warn('‚ö†Ô∏è TurnService: –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
            throw new Error('Dice roll already in progress');
        }

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∫–ª–∏–∫–æ–≤/—Å–ø–∞–º–∞: –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π roll –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        const now = Date.now();
        if (!this._lastRollAttemptTs) this._lastRollAttemptTs = 0;
        if (now - this._lastRollAttemptTs < 1200) {
            console.warn('‚è≥ TurnService: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –±—Ä–æ—Å–æ–∫ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
            throw new Error('Roll throttled');
        }
        this._lastRollAttemptTs = now;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ö–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!this.isMyTurn()) {
            console.warn('‚ö†Ô∏è TurnService: –ù–µ –≤–∞—à —Ö–æ–¥, –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
            throw new Error('Not your turn');
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const currentUserId = this._getCurrentUserId();
        const currentUsername = this._getCurrentUsername();
        const state = this.getState();
        
        if (!state || !state.activePlayer) {
            console.warn('‚ö†Ô∏è TurnService: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞');
            throw new Error('No active player');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const activePlayer = state.activePlayer;
        const isReallyMyTurn = 
            activePlayer.id === currentUserId ||
            activePlayer.userId === currentUserId ||
            (activePlayer.username && currentUsername && activePlayer.username === currentUsername);
        
        if (!isReallyMyTurn) {
            console.warn('‚ö†Ô∏è TurnService: –ù–∞—Ä—É—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –ø–æ–ø—ã—Ç–∫–∞ —Ö–æ–¥–∞ –∑–∞ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞', {
                activePlayer: activePlayer.username || activePlayer.id,
                currentUser: currentUsername || currentUserId
            });
            throw new Error('Security violation: Not your turn');
        }

        let response;
        try {
            this._isRolling = true;
            // –≠–º–∏—Ç –Ω–∞—á–∞–ª–∞ –±—Ä–æ—Å–∫–∞
            this.emit('roll:start', { diceChoice, isReroll });
            response = await this.roomApi.rollDice(roomId, diceChoice, isReroll);
            this._applyServerState(response?.state);

            const serverValue = Number(response?.diceResult?.value);
            if (Number.isFinite(serverValue)) {
                this.lastRollValue = serverValue;
                if (this.diceService && typeof this.diceService.setLastRoll === 'function') {
                    this.diceService.setLastRoll({
                        value: serverValue,
                        diceCount: response?.diceResult?.diceCount || 1
                    });
                }
            } else {
                this.lastRollValue = null;
            }

            // –≠–º–∏—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            const payload = { ...response, serverValue: this.lastRollValue };
            this.emit('roll:success', payload);
            
            // –≠–º–∏—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É–±–∏–∫–∞ –≤ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏
            if (this.lastRollValue !== null) {
                this.emit('dice:rolled', { value: this.lastRollValue });
            }

            console.log('üéÆ TurnService: –ö—É–±–∏–∫ –±—Ä–æ—à–µ–Ω —É—Å–ø–µ—à–Ω–æ, –∑–Ω–∞—á–µ–Ω–∏–µ =', this.lastRollValue);

            const autoMoveValue = this.lastRollValue;
            const shouldAutoMove = options.autoMove !== false && Number.isFinite(autoMoveValue) && payload?.state?.canMove !== false;
            if (shouldAutoMove) {
                try {
                    // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–≤–∏–∂–µ–Ω–∏–µ–º
                    if (!this.isMyTurn()) {
                        console.warn('‚ö†Ô∏è TurnService: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ - –Ω–µ –≤–∞—à —Ö–æ–¥');
                        return payload;
                    }
                    
                    console.log('üéØ TurnService: –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                    await this.move(autoMoveValue, { requireMyTurn: true });
                } catch (moveError) {
                    console.error('‚ö†Ô∏è TurnService: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', moveError);
                }
            }

            return payload;
        } catch (error) {
            // –≠–º–∏—Ç –æ—à–∏–±–∫–∏
            this.emit('roll:error', error);
            console.error('‚ùå TurnService: –û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞:', error);
            // –ú—è–≥–∫–æ –ø–æ–¥–∞–≤–ª—è–µ–º HTTP 400 (–Ω–µ –≤–∞—à —Ö–æ–¥/–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)
            const msg = String(error && (error.message || error))
                .toLowerCase();
            if (msg.includes('http 400') || msg.includes('not your turn')) {
                return { error: 'bad_request' };
            }
            throw error;
        } finally {
            this._isRolling = false;
            // –í—Å–µ–≥–¥–∞ —ç–º–∏—Ç–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            this.emit('roll:finish', { diceChoice, isReroll });
        }
    }
    
    /**
     * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
     * @param {number} steps - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (1-12)
     * @param {Object} options - –û–ø—Ü–∏–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
     * @param {Object} options.player - –ò–≥—Ä–æ–∫ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
     */
    async move(steps, options = {}) {
        const roomId = this.state.getRoomId();
        
        if (!roomId) {
            throw new Error('TurnService.move: roomId is missing');
        }

        if (this._isMoving) {
            console.warn('‚ö†Ô∏è TurnService: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
            throw new Error('Move already in progress');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        const permissionCheck = this.canPerformAction({
            player: options.player,
            requireMyTurn: true,
            requireMyToken: !!options.player
        });
        
        if (!permissionCheck.canPerform) {
            console.warn('‚ö†Ô∏è TurnService: –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:', permissionCheck.reason);
            throw new Error(permissionCheck.reason);
        }
        
        const targetSteps = Number.isFinite(Number(steps)) && Number(steps) > 0
            ? Number(steps)
            : this.lastRollValue;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è steps
        if (!Number.isFinite(targetSteps) || targetSteps <= 0) {
            throw new Error('TurnService.move: invalid steps value');
        }
        
        const stateSnapshot = this.getState();
        const playerContext = options.player || stateSnapshot?.activePlayer || null;
        const isInnerTrack = typeof options.isInner === 'boolean'
            ? options.isInner
            : (playerContext && typeof playerContext.isInner === 'boolean'
                ? Boolean(playerContext.isInner)
                : true);
        const trackId = isInnerTrack ? 'inner' : 'outer';

        try {
            this._isMoving = true;
            // –≠–º–∏—Ç –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            this.emit('move:start', { steps: targetSteps });
            
            // –í—ã–∑–æ–≤ API
            const response = await this.roomApi.move(roomId, targetSteps, {
                isInner: isInnerTrack,
                track: trackId
            });
            this._applyServerState(response?.state);
            
            // –≠–º–∏—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            this.emit('move:success', response);
            console.log('‚úÖ move:success', { roomId, steps: targetSteps, server: true, moveResult: response.moveResult });
            console.log(`üéÆ TurnService: –ò–≥—Ä–æ–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ ${targetSteps} —à–∞–≥–æ–≤`);
            this.lastRollValue = null;
            return response;
            
        } catch (error) {
            // –≠–º–∏—Ç –æ—à–∏–±–∫–∏
            this.emit('move:error', error);
            console.error('‚ùå move:error', { roomId, steps: targetSteps, error });
            console.error('‚ùå TurnService: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:', error);
            throw error;
        } finally {
            this._isMoving = false;
            // –í—Å–µ–≥–¥–∞ —ç–º–∏—Ç–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            this.emit('move:finish', { steps: targetSteps });
        }
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
     */
    async endTurn() {
        const roomId = this.state.getRoomId();
        
        if (!roomId) {
            throw new Error('TurnService.endTurn: roomId is missing');
        }

        if (this._isEnding) {
            console.warn('‚ö†Ô∏è TurnService: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
            throw new Error('End turn already in progress');
        }

        const permissionCheck = this.canPerformAction({ requireMyTurn: true });
        if (!permissionCheck.canPerform) {
            console.warn('‚ö†Ô∏è TurnService: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ', permissionCheck.reason);
            throw new Error(permissionCheck.reason || 'Not your turn');
        }

        if (!this.canEndTurn()) {
            throw new Error('TurnService.endTurn: cannot end turn right now');
        }
        
        try {
            this._isEnding = true;
            // –≠–º–∏—Ç –Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
            this.emit('end:start');
            
            // –í—ã–∑–æ–≤ API
            const response = await this.roomApi.endTurn(roomId);
            this._applyServerState(response?.state);
            
            // –≠–º–∏—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            this.emit('end:success', response);
            
            console.log('‚úÖ end:success', { roomId, activePlayer: response?.state?.activePlayer });
            console.log('üéÆ TurnService: –•–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            this.lastRollValue = null;
            return response;
            
        } catch (error) {
            // –≠–º–∏—Ç –æ—à–∏–±–∫–∏
            this.emit('end:error', error);
            console.error('‚ùå end:error', { roomId, error });
            console.error('‚ùå TurnService: –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞:', error);
            throw error;
        } finally {
            this._isEnding = false;
            // –í—Å–µ–≥–¥–∞ —ç–º–∏—Ç–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            this.emit('end:finish');
        }
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏—è
     * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param {Function} handler - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
     */
    on(event, handler) {
        if (typeof handler !== 'function') {
            return;
        }
        
        if (!this.listeners.has(event)) {
            this.listeners.set(event, new Set());
        }
        
        const wrappedHandler = (customEvent) => {
            try {
                handler(customEvent?.detail);
            } catch (error) {
                console.error(`‚ùå TurnService: –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è ${event}:`, error);
            }
        };
        
        this.listeners.get(event).add({ original: handler, wrapped: wrappedHandler });
        this.addEventListener(event, wrappedHandler);
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏—è
     * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param {Function} handler - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
     */
    off(event, handler) {
        const handlers = this.listeners.get(event);
        if (!handlers || !handlers.size) {
            return;
        }
        
        for (const entry of handlers) {
            if (entry.original === handler) {
                this.removeEventListener(event, entry.wrapped);
                handlers.delete(entry);
                break;
            }
        }
        
        if (handlers.size === 0) {
            this.listeners.delete(event);
        }
    }
    
    /**
     * –≠–º–∏—Ç —Å–æ–±—ã—Ç–∏—è
     * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param {*} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    emit(event, data) {
        const customEvent = new CustomEvent(event, { detail: data });
        this.dispatchEvent(customEvent);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Object} –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     */
    getState() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º GameStateManager –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (this.gameStateManager) {
            return this.gameStateManager.getState();
        }
        // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π state
        return this.state ? this.state.getState() : null;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
     * @returns {boolean} –ú–æ–∂–Ω–æ –ª–∏ –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
     */
    canRoll() {
        try {
            const state = this.getState();
            
            // –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –µ—Å–ª–∏ —ç—Ç–æ –º–æ–π —Ö–æ–¥ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –±—Ä–æ—Å–æ–∫
            const isMyTurn = this.isMyTurn();
            if (isMyTurn) {
                console.log('üé≤ TurnService.canRoll -> true (–º–æ–π —Ö–æ–¥)');
                return true;
            }
            
            // –ï—Å–ª–∏ –Ω–µ –º–æ–π —Ö–æ–¥, –ø—Ä–æ–≤–µ—Ä—è–µ–º state.canRoll
            const can = state && state.canRoll === true;
            console.log('üé≤ TurnService.canRoll ->', can, { isMyTurn, stateCanRoll: state?.canRoll });
            return can;
        } catch (e) {
            console.warn('‚ö†Ô∏è TurnService.canRoll: no state yet, —Ä–∞–∑—Ä–µ—à–∞–µ–º –±—Ä–æ—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            return true; // –ø–æ–∑–≤–æ–ª—è–µ–º –±—Ä–æ—Å–æ–∫, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
     * @returns {boolean} –ú–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è
     */
    canMove() {
        const state = this.getState();
        return state && state.canMove === true;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
     * @returns {boolean} –ú–æ–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥
     */
    canEndTurn() {
        const state = this.getState();
        return state && state.canEndTurn === true;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º (–µ–≥–æ —Ö–æ–¥)
     * @returns {boolean} –ú–æ–π –ª–∏ —ç—Ç–æ —Ö–æ–¥
     */
    isMyTurn() {
        try {
            const state = this.getState();
            if (!state || !state.activePlayer) {
                console.warn('‚ö†Ô∏è TurnService.isMyTurn: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞');
                return false;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const currentUserId = this._getCurrentUserId();
            const currentUsername = this._getCurrentUsername();
            
            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∞–∫—Ç–∏–≤–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º
            const activePlayer = state.activePlayer;
            const isMyTurn = 
                activePlayer.id === currentUserId ||
                activePlayer.userId === currentUserId ||
                (activePlayer.username && currentUsername && activePlayer.username === currentUsername);
            
            // –£–±–∏—Ä–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
            if (this._lastIsMyTurnLog !== isMyTurn) {
                console.log('üéØ TurnService.isMyTurn:', isMyTurn, { 
                    activePlayer: activePlayer.username || activePlayer.id, 
                    currentUser: currentUsername || currentUserId 
                });
                this._lastIsMyTurnLog = isMyTurn;
            }
            
            return isMyTurn;
        } catch (error) {
            console.error('‚ùå TurnService.isMyTurn: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–æ–¥–∞:', error);
            return false;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     * @param {Object} player - –ò–≥—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {boolean} –ú–æ–π –ª–∏ —ç—Ç–æ –∏–≥—Ä–æ–∫
     */
    isMyToken(player) {
        try {
            if (!player) {
                console.warn('‚ö†Ô∏è TurnService.isMyToken: –ò–≥—Ä–æ–∫ –Ω–µ —É–∫–∞–∑–∞–Ω');
                return false;
            }
            
            const currentUserId = this._getCurrentUserId();
            const currentUsername = this._getCurrentUsername();
            
            const isMyToken = 
                player.id === currentUserId ||
                player.userId === currentUserId ||
                (player.username && currentUsername && player.username === currentUsername);
            
            console.log('üéØ TurnService.isMyToken:', isMyToken, { 
                player: player.username || player.id, 
                currentUser: currentUsername || currentUserId 
            });
            
            return isMyToken;
        } catch (error) {
            console.error('‚ùå TurnService.isMyToken: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
            return false;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
     * @param {Object} options - –û–ø—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @param {Object} options.player - –ò–≥—Ä–æ–∫ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞)
     * @param {boolean} options.requireMyTurn - –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–π —Ö–æ–¥
     * @param {boolean} options.requireMyToken - –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–π —Ç–æ–∫–µ–Ω
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    canPerformAction(options = {}) {
        const { player = null, requireMyTurn = true, requireMyToken = false } = options;
        
        const result = {
            canPerform: true,
            reason: null,
            checks: {
                myTurn: true,
                myToken: true
            }
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–æ–¥
        if (requireMyTurn) {
            result.checks.myTurn = this.isMyTurn();
            if (!result.checks.myTurn) {
                result.canPerform = false;
                result.reason = 'Not your turn';
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        if (requireMyToken && player) {
            result.checks.myToken = this.isMyToken(player);
            if (!result.checks.myToken) {
                result.canPerform = false;
                result.reason = 'Not your token';
            }
        }
        
        console.log('üîç TurnService.canPerformAction:', result);
        return result;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {string|null} ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @private
     */
    _getCurrentUserId() {
        try {
            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
            if (this._cachedUserId) {
                return this._cachedUserId;
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ sessionStorage
            const bundleRaw = sessionStorage.getItem('am_player_bundle');
            if (bundleRaw) {
                const bundle = JSON.parse(bundleRaw);
                const userId = bundle?.currentUser?.id || bundle?.currentUser?.userId;
                if (userId) {
                    this._cachedUserId = userId;
                    console.log('üîç TurnService: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ bundle:', userId);
                    return userId;
                }
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ localStorage
            const userRaw = localStorage.getItem('aura_money_user');
            if (userRaw) {
                const user = JSON.parse(userRaw);
                const userId = user?.id || user?.userId;
                if (userId) {
                    this._cachedUserId = userId;
                    console.log('üîç TurnService: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage:', userId);
                    return userId;
                }
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ app
            if (window.app && window.app.getModule) {
                const userModel = window.app.getModule('userModel');
                if (userModel && userModel.getCurrentUser) {
                    const currentUser = userModel.getCurrentUser();
                    if (currentUser && (currentUser.id || currentUser.userId)) {
                        const userId = currentUser.id || currentUser.userId;
                        this._cachedUserId = userId;
                        console.log('üîç TurnService: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ userModel:', userId);
                        return userId;
                    }
                }
            }
            
            console.warn('‚ö†Ô∏è TurnService: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return null;
        } catch (error) {
            console.error('‚ùå TurnService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return null;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ username —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {string|null} Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @private
     */
    _getCurrentUsername() {
        try {
            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
            if (this._cachedUsername) {
                return this._cachedUsername;
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ sessionStorage
            const bundleRaw = sessionStorage.getItem('am_player_bundle');
            if (bundleRaw) {
                const bundle = JSON.parse(bundleRaw);
                const username = bundle?.currentUser?.username || bundle?.currentUser?.name;
                if (username) {
                    this._cachedUsername = username;
                    console.log('üîç TurnService: Username –∏–∑ bundle:', username);
                    return username;
                }
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ localStorage
            const userRaw = localStorage.getItem('aura_money_user');
            if (userRaw) {
                const user = JSON.parse(userRaw);
                const username = user?.username || user?.name;
                if (username) {
                    this._cachedUsername = username;
                    console.log('üîç TurnService: Username –∏–∑ localStorage:', username);
                    return username;
                }
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ app
            if (window.app && window.app.getModule) {
                const userModel = window.app.getModule('userModel');
                if (userModel && userModel.getCurrentUser) {
                    const currentUser = userModel.getCurrentUser();
                    if (currentUser && (currentUser.username || currentUser.name)) {
                        const username = currentUser.username || currentUser.name;
                        this._cachedUsername = username;
                        console.log('üîç TurnService: Username –∏–∑ userModel:', username);
                        return username;
                    }
                }
            }
            
            console.warn('‚ö†Ô∏è TurnService: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return null;
        } catch (error) {
            console.error('‚ùå TurnService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return null;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     * @returns {Object} –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
     */
    getActivePlayer() {
        const state = this.getState();
        return state && state.activePlayer;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—Ä–æ—Å–∫–∞
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
     */
    getLastDiceResult() {
        const state = this.getState();
        return state && state.lastDiceResult;
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
     */
    destroy() {
        for (const [event, handlers] of this.listeners.entries()) {
            handlers.forEach(({ wrapped }) => {
                this.removeEventListener(event, wrapped);
            });
        }
        this.listeners.clear();
        console.log('üéÆ TurnService: –£–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
     * @param {Object} serverState
     * @private
     */
    _applyServerState(serverState) {
        if (!serverState) return;
        if (this.state && typeof this.state.applyState === 'function') {
            this.state.applyState(serverState);
        }
        if (this.gameStateManager && typeof this.gameStateManager.updateFromServer === 'function') {
            this.gameStateManager.updateFromServer(serverState);
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.TurnService = TurnService;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = TurnService;
}
