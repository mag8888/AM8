/**
 * TurnService v1.0.0
 * –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ–¥–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑—É–µ—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Ö–æ–¥–∞ (–±—Ä–æ—Å–æ–∫, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ) –∏ —ç–º–∏—Ç–∏—Ç —Å–æ–±—ã—Ç–∏—è
 */

class TurnService extends EventTarget {
    constructor({ state, roomApi, diceService, movementService }) {
        super();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if (!state) {
            throw new Error('TurnService: state instance is required');
        }
        if (!roomApi) {
            throw new Error('TurnService: RoomApi instance is required');
        }
        
        this.state = state;
        this.roomApi = roomApi;
        this.diceService = diceService;
        this.movementService = movementService;
        this.listeners = new Map();
        
        console.log('üéÆ TurnService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ —Å —Å–æ–±—ã—Ç–∏—è–º–∏
     * @param {Object} options - –û–ø—Ü–∏–∏ –±—Ä–æ—Å–∫–∞
     * @param {string} options.diceChoice - 'single' –∏–ª–∏ 'double'
     * @param {boolean} options.isReroll - –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –±—Ä–æ—Å–æ–∫ (default: false)
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
     */
    async roll(options = {}) {
        const { diceChoice = 'single', isReroll = false } = options;
        const roomId = this.state.getRoomId();
        
        if (!roomId) {
            throw new Error('TurnService.roll: roomId is missing');
        }
        
        try {
            // –≠–º–∏—Ç –Ω–∞—á–∞–ª–∞ –±—Ä–æ—Å–∫–∞
            this.emit('roll:start', { diceChoice, isReroll });
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º DiceService –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±—Ä–æ—Å–∫–∞
            if (this.diceService) {
                const rollOptions = {
                    forceSingle: diceChoice === 'single',
                    forceDouble: diceChoice === 'double'
                };
                
                const rollResult = this.diceService.roll(rollOptions);
                
                // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
                const response = await this.roomApi.rollDice(roomId, diceChoice, isReroll);
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                if (response.state && this.state.applyState) {
                    this.state.applyState(response.state);
                }
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º MovementService –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è —Ñ–∏—à–∫–∏
                if (this.movementService && rollResult.total > 0) {
                    const activePlayer = this.state.getActivePlayer();
                    if (activePlayer) {
                        this.movementService.movePlayer(activePlayer.id, rollResult.total);
                    }
                }
                
                // –≠–º–∏—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                this.emit('roll:success', { ...response, localRoll: rollResult });
                
                console.log('üéÆ TurnService: –ö—É–±–∏–∫ –±—Ä–æ—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                return { ...response, localRoll: rollResult };
            } else {
                // Fallback –∫ API –±–µ–∑ DiceService
                const response = await this.roomApi.rollDice(roomId, diceChoice, isReroll);
                
                if (response.state && this.state.applyState) {
                    this.state.applyState(response.state);
                }
                
                this.emit('roll:success', response);
                
                console.log('üéÆ TurnService: –ö—É–±–∏–∫ –±—Ä–æ—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                return response;
            }
            
        } catch (error) {
            // –≠–º–∏—Ç –æ—à–∏–±–∫–∏
            this.emit('roll:error', error);
            console.error('‚ùå TurnService: –û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞:', error);
            throw error;
        } finally {
            // –í—Å–µ–≥–¥–∞ —ç–º–∏—Ç–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            this.emit('roll:finish', { diceChoice, isReroll });
        }
    }
    
    /**
     * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
     * @param {number} steps - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (1-12)
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
     */
    async move(steps) {
        const roomId = this.state.getRoomId();
        
        if (!roomId) {
            throw new Error('TurnService.move: roomId is missing');
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è steps
        if (!Number.isFinite(steps) || steps <= 0) {
            throw new Error('TurnService.move: invalid steps value');
        }
        
        try {
            // –≠–º–∏—Ç –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            this.emit('move:start', { steps });
            
            // –í—ã–∑–æ–≤ API
            const response = await this.roomApi.move(roomId, steps);
            
            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            if (response.state && this.state.applyState) {
                this.state.applyState(response.state);
            }
            
            // –≠–º–∏—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            this.emit('move:success', response);
            
            console.log(`üéÆ TurnService: –ò–≥—Ä–æ–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ ${steps} —à–∞–≥–æ–≤`);
            return response;
            
        } catch (error) {
            // –≠–º–∏—Ç –æ—à–∏–±–∫–∏
            this.emit('move:error', error);
            console.error('‚ùå TurnService: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:', error);
            throw error;
        } finally {
            // –í—Å–µ–≥–¥–∞ —ç–º–∏—Ç–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            this.emit('move:finish', { steps });
        }
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
     */
    async endTurn() {
        const roomId = this.state.getRoomId();
        
        if (!roomId) {
            throw new Error('TurnService.endTurn: roomId is missing');
        }
        
        try {
            // –≠–º–∏—Ç –Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
            this.emit('end:start');
            
            // –í—ã–∑–æ–≤ API
            const response = await this.roomApi.endTurn(roomId);
            
            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            if (response.state && this.state.applyState) {
                this.state.applyState(response.state);
            }
            
            // –≠–º–∏—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            this.emit('end:success', response);
            
            console.log('üéÆ TurnService: –•–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            return response;
            
        } catch (error) {
            // –≠–º–∏—Ç –æ—à–∏–±–∫–∏
            this.emit('end:error', error);
            console.error('‚ùå TurnService: –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞:', error);
            throw error;
        } finally {
            // –í—Å–µ–≥–¥–∞ —ç–º–∏—Ç–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            this.emit('end:finish');
        }
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏—è
     * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param {Function} handler - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
     */
    on(event, handler) {
        if (!this.listeners.has(event)) {
            this.listeners.set(event, new Set());
        }
        this.listeners.get(event).add(handler);
        
        // –¢–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π EventTarget
        this.addEventListener(event, handler);
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏—è
     * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param {Function} handler - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
     */
    off(event, handler) {
        if (this.listeners.has(event)) {
            this.listeners.get(event).delete(handler);
        }
        
        // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∏–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ EventTarget
        this.removeEventListener(event, handler);
    }
    
    /**
     * –≠–º–∏—Ç —Å–æ–±—ã—Ç–∏—è
     * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param {*} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    emit(event, data) {
        // –≠–º–∏—Ç —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π EventTarget
        const customEvent = new CustomEvent(event, { detail: data });
        this.dispatchEvent(customEvent);
        
        // –¢–∞–∫–∂–µ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if (this.listeners.has(event)) {
            this.listeners.get(event).forEach(handler => {
                try {
                    handler(data);
                } catch (error) {
                    console.error(`‚ùå TurnService: –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è ${event}:`, error);
                }
            });
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     * @returns {Object} –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
     */
    getState() {
        return this.state.getState();
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
     * @returns {boolean} –ú–æ–∂–Ω–æ –ª–∏ –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
     */
    canRoll() {
        try {
            const state = this.getState();
            const can = state && state.canRoll === true;
            console.log('üé≤ TurnService.canRoll ->', can, state);
            return can;
        } catch (e) {
            console.warn('‚ö†Ô∏è TurnService.canRoll: no state yet');
            return true; // –ø–æ–∑–≤–æ–ª—è–µ–º –±—Ä–æ—Å–æ–∫, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
     * @returns {boolean} –ú–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è
     */
    canMove() {
        const state = this.getState();
        return state && state.canMove === true;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
     * @returns {boolean} –ú–æ–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥
     */
    canEndTurn() {
        const state = this.getState();
        return state && state.canEndTurn === true;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     * @returns {Object} –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
     */
    getActivePlayer() {
        const state = this.getState();
        return state && state.activePlayer;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—Ä–æ—Å–∫–∞
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
     */
    getLastDiceResult() {
        const state = this.getState();
        return state && state.lastDiceResult;
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
     */
    destroy() {
        this.listeners.clear();
        console.log('üéÆ TurnService: –£–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.TurnService = TurnService;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = TurnService;
}
