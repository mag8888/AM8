/**
 * BankModule v1.0.0
 * –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
 * –í–∫–ª—é—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –∑–∞—Ä–ø–ª–∞—Ç—ã, –ø–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏ –∏ –∫—Ä–µ–¥–∏—Ç—ã
 */

class BankModule {
    constructor(config = {}) {
        this.gameState = config.gameState || null;
        this.eventBus = config.eventBus || null;
        this.roomApi = config.roomApi || null;
        this.professionSystem = config.professionSystem || null;
        this.gameStateManager = config.gameStateManager || null;
        this.currentUserId = null;
        this.currentRoomId = this._getCurrentRoomId();
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–Ω–∫–∞
        this.bankState = {
            balance: 0,
            income: 0,
            expenses: 0,
            salary: 0,
            credit: 0,
            maxCredit: 10000,
            transactions: []
        };
        
        // UI —ç–ª–µ–º–µ–Ω—Ç—ã
        this.ui = null;
        this.isOpen = false;
        
        // –ö—ç—à DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.domCache = {
            balanceElement: null,
            incomeElement: null,
            expensesElement: null,
            creditElement: null,
            transactionsList: null,
            newBadge: null
        };
        
        console.log('üè¶ BankModule: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    init() {
        this.initCurrentUser();
        this.createUI();
        this.setupEventListeners();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
     * @param {Object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     */
    updatePlayerBalance(player) {
        if (!player) return;
        
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞–Ω–∫–∞
            const balance = player.balance || player.money || player.cash || 0;
            this.bankState.balance = balance;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI, –µ—Å–ª–∏ –±–∞–Ω–∫ –æ—Ç–∫—Ä—ã—Ç
            if (this.isOpen && this.ui) {
                this.updateBalanceDisplay();
            }
            
            console.log('üí∞ BankModule: –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', balance);
        } catch (error) {
            console.warn('‚ö†Ô∏è BankModule: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ UI
     */
    updateBalanceDisplay() {
        if (!this.ui) return;
        
        const balanceElement = this.ui.querySelector('.bank-balance-amount');
        if (balanceElement) {
            balanceElement.textContent = `$${this.bankState.balance.toLocaleString()}`;
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    initCurrentUser() {
        try {
            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            let userData = localStorage.getItem('currentUser');
            if (!userData) {
                userData = localStorage.getItem('aura_money_user');
            }
            
            if (userData) {
                const user = JSON.parse(userData);
                this.currentUserId = user.id;
                console.log('üè¶ BankModule: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.username, user.id);
            } else {
                console.warn('‚ö†Ô∏è BankModule: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage');
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è BankModule: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ UI –±–∞–Ω–∫ –º–æ–¥—É–ª—è
     */
    createUI() {
        const bankModuleHTML = `
            <div id="bank-module" class="bank-module" style="display: none;">
                <div class="bank-overlay"></div>
                <div class="bank-container">
                    <div class="bank-header">
                        <div class="bank-title">
                            <span class="bank-icon">üè¶</span>
                            <span>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</span>
                        </div>
                        <button class="bank-close" id="bank-close">‚úï</button>
                    </div>
                    
                    <div class="bank-content">
                        <div class="bank-left">
                            <div class="bank-status">
                                <div class="bank-status-header">
                                    <span class="bank-icon">üè¶</span>
                                    <span>–ë–∞–Ω–∫</span>
                                    <span class="status-badge active">–ê–∫—Ç–∏–≤–µ–Ω</span>
                                </div>
                                
                                <div class="current-balance">
                                    <div class="balance-amount" id="bank-balance">$3 000</div>
                                    <div class="balance-description">–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π</div>
                                </div>
                                
                                <div class="financial-summary">
                                    <div class="summary-item">
                                        <span class="summary-icon income">üìà</span>
                                        <span class="summary-label">–î–æ—Ö–æ–¥:</span>
                                        <span class="summary-value income" id="bank-income">$10 000</span>
                                    </div>
                                    <div class="summary-item">
                                        <span class="summary-icon expense">üìâ</span>
                                        <span class="summary-label">–†–∞—Å—Ö–æ–¥—ã:</span>
                                        <span class="summary-value expense" id="bank-expenses">$6 200</span>
                                    </div>
                                    <div class="summary-item">
                                        <span class="summary-icon payday">üí∞</span>
                                        <span class="summary-label">PAYDAY:</span>
                                        <span class="summary-value payday" id="bank-salary">$10 000/–º–µ—Å</span>
                                    </div>
                                    <div class="summary-item">
                                        <span class="summary-icon net">üíé</span>
                                        <span class="summary-label">–ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥:</span>
                                        <span class="summary-value net" id="bank-net-income">$3 800/–º–µ—Å</span>
                                    </div>
                                </div>
                                
                                <div class="profession-details" id="profession-details">
                                    <div class="profession-header">
                                        <span class="profession-icon">üíº</span>
                                        <span class="profession-name">–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å</span>
                                        <span class="profession-title">–í–ª–∞–¥–µ–ª–µ—Ü –±–∏–∑–Ω–µ—Å–∞</span>
                                    </div>
                                    
                                    <div class="expenses-breakdown">
                                        <div class="expense-item">
                                            <span class="expense-label">–ù–∞–ª–æ–≥–∏ (13%):</span>
                                            <span class="expense-amount">$1 300</span>
                                            <span class="expense-status no-payoff">–ù–µ–ª—å–∑—è –ø–æ–≥–∞—Å–∏—Ç—å</span>
                                        </div>
                                        <div class="expense-item">
                                            <span class="expense-label">–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:</span>
                                            <span class="expense-amount">$1 500</span>
                                            <span class="expense-status no-payoff">–ù–µ–ª—å–∑—è –ø–æ–≥–∞—Å–∏—Ç—å</span>
                                        </div>
                                        <div class="expense-item">
                                            <span class="expense-label">–ö—Ä–µ–¥–∏—Ç –Ω–∞ –∞–≤—Ç–æ:</span>
                                            <span class="expense-amount">$700</span>
                                            <button class="payoff-btn" data-loan="carLoan">–ü–æ–≥–∞—Å–∏—Ç—å $14 000</button>
                                        </div>
                                        <div class="expense-item">
                                            <span class="expense-label">–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç:</span>
                                            <span class="expense-amount">$500</span>
                                            <button class="payoff-btn" data-loan="educationLoan">–ü–æ–≥–∞—Å–∏—Ç—å $10 000</button>
                                        </div>
                                        <div class="expense-item">
                                            <span class="expense-label">–ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã:</span>
                                            <span class="expense-amount">$1 000</span>
                                            <button class="payoff-btn" data-loan="creditCards">–ü–æ–≥–∞—Å–∏—Ç—å $20 000</button>
                                        </div>
                                        <div class="expense-item">
                                            <span class="expense-label">–ò–ø–æ—Ç–µ–∫–∞ —Å—Ç—É–¥–∏—è:</span>
                                            <span class="expense-amount">$1 200</span>
                                            <button class="payoff-btn" data-loan="mortgage">–ü–æ–≥–∞—Å–∏—Ç—å $48 000</button>
                                        </div>
                                        <div class="expense-item">
                                            <span class="expense-label">–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –¥–µ—Ç–µ–π:</span>
                                            <span class="expense-amount" id="children-expense">$0</span>
                                            <button class="add-child-btn" id="add-child">–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞</button>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="credit-info">
                                    <div class="credit-item">
                                        <span class="credit-icon">üí≥</span>
                                        <span class="credit-label">–ö—Ä–µ–¥–∏—Ç:</span>
                                        <span class="credit-value" id="bank-credit">$0</span>
                                    </div>
                                    <div class="credit-item">
                                        <span class="credit-label">–ú–∞–∫—Å. –∫—Ä–µ–¥–∏—Ç:</span>
                                        <span class="credit-value max" id="bank-max-credit">$10 000</span>
                                    </div>
                                    <div class="credit-actions"><!-- —Å–∫—Ä—ã—Ç–æ --></div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="bank-right">
                            <div class="transfer-section">
                                <div class="section-title">
                                    <span class="section-icon">üí∏</span>
                                    <span>–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</span>
                                </div>
                                
                                <div class="transfer-form">
                                    <div class="form-group">
                                        <label for="transfer-recipient">–ü–æ–ª—É—á–∞—Ç–µ–ª—å</label>
                                        <select id="transfer-recipient" class="form-select">
                                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞</option>
                                        </select>
                                    </div>
                                    
                                    <div class="form-group">
                                        <label for="transfer-amount">–°—É–º–º–∞ ($)</label>
                                        <div class="amount-input">
                                            <input type="number" id="transfer-amount" class="form-input" placeholder="0" min="1">
                                            <button class="amount-eye" id="amount-eye">üëÅ</button>
                                        </div>
                                    </div>
                                    
                                    <div class="transfer-actions">
                                        <button class="transfer-btn" id="transfer-execute">
                                            <span class="btn-icon">‚úà</span>
                                            <span>–í–´–ü–û–õ–ù–ò–¢–¨ –ü–ï–†–ï–í–û–î</span>
                                        </button>
                                        <button class="transfer-reset" id="transfer-reset">–°–ë–†–û–°–ò–¢–¨</button>
                                    </div>
                                    <div class="loan-inline" style="margin-top:12px;padding-top:8px;border-top:1px dashed rgba(255,255,255,0.1)">
                                        <label for="loan-amount">–ö—Ä–µ–¥–∏—Ç (—à–∞–≥ 1000)</label>
                                        <div style="display:flex;gap:8px;align-items:center;margin-top:6px">
                                            <input type="number" id="loan-amount" class="form-input" placeholder="0" min="0" step="1000">
                                            <button class="transfer-btn" id="loan-take" style="min-width:120px">–í–ó–Ø–¢–¨</button>
                                            <button class="transfer-reset" id="loan-repay" style="min-width:120px">–ü–û–ì–ê–°–ò–¢–¨</button>
                                        </div>
                                        <div style="margin-top:8px;opacity:.85;display:flex;gap:16px">
                                            <div>–ë–∞–ª–∞–Ω—Å: <span id="loan-balance">$0</span></div>
                                            <div>–ú–∞–∫—Å.: <span id="loan-max">$0</span></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="transactions-section">
                                <div class="section-title">
                                    <span class="section-icon">üïê</span>
                                    <span>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</span>
                                    <span class="new-badge" id="new-transactions">0</span>
                                </div>
                                
                                <div class="transactions-list" id="transactions-list">
                                    <div class="transaction-item">
                                        <div class="transaction-info">
                                            <div class="transaction-title">–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏</div>
                                            <div class="transaction-details">–ë–∞–Ω–∫ ‚Üí –ò–≥—Ä–æ–∫</div>
                                            <div class="transaction-time">08.09.2025, 08:59:18</div>
                                        </div>
                                        <div class="transaction-amount positive">+$3 000</div>
                                        <div class="transaction-status completed">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º HTML –≤ body
        document.body.insertAdjacentHTML('beforeend', bankModuleHTML);
        this.ui = document.getElementById('bank-module');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.initializeDOMCache();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        this.addStyles();
        
        console.log('üè¶ BankModule: UI —Å–æ–∑–¥–∞–Ω');
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CSS —Å—Ç–∏–ª–µ–π
     */
    addStyles() {
        const style = document.createElement('style');
        style.textContent = `
            .bank-module {
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                z-index: 10000;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            
            .bank-overlay {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.8);
                backdrop-filter: blur(5px);
            }
            
            .bank-container {
                position: relative;
                background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f0f23 100%);
                border-radius: 20px;
                border: 2px solid rgba(255, 255, 255, 0.1);
                box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
                width: 96%;
                max-width: 1400px;
                height: 92%;
                max-height: none;
                overflow: hidden;
                display: flex;
                flex-direction: column;
            }
            
            .bank-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 20px 30px;
                border-bottom: 1px solid rgba(255, 255, 255, 0.1);
                background: rgba(255, 255, 255, 0.05);
            }
            
            .bank-title {
                display: flex;
                align-items: center;
                gap: 12px;
                font-size: 1.5rem;
                font-weight: 600;
                color: white;
            }
            
            .bank-icon {
                font-size: 1.8rem;
            }
            
            .bank-close {
                background: none;
                border: none;
                color: white;
                font-size: 1.5rem;
                cursor: pointer;
                padding: 8px;
                border-radius: 50%;
                transition: all 0.3s ease;
            }
            
            .bank-close:hover {
                background: rgba(255, 255, 255, 0.1);
            }
            
            .bank-content {
                display: flex;
                flex: 1;
                overflow: hidden;
            }
            
            .bank-left {
                flex: 1;
                padding: 30px;
                border-right: 1px solid rgba(255, 255, 255, 0.1);
                overflow-y: auto;
            }
            
            .bank-right {
                flex: 1;
                padding: 30px;
                overflow-y: auto;
            }
            
            .bank-status {
                background: rgba(255, 255, 255, 0.05);
                border-radius: 15px;
                padding: 25px;
                border: 1px solid rgba(255, 255, 255, 0.1);
            }
            
            .bank-status-header {
                display: flex;
                align-items: center;
                gap: 12px;
                margin-bottom: 25px;
            }
            
            .status-badge {
                background: #10b981;
                color: white;
                padding: 6px 12px;
                border-radius: 20px;
                font-size: 0.8rem;
                font-weight: 600;
                margin-left: auto;
            }
            
            .current-balance {
                text-align: center;
                margin-bottom: 30px;
            }
            
            .balance-amount {
                font-size: 3rem;
                font-weight: 700;
                color: #10b981;
                margin-bottom: 8px;
            }
            
            .balance-description {
                color: rgba(255, 255, 255, 0.7);
                font-size: 1rem;
            }
            
            .financial-summary {
                margin-bottom: 30px;
            }
            
            .summary-item {
                display: flex;
                align-items: center;
                gap: 12px;
                margin-bottom: 15px;
            }
            
            .summary-icon {
                font-size: 1.2rem;
            }
            
            .summary-label {
                color: white;
                font-weight: 500;
                min-width: 80px;
            }
            
            .summary-value {
                font-weight: 600;
                margin-left: auto;
            }
            
            .summary-value.income {
                color: #10b981;
            }
            
            .summary-value.expense {
                color: #ef4444;
            }
            
            .summary-value.payday {
                color: #f59e0b;
            }
            
            .credit-info {
                border-top: 1px solid rgba(255, 255, 255, 0.1);
                padding-top: 20px;
            }
            
            .credit-item {
                display: flex;
                align-items: center;
                gap: 12px;
                margin-bottom: 15px;
            }
            
            .credit-icon {
                font-size: 1.2rem;
            }
            
            .credit-label {
                color: white;
                font-weight: 500;
                min-width: 100px;
            }
            
            .credit-value {
                font-weight: 600;
                margin-left: auto;
            }
            
            .credit-value.max {
                color: #8b5cf6;
            }
            
            .credit-actions {
                display: flex;
                gap: 12px;
                margin-top: 20px;
            }
            
            .credit-status-btn {
                background: #10b981;
                color: white;
                border: none;
                padding: 10px 16px;
                border-radius: 8px;
                font-weight: 600;
                cursor: pointer;
                flex: 1;
            }
            
            .credit-take-btn {
                background: linear-gradient(135deg, #ef4444, #dc2626);
                color: white;
                border: none;
                padding: 10px 16px;
                border-radius: 8px;
                font-weight: 600;
                cursor: pointer;
                flex: 1;
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 8px;
            }
            
            .transfer-section, .transactions-section {
                background: rgba(255, 255, 255, 0.05);
                border-radius: 15px;
                padding: 25px;
                border: 1px solid rgba(255, 255, 255, 0.1);
                margin-bottom: 20px;
            }
            
            .section-title {
                display: flex;
                align-items: center;
                gap: 12px;
                margin-bottom: 20px;
                font-size: 1.2rem;
                font-weight: 600;
                color: white;
            }
            
            .section-icon {
                font-size: 1.4rem;
            }
            
            .new-badge {
                background: #8b5cf6;
                color: white;
                padding: 4px 8px;
                border-radius: 12px;
                font-size: 0.8rem;
                font-weight: 600;
                margin-left: auto;
            }
            
            .form-group {
                margin-bottom: 20px;
            }
            
            .form-group label {
                display: block;
                color: white;
                font-weight: 500;
                margin-bottom: 8px;
            }
            
            .form-select, .form-input {
                width: 100%;
                padding: 12px 16px;
                background: rgba(255, 255, 255, 0.1);
                border: 1px solid rgba(255, 255, 255, 0.2);
                border-radius: 8px;
                color: white;
                font-size: 1rem;
            }
            
            .form-select:focus, .form-input:focus {
                outline: none;
                border-color: #10b981;
                box-shadow: 0 0 0 2px rgba(16, 185, 129, 0.2);
            }
            
            .amount-input {
                position: relative;
            }
            
            .amount-eye {
                position: absolute;
                right: 12px;
                top: 50%;
                transform: translateY(-50%);
                background: none;
                border: none;
                color: white;
                cursor: pointer;
                font-size: 1.2rem;
            }
            
            .transfer-actions {
                display: flex;
                gap: 12px;
            }
            
            .transfer-btn {
                background: linear-gradient(135deg, #3b82f6, #1d4ed8);
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 8px;
                font-weight: 600;
                cursor: pointer;
                flex: 1;
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 8px;
            }
            
            .transfer-reset {
                background: rgba(255, 255, 255, 0.1);
                color: white;
                border: 1px solid rgba(255, 255, 255, 0.2);
                padding: 12px 20px;
                border-radius: 8px;
                font-weight: 600;
                cursor: pointer;
            }
            .loan-inline input.form-input { max-width: 160px; }
            
            .transactions-list {
                max-height: 300px;
                overflow-y: auto;
            }
            
            .transaction-item {
                display: flex;
                align-items: center;
                gap: 15px;
                padding: 15px;
                background: rgba(255, 255, 255, 0.05);
                border-radius: 10px;
                margin-bottom: 10px;
                border: 1px solid rgba(255, 255, 255, 0.1);
            }
            
            .transaction-info {
                flex: 1;
            }
            
            .transaction-title {
                color: white;
                font-weight: 600;
                margin-bottom: 4px;
            }
            
            .transaction-details {
                color: rgba(255, 255, 255, 0.7);
                font-size: 0.9rem;
                margin-bottom: 2px;
            }
            
            .transaction-time {
                color: rgba(255, 255, 255, 0.5);
                font-size: 0.8rem;
            }
            
            .transaction-amount {
                font-weight: 700;
                font-size: 1.1rem;
            }
            
            .transaction-amount.positive {
                color: #10b981;
            }
            
            .transaction-amount.negative {
                color: #ef4444;
            }
            
            .transaction-status {
                padding: 4px 8px;
                border-radius: 12px;
                font-size: 0.8rem;
                font-weight: 600;
            }
            
            .transaction-status.completed {
                background: #10b981;
                color: white;
            }
            
            .transaction-status.pending {
                background: #f59e0b;
                color: white;
            }
            
            .transaction-status.failed {
                background: #ef4444;
                color: white;
            }
            
            .profession-details {
                margin-top: 25px;
                padding-top: 20px;
                border-top: 1px solid rgba(255, 255, 255, 0.1);
            }
            
            .profession-header {
                display: flex;
                align-items: center;
                gap: 12px;
                margin-bottom: 20px;
            }
            
            .profession-icon {
                font-size: 1.4rem;
            }
            
            .profession-name {
                color: white;
                font-weight: 600;
                font-size: 1.1rem;
            }
            
            .profession-title {
                color: rgba(255, 255, 255, 0.7);
                font-size: 0.9rem;
                margin-left: auto;
            }
            
            .expenses-breakdown {
                display: flex;
                flex-direction: column;
                gap: 12px;
            }
            
            .expense-item {
                display: flex;
                align-items: center;
                gap: 12px;
                padding: 12px;
                background: rgba(255, 255, 255, 0.05);
                border-radius: 8px;
                border: 1px solid rgba(255, 255, 255, 0.1);
            }
            
            .expense-label {
                color: white;
                font-weight: 500;
                min-width: 140px;
                font-size: 0.9rem;
            }
            
            .expense-amount {
                color: #ef4444;
                font-weight: 600;
                min-width: 80px;
                text-align: right;
            }
            
            .expense-status {
                padding: 4px 8px;
                border-radius: 12px;
                font-size: 0.8rem;
                font-weight: 600;
                margin-left: auto;
            }
            
            .expense-status.no-payoff {
                background: rgba(107, 114, 128, 0.3);
                color: #9ca3af;
            }
            
            .payoff-btn {
                background: linear-gradient(135deg, #10b981, #059669);
                color: white;
                border: none;
                padding: 6px 12px;
                border-radius: 6px;
                font-size: 0.8rem;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s ease;
                margin-left: auto;
            }
            
            .payoff-btn:hover {
                background: linear-gradient(135deg, #059669, #047857);
                transform: translateY(-1px);
            }
            
            .payoff-btn:disabled {
                background: rgba(107, 114, 128, 0.3);
                color: #9ca3af;
                cursor: not-allowed;
                transform: none;
            }
            
            .add-child-btn {
                background: linear-gradient(135deg, #8b5cf6, #7c3aed);
                color: white;
                border: none;
                padding: 6px 12px;
                border-radius: 6px;
                font-size: 0.8rem;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s ease;
                margin-left: auto;
            }
            
            .add-child-btn:hover {
                background: linear-gradient(135deg, #7c3aed, #6d28d9);
                transform: translateY(-1px);
            }
            
            .add-child-btn:disabled {
                background: rgba(107, 114, 128, 0.3);
                color: #9ca3af;
                cursor: not-allowed;
                transform: none;
            }
            
            .summary-value.net {
                color: #10b981;
            }
            
            /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
            @media (max-width: 768px) {
                .bank-container {
                    width: 95%;
                    height: 90%;
                }
                
                .bank-content {
                    flex-direction: column;
                }
                
                .bank-left, .bank-right {
                    flex: none;
                    border-right: none;
                    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
                }
                
                .balance-amount {
                    font-size: 2.5rem;
                }
            }
        `;
        
        document.head.appendChild(style);
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    initializeDOMCache() {
        if (!this.ui) return;
        
        // –ö—ç—à–∏—Ä—É–µ–º —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.domCache.balanceElement = this.ui.querySelector('#bank-balance');
        this.domCache.incomeElement = this.ui.querySelector('#bank-income');
        this.domCache.expensesElement = this.ui.querySelector('#bank-expenses');
        this.domCache.creditElement = this.ui.querySelector('#bank-credit');
        this.domCache.transactionsList = this.ui.querySelector('#transactions-list');
        this.domCache.newBadge = this.ui.querySelector('#new-transactions');
        
        console.log('üè¶ BankModule: DOM –∫—ç—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–∞–Ω–∫–∞
        if (this.eventBus) {
            this.eventBus.on('game:playersUpdated', () => {
                if (this.isOpen) {
                    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
                    this.updateBankData();
                }
            });
            
            this.eventBus.on('bank:balanceUpdated', () => {
                if (this.isOpen) {
                    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
                    this.updateBankData();
                }
            });
        }
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥—É–ª—è
        const closeBtn = this.ui.querySelector('#bank-close');
        closeBtn.addEventListener('click', async () => await this.close());
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
        const overlay = this.ui.querySelector('.bank-overlay');
        overlay.addEventListener('click', async () => await this.close());
        
        // –ü–µ—Ä–µ–≤–æ–¥—ã
        const transferExecute = this.ui.querySelector('#transfer-execute');
        transferExecute.addEventListener('click', async () => await this.executeTransfer());
        
        const transferReset = this.ui.querySelector('#transfer-reset');
        transferReset.addEventListener('click', () => this.resetTransferForm());
        
        // –ö—Ä–µ–¥–∏—Ç—ã
        const creditTake = this.ui.querySelector('#credit-take');
        if (creditTake) creditTake.addEventListener('click', () => this.takeCredit());
        const loanTake = this.ui.querySelector('#loan-take');
        const loanRepay = this.ui.querySelector('#loan-repay');
        if (loanTake) loanTake.addEventListener('click', async () => await this.takeCreditInline());
        if (loanRepay) loanRepay.addEventListener('click', async () => await this.repayCreditInline());
        
        // –ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤
        const payoffButtons = this.ui.querySelectorAll('.payoff-btn');
        payoffButtons.forEach(btn => {
            btn.addEventListener('click', async (e) => {
                const loanType = e.target.dataset.loan;
                await this.payOffLoan(loanType);
            });
        });
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞
        const addChildBtn = this.ui.querySelector('#add-child');
        if (addChildBtn) {
            addChildBtn.addEventListener('click', async () => await this.addChild());
        }
        
        console.log('üè¶ BankModule: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    async takeCreditInline() {
        let amount = Math.max(0, Math.floor((parseInt(this.ui.querySelector('#loan-amount').value)||0)/1000)*1000);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å fallback –ª–æ–≥–∏–∫–æ–π
        let player = await this.getCurrentUserPlayer();
        if (!player) {
            player = await this.getCurrentUserPlayerWithFallback();
        }
        
        if (!player) {
            this.showNotification('–û—à–∏–±–∫–∞: –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }
        
        const profId = player?.profession || 'entrepreneur';
        const ps = this.professionSystem;
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ (maxLoan - currentLoan)
        const details = ps?.getProfessionDetails?.(profId, {
            money: player.balance || player.money || 0,
            children: player.children || 0,
            paidOffLoans: player.paidOffLoans || {},
            extraIncome: player.extraIncome || 0,
            currentLoan: player.currentLoan || 0,
            otherMonthlyAdjustments: player.otherMonthlyAdjustments || 0
        });
        
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç = –ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ * 10
        const netIncome = details?.netIncome?.netIncome || 0;
        const maxLoan = netIncome * 10;
        const currentLoan = player.currentLoan || 0;
        const available = Math.max(0, maxLoan - currentLoan);
        
        if (available <= 0) {
            this.showNotification(`–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ú–∞–∫—Å–∏–º—É–º: $${this.formatNumber(maxLoan)}`, 'error');
            return;
        }
        
        amount = Math.min(amount, available);
        
        // –û–±–Ω–æ–≤–∏–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        const input = this.ui.querySelector('#loan-amount');
        if (input) input.value = String(amount);
        
        if (amount <= 0) {
            this.showNotification('–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0', 'error');
            return;
        }
        
        // –°–µ—Ä–≤–µ—Ä–Ω—ã–π –≤—ã–∑–æ–≤
        const roomId = this.getRoomId?.() || this._getCurrentRoomId?.();
        let res = null;
        
        try {
            const response = await fetch('/api/bank/loan/take', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ roomId, playerId: player.id, amount })
            });
            res = await response.json();
        } catch (e) { 
            console.error('‚ùå BankModule: –û—à–∏–±–∫–∞ API –∫—Ä–µ–¥–∏—Ç–∞:', e);
            res = null; 
        }
        
        if (res?.success) {
            // –ë–µ—Ä–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            Object.assign(player, res.data.player);
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è –±–∞–ª–∞–Ω—Å–∞
            player.balance = player.money;
            
            this.addTransaction('–ö—Ä–µ–¥–∏—Ç', `–í–∑—è—Ç –∫—Ä–µ–¥–∏—Ç $${this.formatNumber(amount)}`, amount, 'completed');
            
            // –£–≤–µ–¥–æ–º–∏–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
            this.eventBus?.emit('bank:balanceUpdated', { userId: player.id, delta: amount });
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤ GameState –∏ —Ä–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            try {
                if (this.gameState && typeof this.gameState.updatePlayer === 'function') {
                    this.gameState.updatePlayer(player.id, player);
                }
                if (this.eventBus) {
                    this.eventBus.emit('game:playersUpdated', { players: this.gameState.getPlayers?.() || [] });
                }
            } catch (e) {
                console.warn('‚ö†Ô∏è BankModule: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ GameState:', e);
            }
            
            this.updateBankData();
            this.showNotification(`–ö—Ä–µ–¥–∏—Ç $${this.formatNumber(amount)} –≤–∑—è—Ç —É—Å–ø–µ—à–Ω–æ`, 'success');
            
            const input = this.ui.querySelector('#loan-amount');
            if (input) input.value = '';
        } else {
            this.showNotification(res?.message || '–û—à–∏–±–∫–∞ –≤–∑—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–∞', 'error');
        }
    }

    async repayCreditInline() {
        const amount = Math.max(0, Math.floor((parseInt(this.ui.querySelector('#loan-amount').value)||0)/1000)*1000);
        if (amount <= 0) {
            this.showNotification('–°—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0', 'error');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å fallback –ª–æ–≥–∏–∫–æ–π
        let player = await this.getCurrentUserPlayer();
        if (!player) {
            player = await this.getCurrentUserPlayerWithFallback();
        }
        
        if (!player) {
            this.showNotification('–û—à–∏–±–∫–∞: –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è
        const currentBalance = player.balance || player.money || 0;
        if (currentBalance < amount) {
            this.showNotification(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è. –î–æ—Å—Ç—É–ø–Ω–æ: $${this.formatNumber(currentBalance)}`, 'error');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—Ä–µ–¥–∏—Ç –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è
        const currentLoan = player.currentLoan || 0;
        if (currentLoan <= 0) {
            this.showNotification('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è', 'error');
            return;
        }
        
        const actualAmount = Math.min(amount, currentLoan);
        
        // –°–µ—Ä–≤–µ—Ä–Ω—ã–π –≤—ã–∑–æ–≤
        const roomId = this.getRoomId?.() || this._getCurrentRoomId?.();
        let res = null;
        
        try {
            const response = await fetch('/api/bank/loan/repay', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ roomId, playerId: player.id, amount: actualAmount })
            });
            res = await response.json();
        } catch (e) { 
            console.error('‚ùå BankModule: –û—à–∏–±–∫–∞ API –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞:', e);
            res = null; 
        }
        
        if (res?.success) {
            Object.assign(player, res.data.player);
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è –±–∞–ª–∞–Ω—Å–∞
            player.balance = player.money;
            
            this.addTransaction('–ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞', `–ü–æ–≥–∞—à–µ–Ω–æ $${this.formatNumber(actualAmount)}`, -actualAmount, 'completed');
            this.eventBus?.emit('bank:balanceUpdated', { userId: player.id, delta: -actualAmount });
            
            try {
                if (this.gameState && typeof this.gameState.updatePlayer === 'function') {
                    this.gameState.updatePlayer(player.id, player);
                }
                if (this.eventBus) {
                    this.eventBus.emit('game:playersUpdated', { players: this.gameState.getPlayers?.() || [] });
                }
            } catch (e) {
                console.warn('‚ö†Ô∏è BankModule: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ GameState:', e);
            }
            
            this.updateBankData();
            this.showNotification(`–ö—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω –Ω–∞ $${this.formatNumber(actualAmount)}`, 'success');
            
            const input = this.ui.querySelector('#loan-amount');
            if (input) input.value = '';
        } else {
            this.showNotification(res?.message || '–û—à–∏–±–∫–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞', 'error');
        }
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–Ω–∫ –º–æ–¥—É–ª—è
     */
    async open() {
        if (this.ui) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
            let currentPlayer = await this.getCurrentUserPlayer();
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å currentUserId
            if (!currentPlayer) {
                console.log('üîß BankModule: getCurrentUserPlayer –≤–µ—Ä–Ω—É–ª null, –ø—Ä–æ–±—É–µ–º fallback...');
                
                const gameStateManager = window.app?.services?.get('gameStateManager');
                const state = gameStateManager?.getState();
                const players = state?.players || [];
                
                console.log('üîß BankModule: –ò–≥—Ä–æ–∫–∏ –≤ –∏–≥—Ä–µ:', players.map(p => ({ id: p.id, username: p.username })));
                
                // –ò—â–µ–º –ø–æ username –∏–∑ localStorage
                try {
                    const userData = localStorage.getItem('currentUser');
                    if (userData) {
                        const user = JSON.parse(userData);
                        console.log('üîß BankModule: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ localStorage:', user);
                        
                        const player = players.find(p => p.username === user.username);
                        if (player) {
                            console.log('üîß BankModule: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º currentUserId —Å', this.currentUserId, '–Ω–∞', player.id);
                            this.currentUserId = player.id;
                            currentPlayer = player;
                            console.log('‚úÖ BankModule: currentPlayer –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ fallback:', currentPlayer.username);
                        } else {
                            console.warn('‚ö†Ô∏è BankModule: –ò–≥—Ä–æ–∫ —Å username', user.username, '–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤');
                        }
                    } else {
                        console.warn('‚ö†Ô∏è BankModule: currentUser –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage');
                    }
                } catch (e) {
                    console.warn('‚ö†Ô∏è BankModule: –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è currentUserId:', e);
                }
            }
            
            // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            if (!currentPlayer) {
                const gameStateManager = window.app?.services?.get('gameStateManager');
                const state = gameStateManager?.getState();
                const players = state?.players || [];
                
                if (players.length > 0) {
                    currentPlayer = players[0];
                    console.log('üîß BankModule: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ fallback:', currentPlayer.username);
                    this.currentUserId = currentPlayer.id;
                }
            }
            
            if (!currentPlayer) {
                console.warn('‚ö†Ô∏è BankModule: –ù–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã—Ç—å –±–∞–Ω–∫ - —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            this.ui.style.display = 'flex';
            this.isOpen = true;
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
            console.log('üîÑ BankModule: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –±–∞–Ω–∫–∞...');
            await this.updateBankData();
            await this.loadPlayers();
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ä–∞–∑—É
            this.forceUpdateBankUI(currentPlayer);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å requestAnimationFrame –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            requestAnimationFrame(async () => {
                if (this.isOpen) {
                    console.log('üîÑ BankModule: –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
                    await this.updateBankData();
                    this.forceUpdateBankUI(currentPlayer);
                    console.log('‚úÖ BankModule: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
                }
            });
            
            console.log('üè¶ BankModule: –û—Ç–∫—Ä—ã—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentPlayer.username);
        }
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –±–∞–Ω–∫ –º–æ–¥—É–ª—è
     */
    async close() {
        if (this.ui) {
            this.ui.style.display = 'none';
            this.isOpen = false;
            console.log('üè¶ BankModule: –ó–∞–∫—Ä—ã—Ç');
            // –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞/–±–∞–ª–∞–Ω—Å–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –≤ GameState
            try {
                const player = await this.getCurrentUserPlayer();
                if (player && this.gameState && typeof this.gameState.updatePlayer === 'function') {
                    this.gameState.updatePlayer(player.id, player);
                }
            } catch (_) {}
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–∞–Ω–∫–∞
     */
    async updateBankData() {
        if (!this.gameState) {
            console.warn('‚ö†Ô∏è BankModule: GameState –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—Ä–∞—É–∑–µ—Ä–∞, –∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        let currentPlayer = await this.getCurrentUserPlayer();
        if (!currentPlayer) {
            console.log('üîß BankModule: getCurrentUserPlayer –≤–µ—Ä–Ω—É–ª null, –ø—Ä–æ–±—É–µ–º fallback...');
            currentPlayer = await this.getCurrentUserPlayerWithFallback();
        }
        
        if (!currentPlayer) {
            console.warn('‚ö†Ô∏è BankModule: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ GameStateManager...');
            
            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ GameStateManager –Ω–∞–ø—Ä—è–º—É—é
            const gameStateManager = window.app?.services?.get('gameStateManager');
            if (gameStateManager) {
                const state = gameStateManager.getState();
                const players = state?.players || [];
                
                // –ò—â–µ–º –ø–æ username –∏–∑ localStorage
                try {
                    const userData = localStorage.getItem('currentUser') || sessionStorage.getItem('am_player_bundle');
                    if (userData) {
                        const userDataParsed = JSON.parse(userData);
                        const username = userDataParsed?.username || userDataParsed?.currentUser?.username;
                        
                        if (username) {
                            currentPlayer = players.find(p => p.username === username);
                            if (currentPlayer) {
                                console.log('‚úÖ BankModule: –ù–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫ —á–µ—Ä–µ–∑ GameStateManager:', currentPlayer.username);
                                this.currentUserId = currentPlayer.id;
                            }
                        }
                    }
                } catch (e) {
                    console.warn('‚ö†Ô∏è BankModule: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ GameStateManager:', e);
                }
            }
            
            if (!currentPlayer) {
                console.warn('‚ö†Ô∏è BankModule: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
                return;
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º roomId –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        const roomId = this._getCurrentRoomId() || this.gameState?.getRoomId?.() || window.location.hash.split('roomId=')[1];
        let serverPlayerData = null;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
        if (roomId && currentPlayer.id) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π rate limiter –¥–ª—è game-state
            if (window.CommonUtils && !window.CommonUtils.canMakeGameStateRequest(roomId)) {
                console.log('üö´ BankModule: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ rate limiting');
                return;
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ pending –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º limiter
            if (window.CommonUtils && !window.CommonUtils.gameStateLimiter.setRequestPending(roomId)) {
                console.log('üö´ BankModule: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pending (race condition)');
                return;
            }
            
            try {
                console.log('üåê BankModule: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞...', { roomId, playerId: currentPlayer.id });
                
                const response = await fetch(`/api/rooms/${roomId}/game-state`);
                if (response.ok) {
                    const gameStateData = await response.json();
                    if (gameStateData.success && gameStateData.state?.players) {
                        // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                        serverPlayerData = gameStateData.state.players.find(p => 
                            p.id === currentPlayer.id || 
                            p.username === currentPlayer.username ||
                            (currentPlayer.userId && p.userId === currentPlayer.userId)
                        );
                        
                        if (serverPlayerData) {
                            console.log('‚úÖ BankModule: –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞:', {
                                id: serverPlayerData.id,
                                balance: serverPlayerData.balance || serverPlayerData.money,
                                currentLoan: serverPlayerData.currentLoan,
                                username: serverPlayerData.username
                            });
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                            Object.assign(currentPlayer, serverPlayerData);
                            
                            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å GameState
                            if (this.gameState && typeof this.gameState.updatePlayer === 'function') {
                                this.gameState.updatePlayer(currentPlayer.id, currentPlayer);
                            }
                        } else {
                            console.warn('‚ö†Ô∏è BankModule: –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', {
                                searchId: currentPlayer.id,
                                searchUsername: currentPlayer.username,
                                availablePlayers: gameStateData.state.players.map(p => ({ id: p.id, username: p.username }))
                            });
                        }
                    }
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è BankModule: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
            } finally {
                // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ pending –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º limiter
                if (window.CommonUtils) {
                    window.CommonUtils.gameStateLimiter.clearRequestPending(roomId);
                }
            }
        }
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
        const playerBalance = currentPlayer.balance ?? currentPlayer.money ?? currentPlayer.cash ?? 0;
        currentPlayer.money = playerBalance;
        currentPlayer.balance = playerBalance;
        
        console.log('üè¶ BankModule: –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
            id: currentPlayer.id,
            username: currentPlayer.username,
            money: currentPlayer.money,
            balance: currentPlayer.balance,
            currentLoan: currentPlayer.currentLoan || 0,
            rawData: {
                balance: currentPlayer.balance,
                money: currentPlayer.money,
                cash: currentPlayer.cash,
                totalIncome: currentPlayer.totalIncome,
                salary: currentPlayer.salary,
                monthlyExpenses: currentPlayer.monthlyExpenses
            }
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        const professionId = currentPlayer.profession || 'entrepreneur';
        const professionDetails = this.professionSystem ? 
            this.professionSystem.getProfessionDetails(professionId, {
                money: playerBalance,
                children: currentPlayer.children || 0,
                paidOffLoans: currentPlayer.paidOffLoans || {},
                extraIncome: currentPlayer.extraIncome || 0,
                currentLoan: currentPlayer.currentLoan || 0,
                otherMonthlyAdjustments: currentPlayer.otherMonthlyAdjustments || 0
            }) : null;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        const balanceElement = this.ui.querySelector('#bank-balance');
        if (balanceElement) {
            const displayBalance = Math.max(0, playerBalance); // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –±–∞–ª–∞–Ω—Å –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π
            balanceElement.textContent = `$${this.formatNumber(displayBalance)}`;
            balanceElement.style.color = displayBalance >= 0 ? '#10b981' : '#ef4444'; // –ó–µ–ª–µ–Ω—ã–π/–∫—Ä–∞—Å–Ω—ã–π
            console.log('üí∞ BankModule: –û–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å:', displayBalance, '–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:', !!balanceElement);
        } else {
            console.warn('‚ö†Ô∏è BankModule: –≠–ª–µ–º–µ–Ω—Ç #bank-balance –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ UI');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Ö–æ–¥—ã (–∏–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ –∏–∑ –∏–≥—Ä–æ–∫–∞)
        const incomeElement = this.ui.querySelector('#bank-income');
        if (incomeElement) {
            let totalIncome = 0;
            if (professionDetails && professionDetails.income) {
                totalIncome = professionDetails.income.total || professionDetails.income.salary || 0;
            } else {
                totalIncome = currentPlayer.totalIncome || currentPlayer.salary || 0;
            }
            incomeElement.textContent = `$${this.formatNumber(totalIncome)}`;
            console.log('üìà BankModule: –û–±–Ω–æ–≤–ª–µ–Ω –¥–æ—Ö–æ–¥:', totalIncome);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã (–∏–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ –∏–∑ –∏–≥—Ä–æ–∫–∞)
        const expensesElement = this.ui.querySelector('#bank-expenses');
        if (expensesElement) {
            let totalExpenses = 0;
            if (professionDetails && professionDetails.expenses) {
                totalExpenses = professionDetails.expenses.total || 0;
            } else {
                totalExpenses = currentPlayer.monthlyExpenses || 0;
            }
            expensesElement.textContent = `$${this.formatNumber(totalExpenses)}`;
            console.log('üìâ BankModule: –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞—Å—Ö–æ–¥—ã:', totalExpenses);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É (–∏–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ –∏–∑ –∏–≥—Ä–æ–∫–∞)
        const salaryElement = this.ui.querySelector('#bank-salary');
        if (salaryElement) {
            let salary = 0;
            if (professionDetails && professionDetails.income) {
                salary = professionDetails.income.salary || professionDetails.income.total || 0;
            } else {
                salary = currentPlayer.salary || currentPlayer.totalIncome || 0;
            }
            salaryElement.textContent = `$${this.formatNumber(salary)}/–º–µ—Å`;
            console.log('üí∞ BankModule: –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞:', salary);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç (—Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫)
        const creditElement = this.ui.querySelector('#bank-credit');
        if (creditElement) {
            const currentLoan = currentPlayer.currentLoan || 0;
            creditElement.textContent = `$${this.formatNumber(currentLoan)}`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é –∫—Ä–µ–¥–∏—Ç–∞
            if (currentLoan > 0) {
                creditElement.style.color = '#ef4444'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞
                creditElement.style.fontWeight = 'bold';
            } else {
                creditElement.style.color = '#10b981'; // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫—Ä–µ–¥–∏—Ç–∞
                creditElement.style.fontWeight = 'normal';
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç
        const maxCreditElement = this.ui.querySelector('#bank-max-credit');
        if (maxCreditElement) {
            const maxLoan = professionDetails?.loan?.maxLoan || 0;
            maxCreditElement.textContent = `$${this.formatNumber(maxLoan)}`;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ –ø—Ä–∞–≤–æ–º –±–ª–æ–∫–µ –∫—Ä–µ–¥–∏—Ç–∞
        const loanBalance = this.ui.querySelector('#loan-balance');
        if (loanBalance) {
            const currentLoan = currentPlayer.currentLoan || 0;
            loanBalance.textContent = `$${this.formatNumber(currentLoan)}`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é
            if (currentLoan > 0) {
                loanBalance.style.color = '#ef4444'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞
                loanBalance.style.fontWeight = 'bold';
            } else {
                loanBalance.style.color = '#10b981'; // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫—Ä–µ–¥–∏—Ç–∞
                loanBalance.style.fontWeight = 'normal';
            }
            console.log('üí≥ BankModule: –û–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–∞:', currentLoan);
        }
        
        const loanMax = this.ui.querySelector('#loan-max');
        if (loanMax) {
            // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç = –ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ * 10
            let netIncome = 0;
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            if (professionDetails && professionDetails.netIncome) {
                netIncome = professionDetails.netIncome.netIncome || 0;
            } else if (professionDetails) {
                const totalIncome = professionDetails.income?.total || professionDetails.income?.salary || 0;
                const totalExpenses = professionDetails.expenses?.total || 0;
                netIncome = Math.max(0, totalIncome - totalExpenses);
            }
            
            // Fallback: –≤—ã—á–∏—Å–ª—è–µ–º –∏–∑ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if (netIncome === 0) {
                try {
                    const incomeText = incomeElement?.textContent?.replace(/[$,]/g, '') || '0';
                    const expensesText = expensesElement?.textContent?.replace(/[$,]/g, '') || '0';
                    const incomeValue = parseInt(incomeText) || 0;
                    const expensesValue = parseInt(expensesText) || 0;
                    netIncome = Math.max(0, incomeValue - expensesValue);
                } catch (e) {
                    console.warn('‚ö†Ô∏è BankModule: –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —á–∏—Å—Ç–æ–≥–æ –¥–æ—Ö–æ–¥–∞:', e);
                }
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞–ø—Ä—è–º—É—é
            if (netIncome === 0 && currentPlayer) {
                const playerIncome = currentPlayer.totalIncome || currentPlayer.salary || 0;
                const playerExpenses = currentPlayer.monthlyExpenses || 0;
                netIncome = Math.max(0, playerIncome - playerExpenses);
            }
            
            const maxLoan = Math.max(netIncome * 10, 1000); // –ú–∏–Ω–∏–º—É–º $1000 –∫—Ä–µ–¥–∏—Ç–∞
            loanMax.textContent = `$${this.formatNumber(maxLoan)}`;
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            loanMax.style.color = '#10b981';
            loanMax.style.fontWeight = 'bold';
            
            console.log('üè¶ BankModule: –û–±–Ω–æ–≤–ª–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç:', {
                netIncomeFromProfession: professionDetails?.netIncome?.netIncome || 0,
                calculatedNetIncome: netIncome,
                maxLoan: maxLoan,
                playerIncome: currentPlayer.totalIncome || currentPlayer.salary || 0,
                playerExpenses: currentPlayer.monthlyExpenses || 0,
                textContent: loanMax.textContent
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —á–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        const netIncomeElement = this.ui.querySelector('#bank-net-income');
        if (netIncomeElement) {
            let netIncome = 0;
            if (professionDetails && professionDetails.netIncome) {
                netIncome = professionDetails.netIncome.netIncome || 0;
            } else {
                // –í—ã—á–∏—Å–ª—è–µ–º —á–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥ –∏–∑ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
                const incomeValue = incomeElement ? parseInt(incomeElement.textContent.replace(/[$,]/g, '')) || 0 : 0;
                const expensesValue = expensesElement ? parseInt(expensesElement.textContent.replace(/[$,]/g, '')) || 0 : 0;
                netIncome = Math.max(0, incomeValue - expensesValue);
            }
            netIncomeElement.textContent = `$${this.formatNumber(netIncome)}/–º–µ—Å`;
            console.log('üíé BankModule: –û–±–Ω–æ–≤–ª–µ–Ω —á–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥:', netIncome);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        if (professionDetails) {
            this.updateProfessionDetails(professionDetails, currentPlayer);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–∞—Ö
        this.currentProfessionDetails = professionDetails;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        this.loadTransactions();
        
        console.log('üè¶ BankModule: –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏');
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
     */
    updateProfessionDetails(professionDetails, player) {
        if (!professionDetails || !this.ui) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        const professionName = this.ui.querySelector('.profession-name');
        const professionTitle = this.ui.querySelector('.profession-title');
        if (professionName) professionName.textContent = professionDetails.profession.name;
        if (professionTitle) professionTitle.textContent = professionDetails.profession.title;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –¥–µ—Ç–µ–π
        const childrenExpense = this.ui.querySelector('#children-expense');
        if (childrenExpense && professionDetails.children) {
            childrenExpense.textContent = `$${this.formatNumber(professionDetails.children.monthlyExpense)}`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤
        const payoffButtons = this.ui.querySelectorAll('.payoff-btn');
        payoffButtons.forEach(btn => {
            const loanType = btn.dataset.loan;
            const loan = professionDetails.expenses[loanType];
            
            if (loan && loan.amount > 0) {
                btn.textContent = `–ü–æ–≥–∞—Å–∏—Ç—å $${this.formatNumber(loan.payOffAmount)}`;
                btn.disabled = !this.professionSystem.canPayOffLoan('entrepreneur', loanType, player.money || 0);
            } else {
                btn.textContent = '–ü–æ–≥–∞—à–µ–Ω–æ';
                btn.disabled = true;
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞
        const addChildBtn = this.ui.querySelector('#add-child');
        if (addChildBtn && professionDetails.children) {
            addChildBtn.disabled = !professionDetails.children.canHaveMore;
            if (professionDetails.children.canHaveMore) {
                addChildBtn.textContent = `–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞ (+$${this.formatNumber(professionDetails.children.nextChildExpense - professionDetails.children.monthlyExpense)}/–º–µ—Å)`;
            } else {
                addChildBtn.textContent = '–ú–∞–∫—Å–∏–º—É–º –¥–µ—Ç–µ–π';
            }
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
     */
    async loadPlayers() {
        const recipientSelect = this.ui.querySelector('#transfer-recipient');
        if (!recipientSelect) return;
        
        let players = [];
        
        // –ü–æ–ª—É—á–∞–µ–º roomId –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
        const roomId = this._getCurrentRoomId() || this.gameState?.getRoomId?.();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
        if (roomId) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π rate limiter –¥–ª—è game-state
            if (window.CommonUtils && !window.CommonUtils.canMakeGameStateRequest(roomId)) {
                console.log('üö´ BankModule: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ rate limiting');
                return;
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ pending –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º limiter
            if (window.CommonUtils && !window.CommonUtils.gameStateLimiter.setRequestPending(roomId)) {
                console.log('üö´ BankModule: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pending (race condition)');
                return;
            }
            
            try {
                console.log('üåê BankModule: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞...', { roomId });
                
                const response = await fetch(`/api/rooms/${roomId}/game-state`);
                if (response.ok) {
                    const gameStateData = await response.json();
                    if (gameStateData.success && gameStateData.state?.players) {
                        players = gameStateData.state.players;
                        console.log('‚úÖ BankModule: –ò–≥—Ä–æ–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞:', players.length);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π GameState —Å–µ—Ä–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                        if (this.gameState && typeof this.gameState.updatePlayers === 'function') {
                            this.gameState.updatePlayers(players);
                        } else if (this.gameStateManager && typeof this.gameStateManager.updateFromServer === 'function') {
                            // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ gameStateManager –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
                            this.gameStateManager.updateFromServer({
                                players: players
                            });
                        }
                    }
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è BankModule: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', error);
            } finally {
                // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ pending –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º limiter
                if (window.CommonUtils) {
                    window.CommonUtils.gameStateLimiter.clearRequestPending(roomId);
                }
            }
        }
        
        // Fallback: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ GameState
        if (players.length === 0) {
            if (this.gameState && typeof this.gameState.getPlayers === 'function') {
                players = this.gameState.getPlayers();
            } else if (this.gameStateManager) {
                // Fallback —á–µ—Ä–µ–∑ gameStateManager
                const state = this.gameStateManager.getState();
                players = state?.players || [];
            } else {
                // Fallback —á–µ—Ä–µ–∑ window.app
                const gameStateManager = window.app?.services?.get('gameStateManager');
                if (gameStateManager) {
                    const state = gameStateManager.getState();
                    players = state?.players || [];
                }
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let currentUser = null;
        let currentUserId = null;
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if (typeof this.getCurrentUser === 'function') {
            currentUser = this.getCurrentUser();
            currentUserId = currentUser?.id;
        } else if (window.app && window.app.getCurrentUser) {
            currentUser = window.app.getCurrentUser();
            currentUserId = currentUser?.id;
        } else if (window.gameStateManager) {
            const state = window.gameStateManager.getState();
            currentUser = state?.currentUser;
            currentUserId = currentUser?.id;
        }
        
        // Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ localStorage
        if (!currentUserId) {
            try {
                const userData = localStorage.getItem('currentUser');
                if (userData) {
                    const user = JSON.parse(userData);
                    currentUserId = user.id;
                    console.log('üîß BankModule: currentUserId –ø–æ–ª—É—á–µ–Ω –∏–∑ localStorage:', currentUserId);
                }
            } catch (e) {
                console.warn('‚ö†Ô∏è BankModule: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è currentUserId –∏–∑ localStorage:', e);
            }
        }
        
        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        recipientSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞</option>';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ)
        players.forEach(player => {
            if (player.id !== currentUserId) {
                const option = document.createElement('option');
                option.value = player.id;
                const balance = player.balance || player.money || 0;
                option.textContent = `${player.username || player.name} ($${this.formatNumber(balance)})`;
                recipientSelect.appendChild(option);
            }
        });
        
        console.log('üè¶ BankModule: –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω:', players.length, '–∏–≥—Ä–æ–∫–æ–≤');
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
     */
    async executeTransfer() {
        const recipientId = this.ui.querySelector('#transfer-recipient').value;
        const amount = parseInt(this.ui.querySelector('#transfer-amount').value);
        
        if (!recipientId || !amount || amount <= 0) {
            this.showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'error');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º GameState —Å fallback –ª–æ–≥–∏–∫–æ–π
        if (!this.gameState) {
            const gameStateManager = window.app?.services?.get('gameStateManager');
            if (gameStateManager) {
                console.log('üîß BankModule: –ò—Å–ø–æ–ª—å–∑—É–µ–º GameStateManager –∫–∞–∫ fallback –¥–ª—è GameState');
                // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ GameState
                this.gameState = {
                    getPlayers: () => {
                        const state = gameStateManager.getState();
                        return state.players || [];
                    },
                    getRoomId: () => {
                        const roomId = window.location.hash.split('roomId=')[1];
                        return roomId;
                    }
                };
            } else {
                this.showNotification('–û—à–∏–±–∫–∞: GameState –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
                return;
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å fallback –ª–æ–≥–∏–∫–æ–π
        let currentPlayer = await this.getCurrentUserPlayer();
        if (!currentPlayer) {
            currentPlayer = await this.getCurrentUserPlayerWithFallback();
        }
        
        if (!currentPlayer) {
            this.showNotification('–û—à–∏–±–∫–∞: –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å–µ–±–µ
        if (currentPlayer.id === recipientId) {
            this.showNotification('–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ', 'error');
            return;
        }
        
        if (currentPlayer.money < amount) {
            this.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', 'error');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        const transferBtn = this.ui.querySelector('#transfer-execute');
        const originalText = transferBtn.textContent;
        transferBtn.disabled = true;
        transferBtn.textContent = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...';
        
        try {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
            const success = await this.performTransfer(recipientId, amount);
            
            if (success) {
                this.showNotification(`–ü–µ—Ä–µ–≤–æ–¥ $${this.formatNumber(amount)} –≤—ã–ø–æ–ª–Ω–µ–Ω`, 'success');
                this.resetTransferForm();
                await this.updateBankData();
                await this.loadPlayers();
                
                const recipient = this.gameState.getPlayers().find(p => p.id === recipientId);
                console.log('üè¶ BankModule: –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞:', {
                    recipient: recipient?.username || recipientId,
                    amount: -amount
                });
                this.addTransaction(
                    `–ü–µ—Ä–µ–≤–æ–¥ –∏–≥—Ä–æ–∫—É ${recipient?.username || recipientId}`,
                    `–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ $${this.formatNumber(amount)}`,
                    -amount,
                    'completed'
                );
            } else {
                this.showNotification('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞', 'error');
            }
        } catch (error) {
            console.error('‚ùå BankModule: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞', 'error');
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            transferBtn.disabled = false;
            transferBtn.textContent = originalText;
        }
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API
     */
    async performTransfer(recipientId, amount) {
        // –ü–æ–ª—É—á–∞–µ–º GameState —Å fallback –ª–æ–≥–∏–∫–æ–π
        if (!this.gameState) {
            const gameStateManager = window.app?.services?.get('gameStateManager');
            if (gameStateManager) {
                console.log('üîß BankModule: –ò—Å–ø–æ–ª—å–∑—É–µ–º GameStateManager –∫–∞–∫ fallback –¥–ª—è GameState –≤ performTransfer');
                this.gameState = {
                    getPlayers: () => {
                        const state = gameStateManager.getState();
                        return state.players || [];
                    },
                    getRoomId: () => {
                        const roomId = window.location.hash.split('roomId=')[1];
                        return roomId;
                    }
                };
            } else {
                console.warn('‚ö†Ô∏è BankModule: GameState –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è performTransfer');
                return false;
            }
        }
        
        if (!this.currentRoomId) {
            this.currentRoomId = this.gameState.getRoomId();
        }
        
        if (!this.currentRoomId) {
            console.warn('‚ö†Ô∏è BankModule: RoomId –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è performTransfer');
            return false;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å fallback –ª–æ–≥–∏–∫–æ–π
        let currentPlayer = await this.getCurrentUserPlayer();
        if (!currentPlayer) {
            currentPlayer = await this.getCurrentUserPlayerWithFallback();
        }
        
        if (!currentPlayer) {
            console.warn('‚ö†Ô∏è BankModule: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
            return false;
        }
        
        const recipient = this.gameState.getPlayers().find(p => p.id === recipientId);
        
        if (!recipient) {
            console.warn('‚ö†Ô∏è BankModule: –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', recipientId);
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
        const currentBalance = currentPlayer.balance || currentPlayer.money || 0;
        if (currentBalance < amount) {
            this.showNotification(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –î–æ—Å—Ç—É–ø–Ω–æ: $${this.formatNumber(currentBalance)}`, 'error');
            return false;
        }
        
        try {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
            const response = await fetch('/api/bank/transfer', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    roomId: this.currentRoomId,
                    fromPlayerId: currentPlayer.id,
                    toPlayerId: recipientId,
                    amount: amount,
                    description: `–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç ${currentPlayer.username} –∫ ${recipient.username}`
                })
            });
            
            const result = await response.json();
            
            if (!result.success) {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–Ω—ã–º–∏
            currentPlayer.balance = result.data.fromPlayerBalance;
            currentPlayer.money = result.data.fromPlayerBalance; // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–±–∞ –ø–æ–ª—è
            recipient.balance = result.data.toPlayerBalance;
            recipient.money = result.data.toPlayerBalance; // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–±–∞ –ø–æ–ª—è
            
            // –û–±–Ω–æ–≤–ª—è–µ–º GameState
            if (this.gameState && typeof this.gameState.updatePlayer === 'function') {
                this.gameState.updatePlayer(currentPlayer.id, currentPlayer);
                this.gameState.updatePlayer(recipient.id, recipient);
            }
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            if (this.eventBus) {
                this.eventBus.emit('bank:transferCompleted', {
                    fromPlayer: currentPlayer,
                    toPlayer: recipient,
                    amount: amount,
                    transaction: result.data.transaction
                });
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤
                this.eventBus.emit('game:playersUpdated', {
                    players: this.gameState.getPlayers()
                });
            }
            
            return true;
            
        } catch (error) {
            console.error('‚ùå BankModule: –û—à–∏–±–∫–∞ API –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
            this.showNotification(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${error.message}`, 'error');
            return false;
        }
    }
    
    /**
     * –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞
     */
    resetTransferForm() {
        this.ui.querySelector('#transfer-recipient').value = '';
        this.ui.querySelector('#transfer-amount').value = '';
    }
    
    /**
     * –í–∑—è—Ç–∏–µ –∫—Ä–µ–¥–∏—Ç–∞
     */
    takeCredit() {
        this.showNotification('–§—É–Ω–∫—Ü–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
    }
    
    /**
     * –ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞
     */
    async payOffLoan(loanType) {
        if (!this.professionSystem || !this.gameState) {
            this.showNotification('–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'error');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å fallback –ª–æ–≥–∏–∫–æ–π
        let currentPlayer = await this.getCurrentUserPlayer();
        if (!currentPlayer) {
            currentPlayer = await this.getCurrentUserPlayerWithFallback();
        }
        
        if (!currentPlayer) {
            this.showNotification('–¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }
        
        const payOffResult = this.professionSystem.payOffLoan('entrepreneur', loanType, {
            money: currentPlayer.money || 0,
            paidOffLoans: currentPlayer.paidOffLoans || {}
        });
        
        if (!payOffResult || !payOffResult.success) {
            this.showNotification(payOffResult?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≥–∞—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç', 'error');
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        if (!currentPlayer.paidOffLoans) {
            currentPlayer.paidOffLoans = {};
        }
        currentPlayer.paidOffLoans[loanType] = true;
        currentPlayer.money -= payOffResult.payOffAmount;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateBankData();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        this.addTransaction(
            `–ü–æ–≥–∞—à–µ–Ω–∏–µ ${this.getLoanDisplayName(loanType)}`,
            `–ü–æ–≥–∞—à–µ–Ω –∫—Ä–µ–¥–∏—Ç –Ω–∞ $${this.formatNumber(payOffResult.payOffAmount)}`,
            -payOffResult.payOffAmount,
            'completed'
        );
        
        this.showNotification(
            `–ö—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω! –≠–∫–æ–Ω–æ–º–∏—è: $${this.formatNumber(payOffResult.monthlySavings)}/–º–µ—Å`,
            'success'
        );
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞
     */
    async addChild() {
        if (!this.professionSystem || !this.gameState) {
            this.showNotification('–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'error');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å fallback –ª–æ–≥–∏–∫–æ–π
        let currentPlayer = await this.getCurrentUserPlayer();
        if (!currentPlayer) {
            currentPlayer = await this.getCurrentUserPlayerWithFallback();
        }
        
        if (!currentPlayer) {
            this.showNotification('–¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }
        
        const addChildResult = this.professionSystem.addChild('entrepreneur', {
            children: currentPlayer.children || 0
        });
        
        if (!addChildResult || !addChildResult.success) {
            this.showNotification(addChildResult?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞', 'error');
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        currentPlayer.children = addChildResult.newChildrenCount;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateBankData();
        
        this.showNotification(
            `–†–µ–±–µ–Ω–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω! –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: $${this.formatNumber(addChildResult.additionalMonthlyExpense)}/–º–µ—Å`,
            'info'
        );
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞
     */
    getLoanDisplayName(loanType) {
        const names = {
            carLoan: '–ö—Ä–µ–¥–∏—Ç –Ω–∞ –∞–≤—Ç–æ',
            educationLoan: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç',
            creditCards: '–ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã',
            mortgage: '–ò–ø–æ—Ç–µ–∫–∞ —Å—Ç—É–¥–∏—è'
        };
        return names[loanType] || loanType;
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
     */
    addTransaction(title, details, amount, status = 'completed') {
        console.log('üè¶ BankModule: –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:', { title, details, amount, status });
        
        if (!this.ui) {
            console.warn('‚ö†Ô∏è BankModule: UI –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
            return;
        }
        
        const transactionsList = this.ui.querySelector('#transactions-list');
        if (!transactionsList) {
            console.warn('‚ö†Ô∏è BankModule: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        this.bankState.transactions.unshift({
            title,
            details,
            amount,
            status,
            timestamp: new Date().toISOString()
        });
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
        if (this.bankState.transactions.length > 50) {
            this.bankState.transactions = this.bankState.transactions.slice(0, 50);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à)
        if (this.domCache.newBadge) {
            this.domCache.newBadge.textContent = String(this.bankState.transactions.length);
        }
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –¥—É–±–ª–µ–π)
        this.loadTransactions();
        
        console.log('‚úÖ BankModule: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ UI –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
     */
    loadTransactions() {
        if (!this.ui) return;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        const transactionsList = this.domCache.transactionsList || this.ui.querySelector('#transactions-list');
        if (!transactionsList) return;
        
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é
        const existingTransactions = transactionsList.querySelectorAll('.transaction-item');
        existingTransactions.forEach((item) => item.remove());
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        this.bankState.transactions.forEach(transaction => {
            const transactionItem = document.createElement('div');
            transactionItem.className = 'transaction-item';
            
            const date = new Date(transaction.timestamp);
            const timeString = date.toLocaleString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
            
            transactionItem.innerHTML = `
                <div class="transaction-info">
                    <div class="transaction-title">${transaction.title}</div>
                    <div class="transaction-details">${transaction.details}</div>
                    <div class="transaction-time">${timeString}</div>
                </div>
                <div class="transaction-amount ${transaction.amount > 0 ? 'positive' : 'negative'}">${transaction.amount > 0 ? '+' : ''}$${this.formatNumber(transaction.amount)}</div>
                <div class="transaction-status ${transaction.status}">${transaction.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' : transaction.status}</div>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å)
            const firstTransaction = transactionsList.querySelector('.transaction-item');
            if (firstTransaction) {
                firstTransaction.insertAdjacentElement('afterend', transactionItem);
            } else {
                transactionsList.appendChild(transactionItem);
            }
        });
        
        console.log('üè¶ BankModule: –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', this.bankState.transactions.length);
    }
    
    /**
     * Fallback –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    async getCurrentUserPlayerWithFallback() {
        console.log('üîß BankModule: –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞...');
        
        const gameStateManager = window.app?.services?.get('gameStateManager');
        const state = gameStateManager?.getState();
        const players = state?.players || [];
        
        console.log('üîß BankModule: –ò–≥—Ä–æ–∫–∏ –≤ –∏–≥—Ä–µ:', players.map(p => ({ id: p.id, username: p.username })));
        
        // –ò—â–µ–º –ø–æ username –∏–∑ localStorage
        try {
            const userData = localStorage.getItem('currentUser');
            if (userData) {
                const user = JSON.parse(userData);
                console.log('üîß BankModule: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ localStorage:', user);
                
                const player = players.find(p => p.username === user.username);
                if (player) {
                    console.log('‚úÖ BankModule: –ò–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ fallback –ø–æ username:', player.username);
                    this.currentUserId = player.id;
                    return player;
                }
            }
        } catch (e) {
            console.warn('‚ö†Ô∏è BankModule: –û—à–∏–±–∫–∞ fallback –ª–æ–≥–∏–∫–∏:', e);
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ username, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        if (players.length > 0) {
            const player = players[0];
            console.log('üîß BankModule: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ fallback:', player.username);
            this.currentUserId = player.id;
            return player;
        }
        
        console.warn('‚ö†Ô∏è BankModule: Fallback –ª–æ–≥–∏–∫–∞ –Ω–µ —Å–º–æ–≥–ª–∞ –Ω–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞');
        return null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    getCurrentUser() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —É—Ç–∏–ª–∏—Ç—É, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if (window.CommonUtils) {
            return window.CommonUtils.getCurrentUser();
        }
        
        // Fallback - —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ localStorage
            const token = localStorage.getItem('authToken');
            if (token) {
                const payload = JSON.parse(atob(token.split('.')[1]));
                return {
                    id: payload.userId || payload.id,
                    email: payload.email,
                    username: payload.username || payload.email
                };
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è BankModule: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞:', error);
        }
        
        // Fallback - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ GameStateManager
        if (window.gameStateManager) {
            const state = window.gameStateManager.getState();
            return state?.currentUser || null;
        }
        
        return null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ (–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞)
     */
    async getCurrentUserPlayer() {
        if (!this.gameState) return null;
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º currentUserId –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–≥—Ä–æ–∫–∞–º –≤ –∏–≥—Ä–µ
        if (this.currentUserId) {
            const gameStateManager = window.app?.services?.get('gameStateManager');
            const state = gameStateManager?.getState();
            const players = state?.players || [];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º ID
            let player = players.find(p => p.id === this.currentUserId);
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID, –∏—â–µ–º –ø–æ username –∏–∑ localStorage
            if (!player) {
                try {
                    const userData = localStorage.getItem('currentUser');
                    if (userData) {
                        const user = JSON.parse(userData);
                        player = players.find(p => p.username === user.username);
                        if (player) {
                            console.log('üîß BankModule: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º currentUserId —Å', this.currentUserId, '–Ω–∞', player.id);
                            this.currentUserId = player.id;
                        }
                    }
                } catch (e) {
                    console.warn('‚ö†Ô∏è BankModule: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è currentUserId:', e);
                }
            }
        }
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è GameStateManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (this.gameStateManager && !this._subscribedToGameStateManager) {
            this.gameStateManager.on('players:updated', (players) => {
                console.log('üîç BankModule: –ü–æ–ª—É—á–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –æ—Ç GameStateManager:', players);
            });
            this.gameStateManager.on('state:updated', (state) => {
                console.log('üîç BankModule: –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç GameStateManager:', state);
            });
            this._subscribedToGameStateManager = true;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        let currentUserId = null;
        
        // 1. –ò–∑ sessionStorage (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)
        try {
            const bundleRaw = sessionStorage.getItem('am_player_bundle');
            if (bundleRaw) {
                const bundle = JSON.parse(bundleRaw);
                currentUserId = bundle.userId || bundle.id || bundle.username || bundle.currentUser?.id || bundle.currentUser?.username;
                console.log('üîç BankModule: ID –∏–∑ sessionStorage:', currentUserId, bundle);
            }
        } catch (e) {
            console.warn('‚ö†Ô∏è BankModule: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è sessionStorage:', e);
        }
        
        // 2. –ò–∑ localStorage (–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–ª—é—á–∏)
        if (!currentUserId) {
            try {
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º currentUser (–æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫)
                let userData = localStorage.getItem('currentUser');
                if (!userData) {
                    userData = localStorage.getItem('aura_money_user');
                }
                
                if (userData) {
                    const user = JSON.parse(userData);
                    currentUserId = user.id || user.userId || user.username;
                    console.log('üîç BankModule: ID –∏–∑ localStorage:', currentUserId, user);
                }
            } catch (e) {
                console.warn('‚ö†Ô∏è BankModule: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è localStorage:', e);
            }
        }
        
        // 3. –ò–∑ window.app
        if (!currentUserId && window.app) {
            try {
                const userModel = window.app.getModule('userModel');
                if (userModel) {
                    currentUserId = userModel.getId() || userModel.getUsername();
                }
            } catch (e) {
                console.warn('‚ö†Ô∏è BankModule: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è userModel:', e);
            }
        }
        
        if (!currentUserId) {
            console.warn('‚ö†Ô∏è BankModule: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ fallback
            let activePlayer = null;
            if (this.gameStateManager) {
                const state = this.gameStateManager.getState();
                activePlayer = state.activePlayer;
            } else {
                activePlayer = this.gameState.getActivePlayer();
            }
            
            if (activePlayer) {
                console.log('üîç BankModule: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ fallback:', activePlayer.username);
                return activePlayer;
            }
            return null;
        }
        
        console.log('üîç BankModule: –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ —Å ID:', currentUserId);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        let players = [];
        
        // 1. –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ GameStateManager
        if (this.gameStateManager) {
            const state = this.gameStateManager.getState();
            players = state.players || [];
            console.log('üîç BankModule: –ò–≥—Ä–æ–∫–∏ –∏–∑ GameStateManager:', players);
            
            // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∏ –ø—É—Å—Ç—ã–µ, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if (players.length === 0) {
                console.log('üîç BankModule: –ò–≥—Ä–æ–∫–∏ –ø—É—Å—Ç—ã–µ, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
                const updatedState = this.gameStateManager.getState();
                players = updatedState.players || [];
                console.log('üîç BankModule: –ò–≥—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', players);
            }
        }
        
        // 2. –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∏ –ø—É—Å—Ç—ã–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ GameState
        if (players.length === 0) {
            players = this.gameState.getPlayers();
            console.log('üîç BankModule: –ò–≥—Ä–æ–∫–∏ –∏–∑ GameState:', players);
        }
        
        // 3. –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –ø—É—Å—Ç—ã–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        if (players.length === 0) {
            console.log('üîç BankModule: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...');
            try {
                const response = await fetch(`/api/rooms/${this.gameState.getRoomId()}/state`);
                if (response.ok) {
                    const serverState = await response.json();
                    players = serverState.players || [];
                    console.log('üîç BankModule: –ò–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', players);
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è BankModule: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error);
            }
        }
        
        console.log('üîç BankModule: –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:', players.map(p => ({
            id: p.id,
            username: p.username,
            userId: p.userId
        })));
        
        // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞ –ø–æ ID (–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è)
        let player = players.find(p => 
            p.id === currentUserId || 
            p.username === currentUserId ||
            p.userId === currentUserId
        );
        
        console.log('üîç BankModule: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ ID:', player ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ username –∏–∑ localStorage
        if (!player) {
            try {
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º currentUser –∏–∑ localStorage
                let userData = localStorage.getItem('currentUser');
                if (!userData) {
                    userData = localStorage.getItem('aura_money_user');
                }
                
                if (userData) {
                    const user = JSON.parse(userData);
                    const username = user.username;
                    console.log('üîç BankModule: –ü–æ–∏—Å–∫ –ø–æ username –∏–∑ localStorage:', username);
                    if (username) {
                        player = players.find(p => p.username === username);
                        console.log('üîç BankModule: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ username –∏–∑ localStorage:', player ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
                    }
                }
            } catch (e) {
                console.warn('‚ö†Ô∏è BankModule: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è localStorage –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ username:', e);
            }
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ username –∏–∑ sessionStorage
        if (!player) {
            try {
                const bundleRaw = sessionStorage.getItem('am_player_bundle');
                if (bundleRaw) {
                    const bundle = JSON.parse(bundleRaw);
                    const username = bundle.username || bundle.currentUser?.username;
                    console.log('üîç BankModule: –ü–æ–∏—Å–∫ –ø–æ username –∏–∑ sessionStorage:', username);
                    if (username) {
                        player = players.find(p => p.username === username);
                        console.log('üîç BankModule: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ username –∏–∑ sessionStorage:', player ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
                    }
                }
            } catch (e) {
                console.warn('‚ö†Ô∏è BankModule: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ username:', e);
            }
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
        if (!player) {
            let activePlayer = null;
            if (this.gameStateManager) {
                const state = this.gameStateManager.getState();
                activePlayer = state.activePlayer;
            } else {
                activePlayer = this.gameState.getActivePlayer();
            }
            
            if (activePlayer) {
                console.log('üîç BankModule: –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞:', activePlayer.username);
                player = activePlayer;
            }
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ fallback
        if (!player && players.length > 0) {
            player = players[0];
            console.warn('‚ö†Ô∏è BankModule: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ fallback:', player.username);
        }
        
        if (!player) {
            console.warn('‚ö†Ô∏è BankModule: –ò–≥—Ä–æ–∫ —Å ID –Ω–µ –Ω–∞–π–¥–µ–Ω:', currentUserId);
            console.log('üîç BankModule: –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:', players.map(p => ({
                id: p.id,
                username: p.username,
                userId: p.userId
            })));
            return null;
        }
        
        console.log('‚úÖ BankModule: –ù–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
            id: player.id,
            username: player.username,
            money: player.money
        });
        
        return player;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
     */
    _getCurrentRoomId() {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ URL
            const urlParams = new URLSearchParams(window.location.hash.split('?')[1]);
            const roomId = urlParams.get('roomId');
            if (roomId) return roomId;
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ sessionStorage
            const roomData = sessionStorage.getItem('am_current_room');
            if (roomData) {
                const parsed = JSON.parse(roomData);
                return parsed.id || parsed.roomId;
            }
            
            console.warn('‚ö†Ô∏è BankModule: ID –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return null;
        } catch (error) {
            console.error('‚ùå BankModule: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–æ–º–Ω–∞—Ç—ã:', error);
            return null;
        }
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç CommonUtils)
     */
    formatNumber(num) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —É—Ç–∏–ª–∏—Ç—É, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if (window.CommonUtils) {
            return window.CommonUtils.formatNumber(num);
        }
        // Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        return new Intl.NumberFormat('ru-RU').format(num);
    }
    
    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    showNotification(message, type = 'info') {
        // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        console.log(`üè¶ BankModule: ${type.toUpperCase()} - ${message}`);
        
        // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            z-index: 10001;
            font-weight: 600;
        `;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 3000);
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –±–∞–Ω–∫–∞
     */
    forceUpdateBankUI(currentPlayer) {
        if (!this.ui || !currentPlayer) {
            console.warn('‚ö†Ô∏è BankModule: –ù–µ–ª—å–∑—è –æ–±–Ω–æ–≤–∏—Ç—å UI - –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞');
            return;
        }
        
        console.log('üîÑ BankModule: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¥–ª—è:', currentPlayer.username);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à)
        if (this.domCache.balanceElement) {
            const balance = currentPlayer.balance ?? currentPlayer.money ?? currentPlayer.cash ?? 0;
            this.domCache.balanceElement.textContent = `$${this.formatNumber(balance)}`;
            this.domCache.balanceElement.style.color = balance >= 0 ? '#10b981' : '#ef4444';
            console.log('üí∞ forceUpdateBankUI: –û–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å:', balance);
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Ö–æ–¥—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à)
        if (this.domCache.incomeElement) {
            const income = currentPlayer.totalIncome ?? currentPlayer.salary ?? 0;
            this.domCache.incomeElement.textContent = `$${this.formatNumber(income)}`;
            console.log('üìà forceUpdateBankUI: –û–±–Ω–æ–≤–ª–µ–Ω –¥–æ—Ö–æ–¥:', income);
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à)
        if (this.domCache.expensesElement) {
            const expenses = currentPlayer.monthlyExpenses ?? 0;
            this.domCache.expensesElement.textContent = `$${this.formatNumber(expenses)}`;
            console.log('üìâ forceUpdateBankUI: –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞—Å—Ö–æ–¥—ã:', expenses);
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à)
        if (this.domCache.creditElement) {
            const credit = currentPlayer.currentLoan ?? 0;
            this.domCache.creditElement.textContent = `$${this.formatNumber(credit)}`;
            this.domCache.creditElement.style.color = credit > 0 ? '#ef4444' : '#10b981';
            console.log('üí≥ forceUpdateBankUI: –û–±–Ω–æ–≤–ª–µ–Ω –∫—Ä–µ–¥–∏—Ç:', credit);
        }
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è
     */
    destroy() {
        if (this.ui && this.ui.parentNode) {
            this.ui.parentNode.removeChild(this.ui);
        }
        this.ui = null;
        console.log('üè¶ BankModule: –£–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.BankModule = BankModule;

