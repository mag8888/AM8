/**
 * DiceService v1.0.0
 * -----------------------------------------------------------------------------
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –±—Ä–æ—Å–∫–æ–≤ –∫—É–±–∏–∫–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç–∞ –¥–≤–∏–∂–µ–Ω–∏—è
 */
class DiceService {
    constructor(config = {}) {
        this.gameState = config.gameState || null;
        this.eventBus = config.eventBus || null;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É–±–∏–∫–æ–≤
        this.currentRoll = null;
        this.doubleDiceEnabled = false;
        this.consecutiveDoubles = 0;
        this.maxConsecutiveDoubles = 3;
        
        // –ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ—Å–∫–æ–≤
        this.rollHistory = [];
        this.maxHistoryLength = 10;
        
        console.log('üé≤ DiceService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        this.setupEventListeners();
        console.log('‚úÖ DiceService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        if (this.eventBus) {
            this.eventBus.on('charity:double_dice_enabled', this.enableDoubleDice.bind(this));
            this.eventBus.on('charity:double_dice_disabled', this.disableDoubleDice.bind(this));
            this.eventBus.on('game:reset', this.reset.bind(this));
        }
    }
    
    /**
     * –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞/–∫—É–±–∏–∫–æ–≤
     * @param {Object} options - –û–ø—Ü–∏–∏ –±—Ä–æ—Å–∫–∞
     * @param {boolean} options.forceSingle - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–¥–∏–Ω –∫—É–±–∏–∫
     * @param {boolean} options.forceDouble - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–≤–∞ –∫—É–±–∏–∫–∞
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
     */
    roll(options = {}) {
        const { forceSingle = false, forceDouble = false } = options;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤
        const useDoubleDice = this.doubleDiceEnabled && !forceSingle || forceDouble;
        const diceCount = useDoubleDice ? 2 : 1;
        
        // –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫–∏
        const results = [];
        for (let i = 0; i < diceCount; i++) {
            results.push(this.generateRandomDice());
        }
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const rollResult = {
            id: this.generateRollId(),
            timestamp: Date.now(),
            diceCount,
            results,
            total: results.reduce((sum, value) => sum + value, 0),
            isDouble: false,
            consecutiveDoubles: this.consecutiveDoubles
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–≤—É—Ö –∫—É–±–∏–∫–æ–≤)
        if (diceCount === 2 && results[0] === results[1]) {
            rollResult.isDouble = true;
            this.consecutiveDoubles++;
            rollResult.consecutiveDoubles = this.consecutiveDoubles;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–µ–π –ø–æ–¥—Ä—è–¥
            if (this.consecutiveDoubles >= this.maxConsecutiveDoubles) {
                rollResult.maxDoublesReached = true;
                rollResult.penalty = 'jail'; // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ "—Ç—é—Ä—å–º—É" (–ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞)
            }
        } else {
            this.consecutiveDoubles = 0;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.currentRoll = rollResult;
        this.addToHistory(rollResult);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        this.emitRollEvent(rollResult);
        
        console.log(`üé≤ DiceService: –ë—Ä–æ—Å–æ–∫ ${diceCount} –∫—É–±–∏–∫(–æ–≤):`, rollResult);
        
        return rollResult;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫—É–±–∏–∫–∞ (1-6)
     */
    generateRandomDice() {
        return Math.floor(Math.random() * 6) + 1;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –±—Ä–æ—Å–∫–∞
     */
    generateRollId() {
        return `roll_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ—Å–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
     */
    addToHistory(rollResult) {
        this.rollHistory.unshift(rollResult);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏
        if (this.rollHistory.length > this.maxHistoryLength) {
            this.rollHistory = this.rollHistory.slice(0, this.maxHistoryLength);
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ –±—Ä–æ—Å–∫–µ
     */
    emitRollEvent(rollResult) {
        if (this.eventBus) {
            this.eventBus.emit('dice:rolled', rollResult);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            if (rollResult.isDouble) {
                this.eventBus.emit('dice:double', rollResult);
            }
            
            if (rollResult.maxDoublesReached) {
                this.eventBus.emit('dice:max_doubles', rollResult);
            }
        }
    }
    
    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ –¥–≤–æ–π–Ω–æ–≥–æ –∫—É–±–∏–∫–∞ (–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
     */
    enableDoubleDice() {
        this.doubleDiceEnabled = true;
        console.log('üé≤ DiceService: –î–≤–æ–π–Ω–æ–π –∫—É–±–∏–∫ –≤–∫–ª—é—á–µ–Ω');
        
        if (this.eventBus) {
            this.eventBus.emit('dice:double_enabled');
        }
    }
    
    /**
     * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–≤–æ–π–Ω–æ–≥–æ –∫—É–±–∏–∫–∞
     */
    disableDoubleDice() {
        this.doubleDiceEnabled = false;
        console.log('üé≤ DiceService: –î–≤–æ–π–Ω–æ–π –∫—É–±–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω');
        
        if (this.eventBus) {
            this.eventBus.emit('dice:double_disabled');
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±—Ä–æ—Å–∫–∞
     */
    getCurrentRoll() {
        return this.currentRoll;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –±—Ä–æ—Å–∫–æ–≤
     */
    getHistory() {
        return [...this.rollHistory];
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—Ä–æ—Å–∫–∞
     */
    getLastRoll() {
        return this.rollHistory[0] || null;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –±—Ä–æ—Å–∞—Ç—å –∫—É–±–∏–∫
     */
    canRoll() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥ –ª–∏ –∏–≥—Ä–æ–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥—É–±–ª–µ–π
        if (this.consecutiveDoubles >= this.maxConsecutiveDoubles) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        if (this.gameState) {
            return this.gameState.canRoll;
        }
        
        return true;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—Ä–æ—Å–æ–∫ (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º)
     * @param {Object} rollResult - –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    setLastRoll(rollResult) {
        const rawValue = rollResult && (rollResult.value ?? rollResult.total ?? rollResult);
        const value = Number(rawValue);
        if (!Number.isFinite(value) || value <= 0) {
            console.warn('‚ö†Ô∏è DiceService: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—Ä–æ—Å–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', rollResult);
            return;
        }
        
        const providedResults = Array.isArray(rollResult?.results) && rollResult.results.length
            ? rollResult.results.map(Number)
            : null;
        const results = providedResults || [value];
        const diceCount = Math.max(1, Number(rollResult?.diceCount) || results.length);
        const isDouble = Boolean(rollResult?.isDouble && diceCount === 2);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥—É–±–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (typeof rollResult?.consecutiveDoubles === 'number') {
            this.consecutiveDoubles = rollResult.consecutiveDoubles;
        } else {
            this.consecutiveDoubles = isDouble ? this.consecutiveDoubles + 1 : 0;
        }
        
        this.currentRoll = {
            id: this.generateRollId(),
            timestamp: Date.now(),
            diceCount,
            results,
            total: value,
            isDouble,
            consecutiveDoubles: this.consecutiveDoubles,
            source: 'server'
        };
        
        this.addToHistory(this.currentRoll);
        this.emitRollEvent(this.currentRoll);
        
        console.log('üé≤ DiceService: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—Ä–æ—Å–æ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞:', this.currentRoll);
    }
    
    /**
     * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    reset() {
        this.currentRoll = null;
        this.consecutiveDoubles = 0;
        this.rollHistory = [];
        console.log('üé≤ DiceService: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ');
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±—Ä–æ—Å–∫–æ–≤
     */
    getStats() {
        const stats = {
            totalRolls: this.rollHistory.length,
            totalDoubles: this.rollHistory.filter(roll => roll.isDouble).length,
            consecutiveDoubles: this.consecutiveDoubles,
            doubleDiceEnabled: this.doubleDiceEnabled,
            averageRoll: 0
        };
        
        if (this.rollHistory.length > 0) {
            const totalSum = this.rollHistory.reduce((sum, roll) => sum + roll.total, 0);
            stats.averageRoll = Math.round((totalSum / this.rollHistory.length) * 100) / 100;
        }
        
        return stats;
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—Ä–æ—Å–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    formatRollResult(rollResult) {
        if (!rollResult) return '–ù–µ—Ç –±—Ä–æ—Å–∫–∞';
        
        const { results, total, isDouble, diceCount } = rollResult;
        
        if (diceCount === 1) {
            return `${results[0]}`;
        } else {
            const diceText = results.join(' + ');
            const doubleText = isDouble ? ' (–¥—É–±–ª—å!)' : '';
            return `${diceText} = ${total}${doubleText}`;
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.DiceService = DiceService;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = DiceService;
}
