/**
 * GameApiManager - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
 */

class GameApiManager {
    constructor() {
        this.cache = new Map();
        this.pendingRequests = new Map();
        this.rateLimitUntil = 0;
        this.minRequestInterval = 500; // 500–º—Å –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        this.backoffMultiplier = 1.05; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç backoff
        this.currentBackoff = 0;
        this.maxBackoff = 2000; // –ú–∞–∫—Å–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã
    }

    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º rate limiting
     */
    async request(url, options = {}) {
        const cacheKey = `${url}_${JSON.stringify(options)}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (this.cache.has(cacheKey)) {
            const cached = this.cache.get(cacheKey);
            if (Date.now() - cached.timestamp < 1000) { // 1 —Å–µ–∫—É–Ω–¥–∞ –∫—ç—à –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                console.log('üéÆ GameApiManager: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è', url);
                return cached.data;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
        if (this.rateLimitUntil > Date.now()) {
            const waitTime = this.rateLimitUntil - Date.now();
            console.log(`‚è≥ GameApiManager: Rate limited, –∂–¥–µ–º ${waitTime}–º—Å`);
            await this._wait(waitTime);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        const now = Date.now();
        const timeSinceLastRequest = now - (this.lastRequestTime || 0);
        if (timeSinceLastRequest < this.minRequestInterval) {
            const waitTime = this.minRequestInterval - timeSinceLastRequest;
            await this._wait(waitTime);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º pending –∑–∞–ø—Ä–æ—Å—ã
        if (this.pendingRequests.has(cacheKey)) {
            console.log('üéÆ GameApiManager: –ñ–¥–µ–º pending –∑–∞–ø—Ä–æ—Å –¥–ª—è', url);
            return this.pendingRequests.get(cacheKey);
        }

        // –°–æ–∑–¥–∞–µ–º promise –¥–ª—è pending –∑–∞–ø—Ä–æ—Å–∞
        const requestPromise = this._executeRequest(url, options, cacheKey);
        this.pendingRequests.set(cacheKey, requestPromise);

        try {
            const result = await requestPromise;
            return result;
        } finally {
            this.pendingRequests.delete(cacheKey);
            this.lastRequestTime = Date.now();
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å
     */
    async _executeRequest(url, options, cacheKey) {
        try {
            console.log(`üéÆ GameApiManager: –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å ${url}`);
            
            const response = await fetch(url, {
                ...options,
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                }
            });

            if (response.status === 429) {
                const retryAfter = this._applyRateLimitFromResponse(response);
                const error = new Error(`HTTP 429: Rate limited`);
                error.isRateLimit = true;
                error.retryAfter = retryAfter;
                throw error;
            }

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            this.cache.set(cacheKey, {
                data,
                timestamp: Date.now()
            });

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º backoff –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
            this._resetBackoff();

            return data;

        } catch (error) {
            if (error.isRateLimit) {
                this._increaseBackoff(error.retryAfter);
                throw error;
            }
            
            // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π backoff
            this._increaseBackoff(1000);
            throw error;
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–∏—Ç—å rate limiting –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
     */
    _applyRateLimitFromResponse(response) {
        const retryAfter = response.headers.get('Retry-After');
        if (retryAfter) {
            const seconds = parseInt(retryAfter);
            return seconds * 1000; // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        }
        return 1000; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —Å–µ–∫—É–Ω–¥–∞
    }

    /**
     * –£–≤–µ–ª–∏—á–∏—Ç—å backoff
     */
    _increaseBackoff(preferredMs = 0) {
        const maxServerWait = 2000; // –ú–∞–∫—Å–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        const minServerWait = 500; // –ú–∏–Ω–∏–º—É–º 500–º—Å

        if (preferredMs > 0) {
            this.rateLimitUntil = Date.now() + Math.min(preferredMs, maxServerWait);
        }

        if (this.currentBackoff === 0) {
            this.currentBackoff = minServerWait;
        } else {
            this.currentBackoff = Math.min(
                this.currentBackoff * this.backoffMultiplier,
                this.maxBackoff
            );
        }
    }

    /**
     * –°–±—Ä–æ—Å–∏—Ç—å backoff
     */
    _resetBackoff() {
        this.currentBackoff = 0;
        this.rateLimitUntil = 0;
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ
     */
    _wait(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
     */
    clearCache() {
        this.cache.clear();
        console.log('üéÆ GameApiManager: –ö—ç—à –æ—á–∏—â–µ–Ω');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
window.GameApiManager = new GameApiManager();

console.log('‚úÖ GameApiManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π');
