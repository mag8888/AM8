/**
 * RoomService v2.0.0 - Refactored
 * –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–æ–≤—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
 * - –£—Å—Ç—Ä–∞–Ω–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç
 * - –£–ª—É—á—à–µ–Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
 * - –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 * - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
 */
class RoomService {
    constructor() {
        this._initializeConfiguration();
        this._initializeState();
        this._initializeData();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
     * @private
     */
    _initializeConfiguration() {
        const isLocal = this._isLocalEnvironment();
        
        this.config = {
            isLocal,
            baseUrl: isLocal ? 'http://localhost:3002/api/rooms' : '/api/rooms',
            useMockData: !isLocal, // –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
            localStorageKey: 'aura_money_dynamic_rooms',
            cacheTimeout: 30000, // 30 —Å–µ–∫—É–Ω–¥
            maxRetries: 3
        };

        console.log(`üè† RoomService v2.0.0: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ${isLocal ? '–ª–æ–∫–∞–ª—å–Ω–æ–≥–æ' : '–ø—Ä–æ–¥–∞–∫—à–Ω'} —Ä–µ–∂–∏–º–∞`);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
     * @private
     */
    _initializeState() {
        this.state = {
            currentRoom: null,
            rooms: [],
            lastUpdate: null,
            isLoading: false,
            error: null
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–º–æ–∫-–¥–∞–Ω–Ω—ã–µ + localStorage)
     * @private
     */
    _initializeData() {
        if (this.config.useMockData) {
            this._initializeMockData();
            this._loadPersistedRooms();
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
     * @private
     */
    _isLocalEnvironment() {
        return window.location.hostname === 'localhost' || 
               window.location.hostname === '127.0.0.1' ||
               window.location.hostname === '0.0.0.0';
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö
     * @private
     */
    _initializeMockData() {
        const now = Date.now();
        
        this.mockRooms = [
            this._createMockRoomObject({
                id: 'room-demo-1',
                name: '–î–µ–º–æ –∫–æ–º–Ω–∞—Ç–∞ 1',
                maxPlayers: 4,
                playerCount: 2,
                creator: 'demo_user',
                turnTime: 30,
                assignProfessions: true,
                players: [
                    { id: 'p1', username: 'demo_user', name: 'demo_user', isHost: true },
                    { id: 'p2', username: 'player1', name: 'player1', isHost: false }
                ],
                createdAt: new Date(now - 60000).toISOString()
            }),
            this._createMockRoomObject({
                id: 'room-demo-2',
                name: '–¢—É—Ä–Ω–∏—Ä–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞',
                maxPlayers: 6,
                playerCount: 3,
                creator: 'tournament_master',
                turnTime: 60,
                assignProfessions: false,
                players: [
                    { id: 'p3', username: 'tournament_master', name: 'tournament_master', isHost: true },
                    { id: 'p4', username: 'player2', name: 'player2', isHost: false },
                    { id: 'p5', username: 'player3', name: 'player3', isHost: false }
                ],
                createdAt: new Date(now - 30000).toISOString()
            })
        ];

        console.log('üè† RoomService: –ë–∞–∑–æ–≤—ã–µ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –º–æ–∫-–∫–æ–º–Ω–∞—Ç—ã —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
     * @private
     */
    _createMockRoom(roomData) {
        return {
            id: roomData.id,
            name: roomData.name,
            maxPlayers: roomData.maxPlayers || 4,
            playerCount: roomData.playerCount || 0,
            status: roomData.status || 'waiting',
            isStarted: roomData.isStarted || false,
            isFull: roomData.isFull || false,
            creator: roomData.creator || 'unknown',
            turnTime: roomData.turnTime || 30,
            assignProfessions: roomData.assignProfessions || false,
            players: roomData.players || [],
            createdAt: roomData.createdAt || new Date().toISOString()
        };
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –∏–∑ localStorage
     * @private
     */
    _loadPersistedRooms() {
        try {
            const saved = localStorage.getItem(this.config.localStorageKey);
            if (!saved) {
                console.log('üìÇ RoomService: –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –≤ localStorage');
                return;
            }

            const persistedRooms = JSON.parse(saved);
            if (!Array.isArray(persistedRooms)) {
                console.warn('‚ö†Ô∏è RoomService: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç');
                return;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∫–æ–º–Ω–∞—Ç—ã (–ø–æ ID)
            const existingIds = new Set(this.mockRooms.map(room => room.id));
            const newRooms = persistedRooms.filter(room => !existingIds.has(room.id));

            if (newRooms.length > 0) {
                this.mockRooms = [...newRooms, ...this.mockRooms];
                console.log(`üìÇ RoomService: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${newRooms.length} –Ω–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç –∏–∑ localStorage`);
            } else {
                console.log('üìÇ RoomService: –ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
            }

        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç:', error);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–Ω–∞—Ç –≤ localStorage
     * @private
     */
    _savePersistedRooms() {
        try {
            const dynamicRooms = this.mockRooms.filter(room => 
                room.id.startsWith('mock-room-')
            );
            
            localStorage.setItem(this.config.localStorageKey, JSON.stringify(dynamicRooms));
            console.log(`üíæ RoomService: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${dynamicRooms.length} –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–Ω–∞—Ç`);
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
     * @returns {Promise<Array>}
     */
    async getAllRooms() {
        try {
            console.log('üè† RoomService: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç');

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
            if (this.config.useMockData) {
                return this._getMockRooms();
            }

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å API
            const rooms = await this._fetchRoomsFromAPI();
            this.state.rooms = rooms;
            this.state.lastUpdate = Date.now();
            
            return rooms;

        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:', error);
            
            // Fallback –Ω–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
            if (this.config.useMockData) {
                console.log('üîÑ RoomService: Fallback –Ω–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ');
                return this._getMockRooms();
            }
            
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∫-–∫–æ–º–Ω–∞—Ç
     * @private
     */
    _getMockRooms() {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–Ω–∞—Ç—ã –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –≤–≤–µ—Ä—Ö—É)
        const sortedRooms = [...this.mockRooms].sort((a, b) => 
            new Date(b.createdAt) - new Date(a.createdAt)
        );
        
        this.state.rooms = sortedRooms;
        this.state.lastUpdate = Date.now();
        
        return sortedRooms;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç —Å API
     * @private
     */
    async _fetchRoomsFromAPI() {
        const response = await fetch(this.config.baseUrl, {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' }
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç');
        }

        return data.data;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ ID
     * @param {string} roomId
     * @returns {Promise<Object>}
     */
    async getRoomById(roomId) {
        try {
            console.log('üè† RoomService: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ ID:', roomId);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
            if (this.config.useMockData) {
                return this._findMockRoomById(roomId);
            }

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å API
            const room = await this._fetchRoomFromAPI(roomId);
            return room;

        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            
            // Fallback –Ω–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
            if (this.config.useMockData) {
                return this._findMockRoomById(roomId);
            }
            
            return null;
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –º–æ–∫-–∫–æ–º–Ω–∞—Ç—ã –ø–æ ID
     * @private
     */
    _findMockRoomById(roomId) {
        const room = this.mockRooms.find(r => r.id === roomId);
        if (room) {
            console.log('‚úÖ RoomService: –ö–æ–º–Ω–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö:', room.name);
            return room;
        } else {
            console.warn('‚ö†Ô∏è RoomService: –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö');
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å API
     * @private
     */
    async _fetchRoomFromAPI(roomId) {
        const response = await fetch(`${this.config.baseUrl}/${roomId}`, {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' }
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message || '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        return data.data;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
     * @param {Object} roomData
     * @param {Object} creator
     * @returns {Promise<Object>}
     */
    async createRoom(roomData, creator) {
        try {
            console.log('üè† RoomService: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', roomData.name);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
            if (this.config.useMockData) {
                return this._createMockRoom(roomData, creator);
            }

            // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ API
            const room = await this._createRoomViaAPI(roomData, creator);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await this._sendRoomCreatedNotification(room, creator);
            
            return room;

        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            
            // Fallback –Ω–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
            if (this.config.useMockData) {
                console.log('üîÑ RoomService: Fallback –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-–∫–æ–º–Ω–∞—Ç—ã');
                return this._createMockRoom(roomData, creator);
            }
            
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –º–æ–∫-–∫–æ–º–Ω–∞—Ç—ã
     * @param {Object} roomData - –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
     * @param {Object} creator - –°–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Object}
     * @private
     */
    _createMockRoomObject(roomData, creator) {
        const safeCreator = creator || {};
        
        return {
            id: roomData.id || 'mock-room-' + Date.now(),
            name: roomData.name || '–ù–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞',
            maxPlayers: roomData.maxPlayers || 4,
            playerCount: roomData.playerCount || 1,
            status: roomData.status || 'waiting',
            isStarted: roomData.isStarted || false,
            isFull: roomData.isFull || false,
            creator: roomData.creator || safeCreator.username || 'unknown',
            turnTime: roomData.turnTime || 30,
            assignProfessions: roomData.assignProfessions || false,
            players: roomData.players || [{
                id: safeCreator.id || 'creator-id',
                username: safeCreator.username || 'creator',
                name: safeCreator.username || 'creator',
                isHost: true
            }],
            createdAt: roomData.createdAt || new Date().toISOString()
        };
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-–∫–æ–º–Ω–∞—Ç—ã
     * @private
     */
    _createMockRoom(roomData, creator) {
        // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å creator
        const safeCreator = creator || {};
        
        const newRoom = this._createMockRoomObject({
            id: 'mock-room-' + Date.now(),
            name: roomData.name || '–ù–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞',
            maxPlayers: roomData.maxPlayers || 4,
            playerCount: 1,
            creator: safeCreator.username || 'unknown',
            turnTime: roomData.turnTime || 30,
            assignProfessions: roomData.assignProfessions || false,
            players: [{
                id: safeCreator.id || 'creator-id',
                username: safeCreator.username || 'creator',
                name: safeCreator.username || 'creator',
                isHost: true
            }]
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        this.mockRooms.unshift(newRoom);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        this._savePersistedRooms();
        
        console.log('‚úÖ RoomService: –ú–æ–∫-–∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', newRoom.name);
        
        return newRoom;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ API
     * @private
     */
    async _createRoomViaAPI(roomData, creator) {
        const response = await fetch(this.config.baseUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ roomData, creator })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
        }

        return data.data;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã
     * @private
     */
    async _sendRoomCreatedNotification(room, creator) {
        try {
            if (window.pushClient && typeof window.pushClient.sendBroadcastPush === 'function') {
                await window.pushClient.sendBroadcastPush('room_created', {
                    roomId: room.id,
                    roomName: room.name,
                    creator: creator.username,
                    playerCount: room.playerCount,
                    maxPlayers: room.maxPlayers,
                    status: room.status,
                    timestamp: new Date().toISOString()
                }, true);
                
                console.log('üì° RoomService: Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            }
        } catch (error) {
            console.error('‚ö†Ô∏è RoomService: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        }
    }

    /**
     * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
     * @param {string} roomId
     * @param {Object} player
     * @returns {Promise<Object>}
     */
    async joinRoom(roomId, player) {
        try {
            console.log('üè† RoomService: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ:', roomId);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
            if (this.config.useMockData) {
                return this._joinMockRoom(roomId, player);
            }

            // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ API
            const room = await this._joinRoomViaAPI(roomId, player);
            this.state.currentRoom = room;
            
            return room;

        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
            
            // Fallback –Ω–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
            if (this.config.useMockData) {
                return this._joinMockRoom(roomId, player);
            }
            
            throw error;
        }
    }

    /**
     * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –º–æ–∫-–∫–æ–º–Ω–∞—Ç–µ
     * @private
     */
    _joinMockRoom(roomId, player) {
        const room = this.mockRooms.find(r => r.id === roomId);
        if (!room) {
            throw new Error('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        if (room.playerCount >= room.maxPlayers) {
            throw new Error('–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫
        const existingPlayer = room.players.find(p => p.userId === player.userId);
        if (existingPlayer) {
            console.log('‚úÖ RoomService: –ò–≥—Ä–æ–∫ —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ');
            this.state.currentRoom = room;
            return room;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        const newPlayer = {
            id: 'player-' + Date.now(),
            userId: player.userId,
            username: player.username,
            name: player.name,
            isHost: false
        };

        room.players.push(newPlayer);
        room.playerCount = room.players.length;
        
        this.state.currentRoom = room;
        this._savePersistedRooms();
        
        console.log('‚úÖ RoomService: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –º–æ–∫-–∫–æ–º–Ω–∞—Ç–µ —É—Å–ø–µ—à–Ω–æ:', room.name);
        
        return room;
    }

    /**
     * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ —á–µ—Ä–µ–∑ API
     * @private
     */
    async _joinRoomViaAPI(roomId, player) {
        const response = await fetch(`${this.config.baseUrl}/${roomId}/join`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ player })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ');
        }

        return data.data;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–Ω–∞—Ç
     * @returns {Promise<Object>}
     */
    async getStats() {
        try {
            console.log('üè† RoomService: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
            if (this.config.useMockData) {
                return this._getMockStats();
            }

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å API
            const stats = await this._fetchStatsFromAPI();
            return stats;

        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            
            // Fallback –Ω–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
            if (this.config.useMockData) {
                return this._getMockStats();
            }
            
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∫-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @private
     */
    _getMockStats() {
        const stats = {
            totalRooms: this.mockRooms.length,
            activeRooms: this.mockRooms.filter(r => !r.isStarted).length,
            gamesStarted: this.mockRooms.filter(r => r.isStarted).length,
            playersOnline: this.mockRooms.reduce((sum, r) => sum + r.playerCount, 0)
        };
        
        console.log('üè† RoomService: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–∫-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        return stats;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å API
     * @private
     */
    async _fetchStatsFromAPI() {
        const response = await fetch(`${this.config.baseUrl}/stats`, {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' }
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }

        return data.data;
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
     * @param {string} roomId
     * @param {string} userId
     * @returns {Promise<Object>}
     */
    async startGame(roomId, userId) {
        try {
            console.log('üè† RoomService: –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ:', roomId);
            
            const response = await fetch(`${this.config.baseUrl}/${roomId}/start`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId })
            });

            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã');
            }

            this.state.currentRoom = data.data;
            return data.data;
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', error);
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} roomId
     * @param {Object} updates
     * @returns {Promise<Object>}
     */
    async updateRoom(roomId, updates) {
        try {
            console.log('üè† RoomService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', roomId);
            
            const response = await fetch(`${this.config.baseUrl}/${roomId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ updates })
            });

            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
            }

            this.state.currentRoom = data.data;
            return data.data;
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            throw error;
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} roomId
     * @returns {Promise<boolean>}
     */
    async deleteRoom(roomId) {
        try {
            console.log('üè† RoomService: –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', roomId);
            
            const response = await fetch(`${this.config.baseUrl}/${roomId}`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' }
            });

            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
            }

            if (this.state.currentRoom && this.state.currentRoom.id === roomId) {
                this.state.currentRoom = null;
            }
            
            return true;
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
     * @param {string} roomId
     * @param {Object} playerData
     * @returns {Promise<Object>}
     */
    async updatePlayerInRoom(roomId, playerData) {
        try {
            console.log('üè† RoomService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ:', roomId);
            
            // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            if (this.config.useMockData || this.useMockData) {
                console.log('üè† RoomService: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–∫-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞');
                return this._updatePlayerInMockRoom(roomId, playerData);
            }
            
            const response = await fetch(`${this.config.baseUrl}/${roomId}/player`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(playerData)
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞');
            }

            return data.data;
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', error);
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –º–æ–∫-–∫–æ–º–Ω–∞—Ç–µ
     * @param {string} roomId
     * @param {Object} playerData
     * @returns {Promise<Object>}
     * @private
     */
    _updatePlayerInMockRoom(roomId, playerData) {
        console.log('üè† RoomService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –º–æ–∫-–∫–æ–º–Ω–∞—Ç–µ:', roomId, playerData);
        
        const room = this.mockRooms.find(r => r.id === roomId);
        if (!room) {
            throw new Error('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
        const playerIndex = room.players.findIndex(p => p.id === playerData.id || p.username === playerData.username);
        if (playerIndex === -1) {
            throw new Error('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        room.players[playerIndex] = { ...room.players[playerIndex], ...playerData };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
        this._savePersistedRooms();
        
        console.log('‚úÖ RoomService: –ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –º–æ–∫-–∫–æ–º–Ω–∞—Ç–µ');
        return {
            success: true,
            player: room.players[playerIndex],
            room: room
        };
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    getCurrentRoom() { return this.state.currentRoom; }
    setCurrentRoom(room) { this.state.currentRoom = room; }
    clearCurrentRoom() { this.state.currentRoom = null; }
    getCachedRooms() { return this.state.rooms; }

    // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    isHost(userId, room = null) {
        const targetRoom = room || this.state.currentRoom;
        if (!targetRoom || !targetRoom.players) return false;
        
        const hostPlayer = targetRoom.players.find(p => p.isHost);
        return hostPlayer && hostPlayer.userId === userId;
    }

    getPlayer(userId, room = null) {
        const targetRoom = room || this.state.currentRoom;
        if (!targetRoom || !targetRoom.players) return null;
        
        return targetRoom.players.find(p => p.userId === userId) || null;
    }

    canJoinRoom(userId, room) {
        if (!room || !userId) return false;
        if (room.isFull || room.isStarted) return false;
        
        const existingPlayer = this.getPlayer(userId, room);
        return !existingPlayer;
    }

    canStartGame(userId, room = null) {
        const targetRoom = room || this.state.currentRoom;
        if (!targetRoom || !userId) return false;
        
        return this.isHost(userId, targetRoom) && 
               !targetRoom.isStarted && 
               targetRoom.canStart;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    clearCache() {
        this.state.rooms = [];
        this.state.lastUpdate = null;
        this.state.currentRoom = null;
        console.log('üßπ RoomService: –ö—ç—à –æ—á–∏—â–µ–Ω');
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
     */
    clearPersistedData() {
        localStorage.removeItem(this.config.localStorageKey);
        console.log('üßπ RoomService: –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof window !== 'undefined') {
    window.RoomService = RoomService;
}

// Version: 1760438000 - Refactored v2.0.0