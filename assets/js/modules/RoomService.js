/**
 * RoomService v2.0.0 - Refactored
 * –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–æ–≤—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
 * - –£—Å—Ç—Ä–∞–Ω–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç
 * - –£–ª—É—á—à–µ–Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
 * - –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 * - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
 */
class RoomService {
    constructor() {
        this._initializeConfiguration();
        this._initializeState();
        this._initializeData();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
     * @private
     */
    _initializeConfiguration() {
        const isLocal = this._isLocalEnvironment();
        
        this.config = {
            isLocal,
            baseUrl: isLocal ? 'http://localhost:3002/api/rooms' : 'https://am8-production.up.railway.app/api/rooms',
            useMockData: false, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º
            localStorageKey: 'aura_money_dynamic_rooms',
            cacheTimeout: 120000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 120 —Å–µ–∫—É–Ω–¥ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
            maxRetries: 3,
            useDynamicRooms: false // –û—Ç–∫–ª—é—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–Ω–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é –ë–î
        };
        
        // –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        this.useMockData = false;

        console.log(`üè† RoomService v2.0.0: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ${isLocal ? '–ª–æ–∫–∞–ª—å–Ω–æ–≥–æ' : '–ø—Ä–æ–¥–∞–∫—à–Ω'} —Ä–µ–∂–∏–º–∞`);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
     * @private
     */
    _initializeState() {
        this.state = {
            currentRoom: null,
            rooms: [],
            lastUpdate: null,
            isLoading: false,
            error: null
        };
        this.roomsCacheKey = 'am_rooms_cache_v1';
        
        // Rate limiting –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è HTTP 429 - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.requestQueue = {
            lastRequest: 0,
            minInterval: 10000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
            backoffMultiplier: 1.3, // –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π —Ä–æ—Å—Ç backoff
            maxBackoff: 15000, // –£–º–µ–Ω—å—à–∞–µ–º –º–∞–∫—Å–∏–º—É–º –¥–æ 15 —Å–µ–∫—É–Ω–¥
            currentBackoff: 0,
            rateLimitedUntil: 0,
            // –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
            priorities: {
                CRITICAL: 0,    // –ò–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–±—Ä–æ—Å–æ–∫, —Ö–æ–¥)
                HIGH: 1,        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã, –±–∞–Ω–∫
                NORMAL: 2,      // –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                LOW: 3          // –§–æ–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            }
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–º–æ–∫-–¥–∞–Ω–Ω—ã–µ + localStorage)
     * @private
     */
    _initializeData() {
        if (this.config.useMockData) {
            this._initializeMockData();
            this._loadPersistedRooms();
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
     * @private
     */
    _isLocalEnvironment() {
        return window.location.hostname === 'localhost' || 
               window.location.hostname === '127.0.0.1' ||
               window.location.hostname === '0.0.0.0';
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö
     * @private
     */
    _initializeMockData() {
        const now = Date.now();
        
        // –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–Ω–∞—Ç—ã - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–ª—è –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        this.mockRooms = [
            this._createMockRoomObject({
                id: 'room-demo-1',
                name: '–î–µ–º–æ –∫–æ–º–Ω–∞—Ç–∞ 1',
                maxPlayers: 4,
                playerCount: 2,
                creator: 'demo_user',
                turnTime: 30,
                assignProfessions: true,
                players: [
                    { id: 'p1', username: 'demo_user', name: 'demo_user', isHost: true },
                    { id: 'p2', username: 'player1', name: 'player1', isHost: false }
                ],
                createdAt: new Date(now - 60000).toISOString()
            }),
            this._createMockRoomObject({
                id: 'room-tournament-1',
                name: '–¢—É—Ä–Ω–∏—Ä–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞',
                maxPlayers: 6,
                playerCount: 3,
                creator: 'tournament_master',
                turnTime: 60,
                assignProfessions: false,
                players: [
                    { id: 'p3', username: 'tournament_master', name: 'tournament_master', isHost: true },
                    { id: 'p4', username: 'player2', name: 'player2', isHost: false },
                    { id: 'p5', username: 'player3', name: 'player3', isHost: false }
                ],
                createdAt: new Date(now - 30000).toISOString()
            }),
            this._createMockRoomObject({
                id: 'room-public-1',
                name: '–ü—É–±–ª–∏—á–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞',
                maxPlayers: 4,
                playerCount: 1,
                creator: 'public_host',
                turnTime: 45,
                assignProfessions: true,
                players: [
                    { id: 'p6', username: 'public_host', name: 'public_host', isHost: true }
                ],
                createdAt: new Date(now - 120000).toISOString()
            }),
            this._createMockRoomObject({
                id: 'room-fast-1',
                name: '–ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞',
                maxPlayers: 4,
                playerCount: 3,
                creator: 'speed_player',
                turnTime: 15,
                assignProfessions: false,
                players: [
                    { id: 'p7', username: 'speed_player', name: 'speed_player', isHost: true },
                    { id: 'p8', username: 'fast_user1', name: 'fast_user1', isHost: false },
                    { id: 'p9', username: 'fast_user2', name: 'fast_user2', isHost: false }
                ],
                createdAt: new Date(now - 90000).toISOString()
            })
        ];

        console.log('üè† RoomService: –ë–∞–∑–æ–≤—ã–µ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã (4 –∫–æ–º–Ω–∞—Ç—ã)');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –º–æ–∫-–∫–æ–º–Ω–∞—Ç—ã —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
     * @private
     */
    _createMockRoom(roomData) {
        return {
            id: roomData.id,
            name: roomData.name,
            maxPlayers: roomData.maxPlayers || 4,
            playerCount: roomData.playerCount || 0,
            status: roomData.status || 'waiting',
            isStarted: roomData.isStarted || false,
            isFull: roomData.isFull || false,
            creator: roomData.creator || 'unknown',
            turnTime: roomData.turnTime || 30,
            assignProfessions: roomData.assignProfessions || false,
            players: roomData.players || [],
            createdAt: roomData.createdAt || new Date().toISOString()
        };
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –∏–∑ localStorage
     * @private
     */
    _loadPersistedRooms() {
        // –ï—Å–ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–Ω–∞—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        if (!this.config.useDynamicRooms) {
            console.log('üìÇ RoomService: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–Ω–∞—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã');
            return;
        }

        try {
            const saved = localStorage.getItem(this.config.localStorageKey);
            if (!saved) {
                console.log('üìÇ RoomService: –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –≤ localStorage');
                return;
            }

            const persistedRooms = JSON.parse(saved);
            if (!Array.isArray(persistedRooms)) {
                console.warn('‚ö†Ô∏è RoomService: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç');
                return;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∫–æ–º–Ω–∞—Ç—ã (–ø–æ ID)
            const existingIds = new Set(this.mockRooms.map(room => room.id));
            const newRooms = persistedRooms.filter(room => !existingIds.has(room.id));

            if (newRooms.length > 0) {
                this.mockRooms = [...newRooms, ...this.mockRooms];
                console.log(`üìÇ RoomService: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${newRooms.length} –Ω–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç –∏–∑ localStorage`);
            } else {
                console.log('üìÇ RoomService: –ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
            }

        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç:', error);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–Ω–∞—Ç –≤ localStorage
     * @private
     */
    _savePersistedRooms() {
        try {
            const dynamicRooms = this.mockRooms.filter(room => 
                room.id.startsWith('mock-room-')
            );
            
            localStorage.setItem(this.config.localStorageKey, JSON.stringify(dynamicRooms));
            console.log(`üíæ RoomService: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${dynamicRooms.length} –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–Ω–∞—Ç`);
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
     * @returns {Promise<Array>}
     */
    async getAllRooms() {
        try {
            console.log('üè† RoomService: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
            if (this.config.useMockData) {
                return this._getMockRooms();
            }

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å API
            let rooms = await this._fetchRoomsFromAPI();
            if (!rooms || rooms.length === 0) {
                const cached = this._readRoomsCache();
                if (cached && cached.length) rooms = cached;
            }
            this.state.rooms = rooms;
            this.state.lastUpdate = Date.now();
            this._writeRoomsCache(rooms);
            return rooms;

        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:', error);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ rate limiting
            const isRateLimited = error.message && error.message.includes('Rate limited');
            
            if (isRateLimited) {
                console.log('‚è≥ RoomService: Rate limited, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –≤–º–µ—Å—Ç–æ fallback');
            }
            
            // –ü—Ä–æ–±—É–µ–º –∫—ç—à
            const cached = this._readRoomsCache();
            if (cached && cached.length) {
                console.log('üóÇÔ∏è RoomService: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –∫–æ–º–Ω–∞—Ç –∏–∑ localStorage');
                this.state.rooms = cached;
                this.state.lastUpdate = Date.now();
                return cached;
            }
            
            // Fallback –Ω–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∞ –∏ —ç—Ç–æ –Ω–µ rate limiting
            if (!isRateLimited) {
                console.log('üîÑ RoomService: Fallback –Ω–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API');
                return this._getMockRooms();
            } else {
                console.log('üö´ RoomService: Rate limited –∏ –Ω–µ—Ç –∫—ç—à–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
                return [];
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∫-–∫–æ–º–Ω–∞—Ç
     * @private
     */
    _getMockRooms() {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–Ω–∞—Ç—ã –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –≤–≤–µ—Ä—Ö—É)
        const sortedRooms = [...this.mockRooms].sort((a, b) => 
            new Date(b.createdAt) - new Date(a.createdAt)
        );
        
        this.state.rooms = sortedRooms;
        this.state.lastUpdate = Date.now();
        this._writeRoomsCache(sortedRooms);
        
        return sortedRooms;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç —Å API —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç rate limiting
     * @private
     */
    async _fetchRoomsFromAPI() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π rate limiting –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        await this._waitForRateLimit('NORMAL');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π rate limiter –¥–ª—è RoomService
        if (window.CommonUtils && !window.CommonUtils.canMakeRoomsRequest()) {
            console.log('üö´ RoomService: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ rooms –∏–∑-–∑–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ rate limiting');
            throw new Error('Rate limited by global limiter');
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ pending –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º limiter
        if (window.CommonUtils) {
            window.CommonUtils.roomServiceLimiter.setRequestPending('rooms');
        }
        
        try {
            // –ì–ª–æ–±–∞–ª—å–Ω—ã–π limiter —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª –∏ –¥–∞–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é
            const response = await fetch(this.config.baseUrl, {
                method: 'GET',
            headers: { 'Content-Type': 'application/json' }
            });

            if (!response.ok) {
                if (response.status === 429) {
                    const retryAfter = this._parseRetryAfter(response);
                    const backoff = this._increaseBackoff(retryAfter);
                    console.warn('‚ö†Ô∏è RoomService: HTTP 429, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ', backoff, '–º—Å');
                    throw new Error(`Rate limited! Retry after ${backoff}ms`);
                }
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º backoff –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
            this._resetBackoff();
            const data = await response.json();
            
        if (!data.success) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç');
            }
            
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –∫–ª–∏–µ–Ω—Ç–∞
        return data.data.map(room => ({
            id: room.id,
            name: room.name,
            description: room.description || '',
            maxPlayers: room.maxPlayers,
            playerCount: room.playerCount,
            status: room.status,
            isStarted: room.isStarted,
            isFull: room.isFull,
            creator: room.creator,
            turnTime: room.turnTime,
            assignProfessions: room.assignProfessions,
            players: room.players || [],
            createdAt: room.createdAt,
            updatedAt: room.updatedAt
        }));
        } finally {
            // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ pending –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º limiter
            if (window.CommonUtils) {
                window.CommonUtils.roomServiceLimiter.clearRequestPending('rooms');
            }
        }
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
     * @param {string} priority - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–ø—Ä–æ—Å–∞
     * @private
     */
    async _waitForRateLimit(priority = 'NORMAL') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        if (!this._canMakeRequest(priority)) {
            const priorityLevel = this.requestQueue.priorities[priority] || 2;
            const baseInterval = this.requestQueue.minInterval;
            const priorityMultiplier = Math.pow(2, priorityLevel);
            const requiredInterval = baseInterval * priorityMultiplier;
            const now = Date.now();
            const waitTime = requiredInterval - (now - this.requestQueue.lastRequest);
            
            if (waitTime > 0) {
                console.log(`‚è≥ RoomService: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ${priority}, –æ–∂–∏–¥–∞–Ω–∏–µ ${waitTime}–º—Å`);
                await new Promise(resolve => setTimeout(resolve, waitTime));
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        const now = Date.now();
        const nextAllowedByRateLimit = this.requestQueue.rateLimitedUntil || 0;
        
        if (now < nextAllowedByRateLimit) {
            const waitTime = nextAllowedByRateLimit - now;
            
            // –î–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∂–¥–µ–º –º–µ–Ω—å—à–µ
            if (priority === 'CRITICAL' && waitTime > 10000) {
                console.log(`‚ö†Ô∏è RoomService: –ö—Ä–∏—Ç–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π rate limit (${waitTime}–º—Å)`);
            } else if (waitTime <= 5000) {
                console.log(`‚è≥ RoomService: –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ ${waitTime}–º—Å`);
                await new Promise(resolve => setTimeout(resolve, waitTime));
            } else {
                console.log(`‚è≥ RoomService: Rate limited. –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${waitTime}–º—Å`);
                this._scheduleRetry(waitTime);
                throw new Error(`Rate limited. –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${waitTime}–º—Å`);
            }
        }

        this.requestQueue.lastRequest = Date.now();
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –ø–æ—Å–ª–µ –ª–∏–º–∏—Ç–∞
     * @private
     */
    _scheduleRetry(waitMs) {
        if (this._retryTimer) {
            clearTimeout(this._retryTimer);
            this._retryTimer = null;
        }
        this._retryTimer = setTimeout(() => {
            this._retryTimer = null;
            try { this.refreshRoomsList?.(); } catch (_) {}
            try { this.getStats?.(); } catch (_) {}
        }, Math.max(0, waitMs));
    }

    /**
     * –£–≤–µ–ª–∏—á–µ–Ω–∏–µ backoff –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
     * @private
     */
    _increaseBackoff(preferredMs = 0) {
        let newBackoff = 0;
        
        if (preferredMs && preferredMs > 0) {
            // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —É–∫–∞–∑–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ‚Äî –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
            const maxServerWait = 60000; // –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            const minServerWait = 2000;  // –ú–∏–Ω–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            newBackoff = Math.min(Math.max(preferredMs, minServerWait), maxServerWait);
            console.log(`üîÑ RoomService: –°–µ—Ä–≤–µ—Ä –∑–∞–ø—Ä–æ—Å–∏–ª ${preferredMs}–º—Å, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ ${newBackoff}–º—Å`);
        } else if (this.requestQueue.currentBackoff === 0) {
            // –ü–µ—Ä–≤–∞—è –æ—à–∏–±–∫–∞ - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            newBackoff = this.requestQueue.minInterval;
        } else {
            // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
            newBackoff = Math.min(
                this.requestQueue.currentBackoff * this.requestQueue.backoffMultiplier,
                this.requestQueue.maxBackoff
            );
        }

        this.requestQueue.currentBackoff = newBackoff;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è rate limit —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        const newRateLimitedUntil = Date.now() + newBackoff;
        if (newRateLimitedUntil > this.requestQueue.rateLimitedUntil) {
            this.requestQueue.rateLimitedUntil = newRateLimitedUntil;
        }
        
        return this.requestQueue.currentBackoff;
    }

    _resetBackoff() {
        this.requestQueue.currentBackoff = 0;
        this.requestQueue.rateLimitedUntil = 0;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
     * @param {string} priority - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–ø—Ä–æ—Å–∞
     * @returns {boolean}
     * @private
     */
    _canMakeRequest(priority = 'NORMAL') {
        const now = Date.now();
        const priorityLevel = this.requestQueue.priorities[priority] || 2;
        
        // –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã (—Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π)
        if (priorityLevel === 0) {
            const minCriticalDelay = 500; // 500–º—Å –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if (now - this.requestQueue.lastRequest < minCriticalDelay) {
                console.log(`‚è≥ RoomService: –ö—Ä–∏—Ç–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ ${minCriticalDelay}–º—Å`);
                return false;
            }
            return true;
        }
        
        // –û–±—ã—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        const baseInterval = this.requestQueue.minInterval;
        const priorityMultiplier = Math.pow(2, priorityLevel); // 1, 2, 4, 8
        const requiredInterval = baseInterval * priorityMultiplier;
        
        if (now - this.requestQueue.lastRequest < requiredInterval) {
            console.log(`‚è≥ RoomService: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ${priority} (${priorityLevel}), —Ç—Ä–µ–±—É–µ—Ç—Å—è ${requiredInterval}–º—Å`);
            return false;
        }
        
        return true;
    }

    _parseRetryAfter(response) {
        const header = response.headers?.get?.('Retry-After') || response.headers?.get?.('retry-after');
        if (!header) {
            return 0;
        }

        const retrySeconds = Number(header);
        if (Number.isNaN(retrySeconds)) {
            return 0;
        }

        return retrySeconds * 1000;
    }

    // –ö–≠–® –∫–æ–º–Ω–∞—Ç
    _writeRoomsCache(rooms) {
        try { localStorage.setItem(this.roomsCacheKey, JSON.stringify(rooms || [])); } catch (_) {}
    }
    _readRoomsCache() {
        try { const raw = localStorage.getItem(this.roomsCacheKey); return raw ? JSON.parse(raw) : []; } catch (_) { return []; }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ ID
     * @param {string} roomId
     * @returns {Promise<Object>}
     */
    async getRoomById(roomId) {
        try {
            console.log('üè† RoomService: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ ID:', roomId);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
            if (this.config.useMockData) {
                return this._findMockRoomById(roomId);
            }

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å API
            const room = await this._fetchRoomFromAPI(roomId);
            return room;

        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            
            // Fallback –Ω–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
            if (this.config.useMockData) {
                return this._findMockRoomById(roomId);
            }
            
            return null;
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –º–æ–∫-–∫–æ–º–Ω–∞—Ç—ã –ø–æ ID
     * @private
     */
    _findMockRoomById(roomId) {
        const room = this.mockRooms.find(r => r.id === roomId);
        if (room) {
            console.log('‚úÖ RoomService: –ö–æ–º–Ω–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö:', room.name);
            return room;
        } else {
            console.warn('‚ö†Ô∏è RoomService: –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö');
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å API
     * @private
     */
    async _fetchRoomFromAPI(roomId) {
        await this._waitForRateLimit();

        const response = await fetch(`${this.config.baseUrl}/${roomId}`, {
                method: 'GET',
            headers: { 'Content-Type': 'application/json' }
            });

            if (!response.ok) {
                if (response.status === 429) {
                    const retryAfter = this._parseRetryAfter(response);
                    const backoff = this._increaseBackoff(retryAfter);
                    console.warn('‚ö†Ô∏è RoomService: HTTP 429 –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ', backoff, '–º—Å');
                    throw new Error(`Rate limited! Retry after ${backoff}ms`);
                }
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            this._resetBackoff();

            const data = await response.json();
            
        if (!data.success) {
                throw new Error(data.message || '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –∫–ª–∏–µ–Ω—Ç–∞
        const room = data.data;
        return {
            id: room.id,
            name: room.name,
            description: room.description || '',
            maxPlayers: room.maxPlayers,
            playerCount: room.playerCount,
            status: room.status,
            isStarted: room.isStarted,
            isFull: room.isFull,
            creator: room.creator,
            turnTime: room.turnTime,
            assignProfessions: room.assignProfessions,
            players: room.players || [],
            createdAt: room.createdAt,
            updatedAt: room.updatedAt
        };
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
     * @param {Object} roomData
     * @param {Object} creator
     * @returns {Promise<Object>}
     */
    async createRoom(roomData, creator) {
        try {
            console.log('üè† RoomService: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', roomData.name);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
            if (this.config.useMockData) {
                return this._createMockRoom(roomData, creator);
            }

            // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ API
            const room = await this._createRoomViaAPI(roomData, creator);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await this._sendRoomCreatedNotification(room, creator);
            
            return room;

        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            
            // Fallback –Ω–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
            if (this.config.useMockData) {
                console.log('üîÑ RoomService: Fallback –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-–∫–æ–º–Ω–∞—Ç—ã');
                return this._createMockRoom(roomData, creator);
            }
            
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –º–æ–∫-–∫–æ–º–Ω–∞—Ç—ã
     * @param {Object} roomData - –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
     * @param {Object} creator - –°–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Object}
     * @private
     */
    _createMockRoomObject(roomData, creator) {
        const safeCreator = creator || {};
        
        return {
            id: roomData.id || 'mock-room-' + Date.now(),
            name: roomData.name || '–ù–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞',
            maxPlayers: roomData.maxPlayers || 4,
            playerCount: roomData.playerCount || 1,
            status: roomData.status || 'waiting',
            isStarted: roomData.isStarted || false,
            isFull: roomData.isFull || false,
            creator: roomData.creator || safeCreator.username || 'unknown',
            turnTime: roomData.turnTime || 30,
            assignProfessions: roomData.assignProfessions || false,
            players: roomData.players || [{
                id: safeCreator.id || 'creator-id',
                username: safeCreator.username || 'creator',
                name: safeCreator.username || 'creator',
                isHost: true
            }],
            createdAt: roomData.createdAt || new Date().toISOString()
        };
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-–∫–æ–º–Ω–∞—Ç—ã
     * @private
     */
    _createMockRoom(roomData, creator) {
        // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å creator
        const safeCreator = creator || {};
        
        const newRoom = this._createMockRoomObject({
            id: 'mock-room-' + Date.now(),
            name: roomData.name || '–ù–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞',
            maxPlayers: roomData.maxPlayers || 4,
            playerCount: 1,
            creator: safeCreator.username || 'unknown',
            turnTime: roomData.turnTime || 30,
            assignProfessions: roomData.assignProfessions || false,
            players: [{
                id: safeCreator.id || 'creator-id',
                username: safeCreator.username || 'creator',
                name: safeCreator.username || 'creator',
                isHost: true
            }]
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        this.mockRooms.unshift(newRoom);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        this._savePersistedRooms();
        
        console.log('‚úÖ RoomService: –ú–æ–∫-–∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', newRoom.name);
        
        return newRoom;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ API —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç rate limiting
     * @private
     */
    async _createRoomViaAPI(roomData, creator) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
        await this._waitForRateLimit();
        
        const requestData = {
            name: roomData.name,
            description: roomData.description || '',
            maxPlayers: roomData.maxPlayers || 4,
            turnTime: roomData.turnTime || 30,
            assignProfessions: roomData.assignProfessions || false,
            creator: creator.username || creator.name || 'unknown'
        };

        const response = await fetch(this.config.baseUrl, {
                method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(requestData)
        });

        if (!response.ok) {
            if (response.status === 429) {
                const retryAfter = this._parseRetryAfter(response);
                const backoff = this._increaseBackoff(retryAfter);
                console.warn('‚ö†Ô∏è RoomService: HTTP 429 –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ', backoff, '–º—Å');
                throw new Error(`Rate limited! Retry after ${backoff}ms`);
            }
        }

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º backoff –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
        this._resetBackoff();
        const data = await response.json();
            
        if (!data.success) {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –∫–ª–∏–µ–Ω—Ç–∞
        const room = data.data;
        return {
            id: room.id,
            name: room.name,
            description: room.description || '',
            maxPlayers: room.maxPlayers,
            playerCount: room.playerCount,
            status: room.status,
            isStarted: room.isStarted,
            isFull: room.isFull,
            creator: room.creator,
            turnTime: room.turnTime,
            assignProfessions: room.assignProfessions,
            players: room.players || [],
            createdAt: room.createdAt,
            updatedAt: room.updatedAt
        };
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã
     * @private
     */
    async _sendRoomCreatedNotification(room, creator) {
                try {
                    if (window.pushClient && typeof window.pushClient.sendBroadcastPush === 'function') {
                        await window.pushClient.sendBroadcastPush('room_created', {
                    roomId: room.id,
                    roomName: room.name,
                            creator: creator.username,
                    playerCount: room.playerCount,
                    maxPlayers: room.maxPlayers,
                    status: room.status,
                            timestamp: new Date().toISOString()
                }, true);
                
                console.log('üì° RoomService: Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            }
        } catch (error) {
            console.error('‚ö†Ô∏è RoomService: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        }
    }

    /**
     * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
     * @param {string} roomId
     * @param {Object} player
     * @returns {Promise<Object>}
     */
    async joinRoom(roomId, player) {
        try {
            console.log('üè† RoomService: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ:', roomId);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
            if (this.config.useMockData) {
                return this._joinMockRoom(roomId, player);
            }

            // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ API
            const room = await this._joinRoomViaAPI(roomId, player);
            this.state.currentRoom = room;
            
            return room;

        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
            
            // Fallback –Ω–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
            if (this.config.useMockData) {
                return this._joinMockRoom(roomId, player);
            }
            
            throw error;
        }
    }

    /**
     * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –º–æ–∫-–∫–æ–º–Ω–∞—Ç–µ
     * @private
     */
    _joinMockRoom(roomId, player) {
        const room = this.mockRooms.find(r => r.id === roomId);
        if (!room) {
            throw new Error('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        if (room.playerCount >= room.maxPlayers) {
            throw new Error('–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫
        const existingPlayer = room.players.find(p => p.userId === player.userId);
        if (existingPlayer) {
            console.log('‚úÖ RoomService: –ò–≥—Ä–æ–∫ —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ');
            this.state.currentRoom = room;
            return room;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        const newPlayer = {
            id: 'player-' + Date.now(),
            userId: player.userId,
            username: player.username,
            name: player.name,
            isHost: false
        };

        room.players.push(newPlayer);
        room.playerCount = room.players.length;
        
        this.state.currentRoom = room;
        this._savePersistedRooms();
        
        console.log('‚úÖ RoomService: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –º–æ–∫-–∫–æ–º–Ω–∞—Ç–µ —É—Å–ø–µ—à–Ω–æ:', room.name);
        
        return room;
    }

    /**
     * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ —á–µ—Ä–µ–∑ API
     * @private
     */
    async _joinRoomViaAPI(roomId, player) {
        await this._waitForRateLimit();

        const requestData = {
            player: {
                userId: player.userId,
                username: player.username || player.name || 'unknown',
                name: player.name || player.username || 'unknown',
                avatar: player.avatar || '',
                token: player.token || '',
                dream: player.dream || '',
                dreamCost: player.dreamCost || 0
            }
        };

        const response = await fetch(`${this.config.baseUrl}/${roomId}/join`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(requestData)
        });

        if (!response.ok) {
            if (response.status === 429) {
                const retryAfter = this._parseRetryAfter(response);
                const backoff = this._increaseBackoff(retryAfter);
                console.warn('‚ö†Ô∏è RoomService: HTTP 429 –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ', backoff, '–º—Å');
                throw new Error(`Rate limited! Retry after ${backoff}ms`);
            }
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        this._resetBackoff();

        const data = await response.json();

        if (!data.success) {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ');
        }

        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
        return await this.getRoomById(roomId);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–Ω–∞—Ç
     * @returns {Promise<Object>}
     */
    async getStats() {
        try {
            console.log('üè† RoomService: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
            if (this.config.useMockData) {
                return this._getMockStats();
            }

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å API
            const stats = await this._fetchStatsFromAPI();
            return stats;

        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ rate limiting
            const isRateLimited = error.message && error.message.includes('Rate limited');
            
            if (isRateLimited) {
                console.log('‚è≥ RoomService: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ rate limited, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            }
            
            // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–æ–ª–±—ç–∫, —á—Ç–æ–±—ã UI –Ω–µ –ª–æ–º–∞–ª—Å—è
            try {
                return this._getMockStats();
            } catch(_) {
                return { totalRooms: this.state.rooms?.length || 0, activeRooms: 0, gamesStarted: 0, playersOnline: 0 };
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∫-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @private
     */
    _getMockStats() {
        const stats = {
            totalRooms: this.mockRooms.length,
            activeRooms: this.mockRooms.filter(r => !r.isStarted).length,
            gamesStarted: this.mockRooms.filter(r => r.isStarted).length,
            playersOnline: this.mockRooms.reduce((sum, r) => sum + r.playerCount, 0)
        };
        
        console.log('üè† RoomService: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–∫-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        return stats;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å API —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç rate limiting
     * @private
     */
    async _fetchStatsFromAPI() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π rate limiting –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        await this._waitForRateLimit('LOW');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π rate limiter –¥–ª—è RoomService
        if (window.CommonUtils && !window.CommonUtils.canMakeStatsRequest()) {
            console.log('üö´ RoomService: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ stats –∏–∑-–∑–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ rate limiting');
            throw new Error('Rate limited by global limiter');
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ pending –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º limiter
        if (window.CommonUtils) {
            window.CommonUtils.roomServiceLimiter.setRequestPending('stats');
        }
        
        try {
            // –ì–ª–æ–±–∞–ª—å–Ω—ã–π limiter —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª –∏ –¥–∞–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π endpoint –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            const baseUrl = this.config.baseUrl.replace('/api/rooms', '/api/stats');
            
            const response = await fetch(baseUrl, {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' }
        });

        if (!response.ok) {
            if (response.status === 429) {
                const retryAfter = this._parseRetryAfter(response);
                const backoff = this._increaseBackoff(retryAfter);
                console.warn('‚ö†Ô∏è RoomService: HTTP 429 –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ', backoff, '–º—Å');
                throw new Error(`Rate limited! Retry after ${backoff}ms`);
            }
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º backoff –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
        this._resetBackoff();
        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –∫–ª–∏–µ–Ω—Ç–∞
        const serverStats = data.data;
        return {
            totalRooms: serverStats.totalRooms || 0,
            activeRooms: serverStats.activeRooms || 0,
            gamesInProgress: serverStats.gamesInProgress || 0,
            playersOnline: serverStats.playersOnline || 0,
            totalUsers: serverStats.totalUsers || 0
        };
        } finally {
            // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ pending –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º limiter
            if (window.CommonUtils) {
                window.CommonUtils.roomServiceLimiter.clearRequestPending('stats');
            }
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
     * @param {string} roomId
     * @param {string} userId
     * @returns {Promise<Object>}
     */
    async startGame(roomId, userId) {
        try {
            console.log('üè† RoomService: –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ:', roomId);
            await this._waitForRateLimit('CRITICAL');
            
            const response = await fetch(`${this.config.baseUrl}/${roomId}/start`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId })
            });

            if (!response.ok) {
                if (response.status === 429) {
                    const retryAfter = this._parseRetryAfter(response);
                    const backoff = this._increaseBackoff(retryAfter);
                    console.warn('‚ö†Ô∏è RoomService: HTTP 429 –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ', backoff, '–º—Å');
                    throw new Error(`Rate limited! Retry after ${backoff}ms`);
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                let errorMessage = `HTTP error! status: ${response.status}`;
                try {
                    const errorData = await response.json();
                    errorMessage = errorData.message || errorMessage;
                    console.error('‚ùå RoomService: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', errorData);
                } catch (e) {
                    console.error('‚ùå RoomService: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏');
                }
                
                throw new Error(errorMessage);
            }

            this._resetBackoff();

            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã');
            }

            this.state.currentRoom = data.data;
            return data.data;
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', error);
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} roomId
     * @param {Object} updates
     * @returns {Promise<Object>}
     */
    async updateRoom(roomId, updates) {
        try {
            console.log('üè† RoomService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', roomId);
            await this._waitForRateLimit();
            
            const response = await fetch(`${this.config.baseUrl}/${roomId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ updates })
            });

            if (!response.ok) {
                if (response.status === 429) {
                    const retryAfter = this._parseRetryAfter(response);
                    const backoff = this._increaseBackoff(retryAfter);
                    console.warn('‚ö†Ô∏è RoomService: HTTP 429 –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ', backoff, '–º—Å');
                    throw new Error(`Rate limited! Retry after ${backoff}ms`);
                }
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            this._resetBackoff();

            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
            }

            this.state.currentRoom = data.data;
            return data.data;
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            throw error;
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} roomId
     * @returns {Promise<boolean>}
     */
    async deleteRoom(roomId) {
        try {
            console.log('üè† RoomService: –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', roomId);
            await this._waitForRateLimit();
            
            const response = await fetch(`${this.config.baseUrl}/${roomId}`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' }
            });

            if (!response.ok) {
                if (response.status === 429) {
                    const retryAfter = this._parseRetryAfter(response);
                    const backoff = this._increaseBackoff(retryAfter);
                    console.warn('‚ö†Ô∏è RoomService: HTTP 429 –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ', backoff, '–º—Å');
                    throw new Error(`Rate limited! Retry after ${backoff}ms`);
                }
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            this._resetBackoff();

            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
            }

            if (this.state.currentRoom && this.state.currentRoom.id === roomId) {
                this.state.currentRoom = null;
            }
            
            return true;
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
     * @param {string} roomId
     * @param {Object} playerData
     * @returns {Promise<Object>}
     */
    async updatePlayerInRoom(roomId, playerData) {
        try {
            console.log('üè† RoomService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ:', roomId, playerData);
            
            // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            if (this.config.useMockData || this.useMockData) {
                console.log('üè† RoomService: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–∫-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞');
                return this._updatePlayerInMockRoom(roomId, playerData);
            }
            
            // –ü—Ä–∏–Ω–∏–º–∞–µ–º –µ–¥–∏–Ω—ã–π PlayerBundle —Å –ø–æ–ª—è–º–∏ { userId, username, token, dream{ id,title,description,cost }, isReady }
            const requestData = {
                username: playerData.username || playerData.name || 'unknown',
                token: playerData.token || '',
                dream: playerData.dream?.id || '',
                dreamCost: playerData.dream?.cost || 0,
                dreamDescription: playerData.dream?.description || '',
                isReady: !!playerData.isReady
            };

            await this._waitForRateLimit();

            const response = await fetch(`${this.config.baseUrl}/${roomId}/player`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(requestData)
            });

            if (!response.ok) {
                if (response.status === 429) {
                    const retryAfter = this._parseRetryAfter(response);
                    const backoff = this._increaseBackoff(retryAfter);
                    console.warn('‚ö†Ô∏è RoomService: HTTP 429 –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ', backoff, '–º—Å');
                    throw new Error(`Rate limited! Retry after ${backoff}ms`);
                }
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            this._resetBackoff();

            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞');
            }

            return data;
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', error);
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –º–æ–∫-–∫–æ–º–Ω–∞—Ç–µ
     * @param {string} roomId
     * @param {Object} playerData
     * @returns {Promise<Object>}
     * @private
     */
    _updatePlayerInMockRoom(roomId, playerData) {
        console.log('üè† RoomService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –º–æ–∫-–∫–æ–º–Ω–∞—Ç–µ:', roomId, playerData);
        
        const room = this.mockRooms.find(r => r.id === roomId);
        if (!room) {
            throw new Error('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
        // –ò—â–µ–º –ø–æ userId, id –∏–ª–∏ username
        const playerIndex = room.players.findIndex(p => 
            p.id === playerData.id || 
            p.userId === playerData.userId || 
            p.username === playerData.username
        );
        if (playerIndex === -1) {
            console.log('üîç RoomService: –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ:', {
                roomId: roomId,
                playerData: playerData,
                roomPlayers: room.players.map(p => ({ id: p.id, userId: p.userId, username: p.username }))
            });
            throw new Error('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        const oldPlayer = room.players[playerIndex];
        room.players[playerIndex] = { ...room.players[playerIndex], ...playerData };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
        this._savePersistedRooms();
        
        console.log('‚úÖ RoomService: –ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –º–æ–∫-–∫–æ–º–Ω–∞—Ç–µ:', {
            oldToken: oldPlayer.token,
            newToken: playerData.token,
            player: room.players[playerIndex]
        });
        return {
            success: true,
            player: room.players[playerIndex],
            room: room
        };
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    getCurrentRoom() { return this.state.currentRoom; }
    setCurrentRoom(room) { this.state.currentRoom = room; }
    clearCurrentRoom() { this.state.currentRoom = null; }
    getCachedRooms() { return this.state.rooms; }

    // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    isHost(userId, room = null) {
        const targetRoom = room || this.state.currentRoom;
        if (!targetRoom || !targetRoom.players) return false;
        // 1) –ü—Ä—è–º–æ–π —Ñ–ª–∞–≥ isHost
        const hostPlayer = targetRoom.players.find(p => p.isHost);
        if (hostPlayer && hostPlayer.userId === userId) return true;
        // 2) –ï—Å–ª–∏ —Ñ–ª–∞–≥–æ–≤ –Ω–µ—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º —Ö–æ—Å—Ç–æ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–º–Ω–∞—Ç—ã
        const me = targetRoom.players.find(p => p.userId === userId);
        if (!me) return false;
        if (targetRoom.creator && me.username && targetRoom.creator === me.username) return true;
        return false;
    }

    getPlayer(userId, room = null) {
        const targetRoom = room || this.state.currentRoom;
        if (!targetRoom || !targetRoom.players) return null;
        
        return targetRoom.players.find(p => p.userId === userId) || null;
    }

    canJoinRoom(userId, room) {
        if (!room || !userId) return false;
        // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
        if (room.isFull) return false;
        
        const existingPlayer = this.getPlayer(userId, room);
        return !existingPlayer;
    }

    canStartGame(userId, room = null) {
        const targetRoom = room || this.state.currentRoom;
        if (!targetRoom || !userId) return false;
        
        // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å—Ç–∞—Ä—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 1 –≥–æ—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫
        const readyCount = (targetRoom.players || []).filter(p => p.isReady).length;
        const canStartByReady = readyCount >= 1;
        return this.isHost(userId, targetRoom) && !targetRoom.isStarted && (targetRoom.canStart || canStartByReady);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    clearCache() {
        this.state.rooms = [];
        this.state.lastUpdate = null;
        this.state.currentRoom = null;
        console.log('üßπ RoomService: –ö—ç—à –æ—á–∏—â–µ–Ω');
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
     */
    clearPersistedData() {
        localStorage.removeItem(this.config.localStorageKey);
        console.log('üßπ RoomService: –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof window !== 'undefined') {
    window.RoomService = RoomService;
}

// Version: 1760438000 - Refactored v2.0.0
