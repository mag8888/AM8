/**
 * RoomService v1.0.4
 * –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–æ–≤—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏
 */
class RoomService {
    constructor() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const isLocal = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
        
        if (isLocal) {
            // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-API
            this.baseUrl = 'http://localhost:3002/api/rooms';
            console.log('üè† RoomService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫-API');
        } else {
            // –ü—Ä–æ–¥–∞–∫—à–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API, –Ω–æ —Å fallback –Ω–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
            this.baseUrl = '/api/rooms';
            this.useMockData = true; // –í–∫–ª—é—á–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞
            console.log('üè† RoomService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º API (—Å fallback –Ω–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ)');
        }
        
        this.currentRoom = null;
        this.rooms = [];
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞
        if (this.useMockData) {
            this.initializeMockData();
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ localStorage
            this.loadDynamicRooms();
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞
     */
    initializeMockData() {
        this.mockRooms = [
            {
                id: 'room-demo-1',
                name: '–î–µ–º–æ –∫–æ–º–Ω–∞—Ç–∞ 1',
                maxPlayers: 4,
                playerCount: 2,
                status: 'waiting',
                isStarted: false,
                isFull: false,
                creator: 'demo_user',
                turnTime: 30,
                assignProfessions: true,
                players: [
                    { id: 'p1', username: 'demo_user', name: 'demo_user', isHost: true },
                    { id: 'p2', username: 'player1', name: 'player1', isHost: false }
                ],
                createdAt: new Date(Date.now() - 60000).toISOString() // 1 –º–∏–Ω—É—Ç–∞ –Ω–∞–∑–∞–¥
            },
            {
                id: 'room-demo-2',
                name: '–¢—É—Ä–Ω–∏—Ä–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞',
                maxPlayers: 6,
                playerCount: 3,
                status: 'waiting',
                isStarted: false,
                isFull: false,
                creator: 'tournament_master',
                turnTime: 60,
                assignProfessions: false,
                players: [
                    { id: 'p3', username: 'tournament_master', name: 'tournament_master', isHost: true },
                    { id: 'p4', username: 'player2', name: 'player2', isHost: false },
                    { id: 'p5', username: 'player3', name: 'player3', isHost: false }
                ],
                createdAt: new Date(Date.now() - 30000).toISOString() // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥
            }
        ];
        
        console.log('üè† RoomService: –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞');
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –≤ localStorage
     */
    saveDynamicRooms() {
        try {
            const dynamicRooms = this.mockRooms.filter(room => room.id.startsWith('mock-room-'));
            localStorage.setItem('aura_money_dynamic_rooms', JSON.stringify(dynamicRooms));
            console.log('üíæ RoomService: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage:', dynamicRooms.length);
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–Ω–∞—Ç:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –∏–∑ localStorage
     */
    loadDynamicRooms() {
        try {
            const saved = localStorage.getItem('aura_money_dynamic_rooms');
            if (saved) {
                const dynamicRooms = JSON.parse(saved);
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∫ –±–∞–∑–æ–≤—ã–º –º–æ–∫-–¥–∞–Ω–Ω—ã–º
                this.mockRooms = [...dynamicRooms, ...this.mockRooms];
                console.log('üìÇ RoomService: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:', dynamicRooms.length);
            }
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–Ω–∞—Ç:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
     * @returns {Promise<Array>}
     */
    async getAllRooms() {
        try {
            console.log('üè† RoomService: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç');
            
            // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –º–æ–∫-–¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            if (this.useMockData) {
                console.log('üè† RoomService: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö');
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–Ω–∞—Ç—ã –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –≤–≤–µ—Ä—Ö—É)
                const sortedRooms = [...this.mockRooms].sort((a, b) => {
                    return new Date(b.createdAt) - new Date(a.createdAt);
                });
                this.rooms = sortedRooms;
                return sortedRooms;
            }
            
            const response = await fetch(this.baseUrl, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            
            if (data.success) {
                this.rooms = data.data;
                console.log(`‚úÖ RoomService: –ü–æ–ª—É—á–µ–Ω–æ ${data.count} –∫–æ–º–Ω–∞—Ç`);
                return data.data;
            } else {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç');
            }
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:', error);
            
            // Fallback –Ω–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if (this.useMockData && this.mockRooms) {
                console.log('üè† RoomService: Fallback –Ω–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ');
                this.rooms = this.mockRooms;
                return this.mockRooms;
            }
            
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ ID
     * @param {string} roomId
     * @returns {Promise<Object>}
     */
    async getRoomById(roomId) {
        try {
            console.log('üè† RoomService: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ ID:', roomId);
            
            // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –º–æ–∫-–¥–∞–Ω–Ω—ã–µ, –∏—â–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ –Ω–∏—Ö
            if (this.useMockData) {
                console.log('üè† RoomService: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç—ã');
                const room = this.mockRooms.find(r => r.id === roomId);
                if (room) {
                    console.log('‚úÖ RoomService: –ö–æ–º–Ω–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö:', room.name);
                    return room;
                } else {
                    console.warn('‚ö†Ô∏è RoomService: –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö');
                    return null;
                }
            }
            
            const response = await fetch(`${this.baseUrl}/${roomId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            
            if (data.success) {
                console.log('‚úÖ RoomService: –ö–æ–º–Ω–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞');
                return data.data;
            } else {
                throw new Error(data.message || '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            console.warn('‚ö†Ô∏è RoomService: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ');
            
            // Fallback –Ω–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
            const room = this.mockRooms.find(r => r.id === roomId);
            if (room) {
                console.log('‚úÖ RoomService: –ö–æ–º–Ω–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö (fallback):', room.name);
                return room;
            } else {
                console.warn('‚ö†Ô∏è RoomService: –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö (fallback)');
                return null;
            }
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
     * @param {Object} roomData
     * @param {Object} creator
     * @returns {Promise<Object>}
     */
    async createRoom(roomData, creator) {
        try {
            console.log('üè† RoomService: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', roomData.name);
            
            const response = await fetch(this.baseUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    roomData,
                    creator
                })
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if (!response.ok) {
                console.warn('‚ö†Ô∏è RoomService: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
                return this.createMockRoom(roomData, creator);
            }

            const data = await response.json();
            
            if (data.success) {
                console.log('‚úÖ RoomService: –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞');
                this.currentRoom = data.data;
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã
                try {
                    if (window.pushClient && typeof window.pushClient.sendBroadcastPush === 'function') {
                        await window.pushClient.sendBroadcastPush('room_created', {
                            roomId: data.data.id,
                            roomName: data.data.name,
                            creator: creator.username,
                            playerCount: data.data.playerCount,
                            maxPlayers: data.data.maxPlayers,
                            status: data.data.status,
                            timestamp: new Date().toISOString()
                        }, true); // excludeSelf = true, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ–±–µ
                        
                        console.log('üì° RoomService: Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                    }
                } catch (pushError) {
                    console.error('‚ö†Ô∏è RoomService: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', pushError);
                    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ push
                }
                
                return data.data;
            } else {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
            }
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            
            // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
            console.warn('‚ö†Ô∏è RoomService: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
            return this.createMockRoom(roomData, creator);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –≤ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö
     * @param {Object} roomData
     * @param {Object} creator
     * @returns {Object}
     */
    createMockRoom(roomData, creator) {
        try {
            const newRoom = {
                id: 'mock-room-' + Date.now(),
                name: roomData.name || '–ù–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞',
                maxPlayers: roomData.maxPlayers || 4,
                playerCount: 1,
                status: 'waiting',
                isStarted: false,
                isFull: false,
                creator: creator.username || 'unknown',
                turnTime: roomData.turnTime || 30,
                assignProfessions: roomData.assignProfessions || false,
                players: [
                    {
                        id: creator.id || 'creator-id',
                        username: creator.username || 'creator',
                        name: creator.username || 'creator',
                        isHost: true
                    }
                ],
                createdAt: new Date().toISOString()
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö (–Ω–æ–≤—ã–µ –∫–æ–º–Ω–∞—Ç—ã –≤–≤–µ—Ä—Ö—É)
            this.mockRooms.unshift(newRoom);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –≤ localStorage
            this.saveDynamicRooms();
            
            console.log('‚úÖ RoomService: –ú–æ–∫-–∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', newRoom.name);
            
            return newRoom;
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫-–∫–æ–º–Ω–∞—Ç—ã:', error);
            throw error;
        }
    }

    /**
     * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –º–æ–∫-–∫–æ–º–Ω–∞—Ç–µ
     * @param {string} roomId
     * @param {Object} player
     * @returns {Object}
     */
    joinMockRoom(roomId, player) {
        try {
            console.log('üè† RoomService: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –º–æ–∫-–∫–æ–º–Ω–∞—Ç–µ:', roomId);
            
            // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—É –≤ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö
            const room = this.mockRooms.find(r => r.id === roomId);
            if (!room) {
                throw new Error('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª–Ω–∞—è –ª–∏ –∫–æ–º–Ω–∞—Ç–∞
            if (room.playerCount >= room.maxPlayers) {
                throw new Error('–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫
            const existingPlayer = room.players.find(p => p.userId === player.userId);
            if (existingPlayer) {
                console.log('‚úÖ RoomService: –ò–≥—Ä–æ–∫ —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ');
                return room;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
            const newPlayer = {
                id: 'player-' + Date.now(),
                userId: player.userId,
                username: player.username,
                name: player.name,
                isHost: false
            };
            
            room.players.push(newPlayer);
            room.playerCount = room.players.length;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É
            this.currentRoom = room;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage
            this.saveDynamicRooms();
            
            console.log('‚úÖ RoomService: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –º–æ–∫-–∫–æ–º–Ω–∞—Ç–µ —É—Å–ø–µ—à–Ω–æ:', room.name);
            
            return room;
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –º–æ–∫-–∫–æ–º–Ω–∞—Ç–µ:', error);
            throw error;
        }
    }

    /**
     * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
     * @param {string} roomId
     * @param {Object} player
     * @returns {Promise<Object>}
     */
    async joinRoom(roomId, player) {
        try {
            console.log('üè† RoomService: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ:', roomId);
            console.log('üîç RoomService: useMockData =', this.useMockData);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞
            if (this.useMockData || !window.location.hostname.includes('localhost')) {
                console.log('üè† RoomService: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ');
                return this.joinMockRoom(roomId, player);
            }
            
            const response = await fetch(`${this.baseUrl}/${roomId}/join`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    player
                })
            });

            if (!response.ok) {
                console.warn('‚ö†Ô∏è RoomService: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
                return this.joinMockRoom(roomId, player);
            }

            const data = await response.json();
            
            if (data.success) {
                console.log('‚úÖ RoomService: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
                this.currentRoom = data.data;
                return data.data;
            } else {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ');
            }
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
            console.warn('‚ö†Ô∏è RoomService: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
            return this.joinMockRoom(roomId, player);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
     * @param {string} roomId
     * @param {string} userId
     * @returns {Promise<Object>}
     */
    async startGame(roomId, userId) {
        try {
            console.log('üè† RoomService: –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ:', roomId);
            
            const response = await fetch(`${this.baseUrl}/${roomId}/start`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    userId
                })
            });

            const data = await response.json();
            
            if (data.success) {
                console.log('‚úÖ RoomService: –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞');
                this.currentRoom = data.data;
                return data.data;
            } else {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã');
            }
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', error);
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} roomId
     * @param {Object} updates
     * @returns {Promise<Object>}
     */
    async updateRoom(roomId, updates) {
        try {
            console.log('üè† RoomService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', roomId);
            
            const response = await fetch(`${this.baseUrl}/${roomId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    updates
                })
            });

            const data = await response.json();
            
            if (data.success) {
                console.log('‚úÖ RoomService: –ö–æ–º–Ω–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
                this.currentRoom = data.data;
                return data.data;
            } else {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
            }
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            throw error;
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} roomId
     * @returns {Promise<boolean>}
     */
    async deleteRoom(roomId) {
        try {
            console.log('üè† RoomService: –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', roomId);
            
            const response = await fetch(`${this.baseUrl}/${roomId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();
            
            if (data.success) {
                console.log('‚úÖ RoomService: –ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞');
                if (this.currentRoom && this.currentRoom.id === roomId) {
                    this.currentRoom = null;
                }
                return true;
            } else {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
            }
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–Ω–∞—Ç
     * @returns {Promise<Object>}
     */
    async getStats() {
        try {
            console.log('üè† RoomService: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            
            // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –º–æ–∫-–¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            if (this.useMockData) {
                const stats = {
                    totalRooms: this.mockRooms.length,
                    activeRooms: this.mockRooms.filter(r => !r.isStarted).length,
                    gamesStarted: this.mockRooms.filter(r => r.isStarted).length,
                    playersOnline: this.mockRooms.reduce((sum, r) => sum + r.playerCount, 0)
                };
                
                console.log('üè† RoomService: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–∫-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
                return stats;
            }
            
            console.log('üè† RoomService: baseUrl =', this.baseUrl);
            console.log('üè† RoomService: URL =', `${this.baseUrl}/stats`);
            
            const response = await fetch(`${this.baseUrl}/stats`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            
            if (data.success) {
                console.log('‚úÖ RoomService: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞');
                return data.data;
            } else {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            }
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            
            // Fallback –Ω–∞ –º–æ–∫-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if (this.useMockData && this.mockRooms) {
                console.log('üè† RoomService: Fallback –Ω–∞ –º–æ–∫-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
                const stats = {
                    totalRooms: this.mockRooms.length,
                    activeRooms: this.mockRooms.filter(r => !r.isStarted).length,
                    gamesStarted: this.mockRooms.filter(r => r.isStarted).length,
                    playersOnline: this.mockRooms.reduce((sum, r) => sum + r.playerCount, 0)
                };
                return stats;
            }
            
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Object|null}
     */
    getCurrentRoom() {
        return this.currentRoom;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
     * @param {Object} room
     */
    setCurrentRoom(room) {
        this.currentRoom = room;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
     */
    clearCurrentRoom() {
        this.currentRoom = null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç –∏–∑ –∫–µ—à–∞
     * @returns {Array}
     */
    getCachedRooms() {
        return this.rooms;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Å—Ç–æ–º
     * @param {string} userId
     * @param {Object} room
     * @returns {boolean}
     */
    isHost(userId, room = null) {
        const targetRoom = room || this.currentRoom;
        if (!targetRoom || !targetRoom.players) {
            return false;
        }
        
        const hostPlayer = targetRoom.players.find(p => p.isHost);
        return hostPlayer && hostPlayer.userId === userId;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} userId
     * @param {Object} room
     * @returns {Object|null}
     */
    getPlayer(userId, room = null) {
        const targetRoom = room || this.currentRoom;
        if (!targetRoom || !targetRoom.players) {
            return null;
        }
        
        return targetRoom.players.find(p => p.userId === userId) || null;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
     * @param {string} userId
     * @param {Object} room
     * @returns {boolean}
     */
    canJoinRoom(userId, room) {
        if (!room || !userId) {
            return false;
        }
        
        // –ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
        if (room.isFull) {
            return false;
        }
        
        // –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å
        if (room.isStarted) {
            return false;
        }
        
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ
        const existingPlayer = this.getPlayer(userId, room);
        if (existingPlayer) {
            return false;
        }
        
        return true;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É
     * @param {string} userId
     * @param {Object} room
     * @returns {boolean}
     */
    canStartGame(userId, room = null) {
        const targetRoom = room || this.currentRoom;
        if (!targetRoom || !userId) {
            return false;
        }
        
        // –¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É
        if (!this.isHost(userId, targetRoom)) {
            return false;
        }
        
        // –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å
        if (targetRoom.isStarted) {
            return false;
        }
        
        // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤
        if (!targetRoom.canStart) {
            return false;
        }
        
        return true;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {Object} playerData - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @returns {Promise<Object>}
     */
    async updatePlayerInRoom(roomId, playerData) {
        try {
            console.log('üè† RoomService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ:', roomId);
            
            const response = await fetch(`${this.baseUrl}/${roomId}/player`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(playerData)
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            
            if (data.success) {
                console.log('‚úÖ RoomService: –ò–≥—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ');
                return data.data;
            } else {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞');
            }
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', error);
            throw error;
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof window !== 'undefined') {
    window.RoomService = RoomService;
}
// Version: 1760436500
