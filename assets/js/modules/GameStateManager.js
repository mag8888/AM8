/**
 * GameStateManager v1.0.0
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã
 * –ï–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ UI
 */

class GameStateManager {
    constructor() {
        this.players = [];
        this.activePlayer = null;
        this.roomId = null;
        this.gameState = {
            canRoll: false,
            canMove: false,
            canEndTurn: false,
            lastDiceResult: null,
            gameStarted: false
        };
        this.listeners = new Map();
        
        console.log('üèóÔ∏è GameStateManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ roomId
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     */
    setRoomId(roomId) {
        this.roomId = roomId;
        console.log('üèóÔ∏è GameStateManager: RoomId —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', roomId);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
     * @param {Object} serverState - –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    updateFromServer(serverState) {
        const oldState = this.getState();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
        if (serverState.players) {
            this.players = serverState.players;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        if (serverState.activePlayer) {
            this.activePlayer = serverState.activePlayer;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (serverState.canRoll !== undefined) {
            this.gameState.canRoll = serverState.canRoll;
        }
        if (serverState.canMove !== undefined) {
            this.gameState.canMove = serverState.canMove;
        }
        if (serverState.canEndTurn !== undefined) {
            this.gameState.canEndTurn = serverState.canEndTurn;
        }
        if (serverState.lastDiceResult) {
            this.gameState.lastDiceResult = serverState.lastDiceResult;
        }
        if (serverState.gameStarted !== undefined) {
            this.gameState.gameStarted = serverState.gameStarted;
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        this.notifyListeners('state:updated', this.getState());
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        if (serverState.activePlayer && (!oldState.activePlayer || oldState.activePlayer.id !== serverState.activePlayer.id)) {
            this.notifyListeners('turn:changed', {
                activePlayer: serverState.activePlayer,
                previousPlayer: oldState.activePlayer
            });
        }
        
        if (serverState.players && serverState.players.length !== oldState.players.length) {
            this.notifyListeners('players:updated', {
                players: serverState.players,
                added: serverState.players.length > oldState.players.length
            });
        }
        
        console.log('üèóÔ∏è GameStateManager: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
     * @param {Object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     */
    addPlayer(player) {
        const existingIndex = this.players.findIndex(p => p.id === player.id);
        if (existingIndex >= 0) {
            this.players[existingIndex] = player;
        } else {
            this.players.push(player);
        }
        
        this.notifyListeners('player:added', { player });
        this.notifyListeners('state:updated', this.getState());
        
        console.log('üèóÔ∏è GameStateManager: –ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω:', player.username);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
     * @param {Object} player - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     */
    updatePlayer(player) {
        const index = this.players.findIndex(p => p.id === player.id);
        if (index >= 0) {
            this.players[index] = { ...this.players[index], ...player };
            this.notifyListeners('player:updated', { player: this.players[index] });
            this.notifyListeners('state:updated', this.getState());
            
            console.log('üèóÔ∏è GameStateManager: –ò–≥—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:', player.username);
        }
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     */
    removePlayer(playerId) {
        const index = this.players.findIndex(p => p.id === playerId);
        if (index >= 0) {
            const player = this.players[index];
            this.players.splice(index, 1);
            
            this.notifyListeners('player:removed', { player });
            this.notifyListeners('state:updated', this.getState());
            
            console.log('üèóÔ∏è GameStateManager: –ò–≥—Ä–æ–∫ —É–¥–∞–ª–µ–Ω:', player.username);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
     * @param {Object} diceResult - –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
     */
    updateDiceResult(diceResult) {
        this.gameState.lastDiceResult = diceResult;
        this.notifyListeners('dice:rolled', { diceResult });
        this.notifyListeners('state:updated', this.getState());
        
        console.log('üèóÔ∏è GameStateManager: –†–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', diceResult);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @returns {Object} –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    getState() {
        return {
            players: this.players,
            activePlayer: this.activePlayer,
            roomId: this.roomId,
            gameState: this.gameState,
            canRoll: this.gameState.canRoll,
            canMove: this.gameState.canMove,
            canEndTurn: this.gameState.canEndTurn,
            lastDiceResult: this.gameState.lastDiceResult,
            gameStarted: this.gameState.gameStarted
        };
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤
     */
    getPlayers() {
        return this.players;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     * @returns {Object|null} –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
     */
    getActivePlayer() {
        return this.activePlayer;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –ø–æ ID
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @returns {Object|null} –ò–≥—Ä–æ–∫
     */
    getPlayerById(playerId) {
        return this.players.find(p => p.id === playerId) || null;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @returns {boolean} –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –∏–≥—Ä–æ–∫
     */
    isPlayerActive(playerId) {
        return this.activePlayer && this.activePlayer.id === playerId;
    }
    
    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
     * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param {Function} callback - –û–±—Ä–∞–±–æ—Ç—á–∏–∫
     */
    on(event, callback) {
        if (!this.listeners.has(event)) {
            this.listeners.set(event, new Set());
        }
        this.listeners.get(event).add(callback);
        
        console.log(`üèóÔ∏è GameStateManager: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: ${event}`);
    }
    
    /**
     * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
     * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param {Function} callback - –û–±—Ä–∞–±–æ—Ç—á–∏–∫
     */
    off(event, callback) {
        if (this.listeners.has(event)) {
            this.listeners.get(event).delete(callback);
        }
        
        console.log(`üèóÔ∏è GameStateManager: –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è: ${event}`);
    }
    
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
     * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param {*} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    notifyListeners(event, data) {
        if (this.listeners.has(event)) {
            this.listeners.get(event).forEach(callback => {
                try {
                    callback(data);
                } catch (error) {
                    console.error(`‚ùå GameStateManager: –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ ${event}:`, error);
                }
            });
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    clear() {
        this.players = [];
        this.activePlayer = null;
        this.roomId = null;
        this.gameState = {
            canRoll: false,
            canMove: false,
            canEndTurn: false,
            lastDiceResult: null,
            gameStarted: false
        };
        
        this.notifyListeners('state:cleared', {});
        console.log('üèóÔ∏è GameStateManager: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ');
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    destroy() {
        this.listeners.clear();
        this.clear();
        console.log('üèóÔ∏è GameStateManager: –£–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.GameStateManager = GameStateManager;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = GameStateManager;
}
