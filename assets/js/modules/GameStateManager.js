/**
 * GameStateManager v1.0.0
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã
 * –ï–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ UI
 */

class GameStateManager {
    constructor() {
        this.players = [];
        this.activePlayer = null;
        this.roomId = null;
        this.gameState = {
            canRoll: false,
            canMove: false,
            canEndTurn: false,
            lastDiceResult: null,
            gameStarted: false
        };
        this.listeners = new Map();
        
        console.log('üèóÔ∏è GameStateManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ roomId
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     */
    setRoomId(roomId) {
        this.roomId = roomId;
        console.log('üèóÔ∏è GameStateManager: RoomId —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', roomId);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
     * @param {Object} serverState - –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    updateFromServer(serverState) {
        const oldState = this.getState();
        
        const oldPlayersKey = JSON.stringify((oldState.players || []).map(p => (p && (p.id || p.userId || p.username)) || null));

        console.log('üîç GameStateManager: updateFromServer –≤—ã–∑–≤–∞–Ω —Å serverState:', serverState);
        console.log('üîç GameStateManager: serverState.players:', serverState.players);
        console.log('üîç GameStateManager: Array.isArray(serverState.players):', Array.isArray(serverState.players));
        console.log('üîç GameStateManager: serverState.players type:', typeof serverState.players);
        console.log('üîç GameStateManager: serverState.players constructor:', serverState.players?.constructor?.name);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
        if (Array.isArray(serverState.players) && serverState.players.length > 0) {
            console.log('üîç GameStateManager: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤, –¥–ª–∏–Ω–∞:', serverState.players.length);
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
            this.players = [];
            this.players.push(...serverState.players);
            
            console.log('üèóÔ∏è GameStateManager: –ò–≥—Ä–æ–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –∏—Ç–æ–≥–æ:', this.players.length);
            console.log('üèóÔ∏è GameStateManager: this.players –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', this.players);
            console.log('üèóÔ∏è GameStateManager: this.players === serverState.players:', this.players === serverState.players);
            console.log('üèóÔ∏è GameStateManager: this.players[0]:', this.players[0]);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
            if (this.players.length === 0) {
                console.log('üö® GameStateManager: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - –∏–≥—Ä–æ–∫–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å!');
                this.players = [...serverState.players];
                console.log('üö® GameStateManager: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∏–≥—Ä–æ–∫–æ–≤:', this.players.length);
            }
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            console.log('üîç GameStateManager: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
            console.log('üîç GameStateManager: this.players –ø–µ—Ä–µ–¥ emit:', this.players);
            console.log('üîç GameStateManager: this.players.length –ø–µ—Ä–µ–¥ emit:', this.players?.length);
        } else {
            console.log('üîç GameStateManager: serverState.players –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ –ø—É—Å—Ç–æ–π:', serverState.players);
            
            // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –Ω–æ —É –Ω–∞—Å –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
            if (this.players && this.players.length > 0) {
                console.log('üîç GameStateManager: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤:', this.players.length);
            } else {
                console.log('üîç GameStateManager: –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            }
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        console.log('üîç GameStateManager: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
        console.log('üîç GameStateManager: this.players –ø–µ—Ä–µ–¥ emit:', this.players);
        console.log('üîç GameStateManager: this.players.length –ø–µ—Ä–µ–¥ emit:', this.players?.length);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
        if (Array.isArray(serverState.players) && serverState.players.length > 0) {
            this.players = [...serverState.players];
            console.log('üîç GameStateManager: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ this.players:', this.players);
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if (Array.isArray(serverState.players) && serverState.players.length > 0) {
            console.log('üîç GameStateManager: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞–ø—Ä—è–º—É—é');
            this.players = serverState.players.slice(); // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞
            console.log('üîç GameStateManager: this.players –ø–æ—Å–ª–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏:', this.players);
            console.log('üîç GameStateManager: this.players.length –ø–æ—Å–ª–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏:', this.players.length);
        }
        
        const newPlayersKey = JSON.stringify((this.players || []).map(p => (p && (p.id || p.userId || p.username)) || null));
        const playersChanged = oldPlayersKey !== newPlayersKey;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        if (serverState.activePlayer) {
            this.activePlayer = serverState.activePlayer;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (serverState.canRoll !== undefined) {
            this.gameState.canRoll = serverState.canRoll;
        }
        if (serverState.canMove !== undefined) {
            this.gameState.canMove = serverState.canMove;
        }
        if (serverState.canEndTurn !== undefined) {
            this.gameState.canEndTurn = serverState.canEndTurn;
        }
        if (serverState.lastDiceResult) {
            this.gameState.lastDiceResult = serverState.lastDiceResult;
        }
        if (serverState.gameStarted !== undefined) {
            this.gameState.gameStarted = serverState.gameStarted;
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if (playersChanged || this.hasGameStateChanged(oldState)) {
            console.log('üîç GameStateManager: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ state:updated');
            this.notifyListeners('state:updated', this.getState());
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        console.log('üîç GameStateManager: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ state:updated');
        this.notifyListeners('state:updated', this.getState());
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º PlayersPanel
        if (this.players && this.players.length > 0) {
            console.log('üîß GameStateManager: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º PlayersPanel —Å', this.players.length, '–∏–≥—Ä–æ–∫–∞–º–∏');
            const playersPanel = window.app?.modules?.get('playersPanel');
            if (playersPanel && typeof playersPanel.updatePlayersList === 'function') {
                playersPanel.updatePlayersList(this.players);
                console.log('‚úÖ GameStateManager: PlayersPanel –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ');
            }
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        if (serverState.activePlayer && (!oldState.activePlayer || oldState.activePlayer.id !== serverState.activePlayer.id)) {
            this.notifyListeners('turn:changed', {
                activePlayer: serverState.activePlayer,
                previousPlayer: oldState.activePlayer
            });
        }
        
        if (playersChanged) {
            console.log('üèóÔ∏è GameStateManager: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ players:updated', this.players);
            this.notifyListeners('players:updated', {
                players: this.players,
                added: (this.players?.length || 0) > (oldState.players?.length || 0)
            });
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∏—à–∫–∏
            console.log('üèóÔ∏è GameStateManager: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ game:playersUpdated', this.players);
            this.notifyListeners('game:playersUpdated', {
                players: this.players
            });
        }
        
        console.log('üèóÔ∏è GameStateManager: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @param {Object} oldState - –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     * @returns {boolean} - –ò–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    hasGameStateChanged(oldState) {
        const oldGameState = oldState.gameState || {};
        const newGameState = this.gameState || {};
        
        return oldGameState.canRoll !== newGameState.canRoll ||
               oldGameState.canMove !== newGameState.canMove ||
               oldGameState.canEndTurn !== newGameState.canEndTurn ||
               oldGameState.gameStarted !== newGameState.gameStarted ||
               JSON.stringify(oldGameState.lastDiceResult) !== JSON.stringify(newGameState.lastDiceResult) ||
               (oldState.activePlayer && this.activePlayer && oldState.activePlayer.id !== this.activePlayer.id);
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
     * @param {Object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     */
    addPlayer(player) {
        const existingIndex = this.players.findIndex(p => p.id === player.id);
        if (existingIndex >= 0) {
            this.players[existingIndex] = player;
        } else {
            this.players.push(player);
        }
        
        this.notifyListeners('player:added', { player });
        // state:updated –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ updateFromServer
        
        console.log('üèóÔ∏è GameStateManager: –ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω:', player.username);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
     * @param {Object} player - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     */
    updatePlayer(player) {
        const index = this.players.findIndex(p => p.id === player.id);
        if (index >= 0) {
            this.players[index] = { ...this.players[index], ...player };
            this.notifyListeners('player:updated', { player: this.players[index] });
            // state:updated –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ updateFromServer
            
            console.log('üèóÔ∏è GameStateManager: –ò–≥—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:', player.username);
        }
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     */
    removePlayer(playerId) {
        const index = this.players.findIndex(p => p.id === playerId);
        if (index >= 0) {
            const player = this.players[index];
            this.players.splice(index, 1);
            
            this.notifyListeners('player:removed', { player });
            // state:updated –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ updateFromServer
            
            console.log('üèóÔ∏è GameStateManager: –ò–≥—Ä–æ–∫ —É–¥–∞–ª–µ–Ω:', player.username);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
     * @param {Object} diceResult - –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
     */
    updateDiceResult(diceResult) {
        this.gameState.lastDiceResult = diceResult;
        this.notifyListeners('dice:rolled', { diceResult });
        // state:updated –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ updateFromServer
        
        console.log('üèóÔ∏è GameStateManager: –†–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', diceResult);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @returns {Object} –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    getState() {
        console.log('üîç GameStateManager: getState() –≤—ã–∑–≤–∞–Ω');
        console.log('üîç GameStateManager: this.players –≤ getState():', this.players);
        console.log('üîç GameStateManager: this.players.length –≤ getState():', this.players?.length);
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã
        if (!this.players || this.players.length === 0) {
            console.log('üö® GameStateManager: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - –∏–≥—Ä–æ–∫–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã –≤ getState()!');
            
            // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å
            const roomId = window.location.hash.split('roomId=')[1];
            if (roomId) {
                console.log('üîß GameStateManager: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã:', roomId);
                fetch(`/api/rooms/${roomId}/game-state`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && data.state && data.state.players && data.state.players.length > 0) {
                            console.log('üîß GameStateManager: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∏–≥—Ä–æ–∫–æ–≤:', data.state.players.length);
                            this.players = [...data.state.players];
                            
                            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º PlayersPanel
                            const playersPanel = window.app?.modules?.get('playersPanel');
                            if (playersPanel && typeof playersPanel.updatePlayersList === 'function') {
                                playersPanel.updatePlayersList(this.players);
                                console.log('‚úÖ GameStateManager: PlayersPanel –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
                            }
                        }
                    })
                    .catch(err => console.error('‚ùå GameStateManager: –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤:', err));
            }
        }
        
        const state = {
            players: this.players || [],
            activePlayer: this.activePlayer,
            roomId: this.roomId,
            gameState: this.gameState,
            canRoll: this.gameState.canRoll,
            canMove: this.gameState.canMove,
            canEndTurn: this.gameState.canEndTurn,
            lastDiceResult: this.gameState.lastDiceResult,
            gameStarted: this.gameState.gameStarted
        };
        
        console.log('üîç GameStateManager: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', state);
        return state;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤
     */
    getPlayers() {
        return this.players;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     * @returns {Object|null} –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
     */
    getActivePlayer() {
        return this.activePlayer;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –ø–æ ID
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @returns {Object|null} –ò–≥—Ä–æ–∫
     */
    getPlayerById(playerId) {
        return this.players.find(p => p.id === playerId) || null;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º
     * @param {string} playerId - ID –∏–≥—Ä–æ–∫–∞
     * @returns {boolean} –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –∏–≥—Ä–æ–∫
     */
    isPlayerActive(playerId) {
        return this.activePlayer && this.activePlayer.id === playerId;
    }
    
    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
     * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param {Function} callback - –û–±—Ä–∞–±–æ—Ç—á–∏–∫
     */
    on(event, callback) {
        if (!this.listeners.has(event)) {
            this.listeners.set(event, new Set());
        }
        this.listeners.get(event).add(callback);
        
        const listenersCount = this.listeners.get(event).size;
        console.log(`üèóÔ∏è GameStateManager: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: ${event}, –≤—Å–µ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª–µ–π: ${listenersCount}`);
        console.trace('üèóÔ∏è GameStateManager: Stack trace –ø–æ–¥–ø–∏—Å–∫–∏');
    }
    
    /**
     * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
     * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param {Function} callback - –û–±—Ä–∞–±–æ—Ç—á–∏–∫
     */
    off(event, callback) {
        if (this.listeners.has(event)) {
            this.listeners.get(event).delete(callback);
        }
        
        console.log(`üèóÔ∏è GameStateManager: –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è: ${event}`);
    }
    
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
     * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param {*} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    notifyListeners(event, data) {
        const listenersCount = this.listeners.has(event) ? this.listeners.get(event).size : 0;
        console.log(`üèóÔ∏è GameStateManager: notifyListeners(${event})`, { listenersCount, data });
        
        if (this.listeners.has(event)) {
            this.listeners.get(event).forEach(callback => {
                try {
                    callback(data);
                } catch (error) {
                    console.error(`‚ùå GameStateManager: –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ ${event}:`, error);
                }
            });
        } else {
            console.warn(`‚ö†Ô∏è GameStateManager: –ù–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–±—ã—Ç–∏—è ${event}`);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –µ—Å–ª–∏ –Ω–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª–µ–π
            if (event === 'state:updated' && listenersCount === 0) {
                console.log('üîÑ GameStateManager: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
                this.autoResubscribeComponents();
            }
        }
    }
    
    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    autoResubscribeComponents() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç app
        if (window.app && window.app.modules) {
            const turnController = window.app.modules.get('turnController');
            const playersPanel = window.app.modules.get('playersPanel');
            
            if (turnController && typeof turnController.setupEventListeners === 'function') {
                console.log('üîÑ GameStateManager: –ü–µ—Ä–µ–ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º TurnController');
                turnController.setupEventListeners();
            }
            
            if (playersPanel && typeof playersPanel.setupEventListeners === 'function') {
                console.log('üîÑ GameStateManager: –ü–µ—Ä–µ–ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º PlayersPanel');
                playersPanel.setupEventListeners();
            }
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    clear() {
        this.players = [];
        this.activePlayer = null;
        this.roomId = null;
        this.gameState = {
            canRoll: false,
            canMove: false,
            canEndTurn: false,
            lastDiceResult: null,
            gameStarted: false
        };
        
        this.notifyListeners('state:cleared', {});
        console.log('üèóÔ∏è GameStateManager: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ');
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    destroy() {
        this.listeners.clear();
        this.clear();
        console.log('üèóÔ∏è GameStateManager: –£–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.GameStateManager = GameStateManager;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = GameStateManager;
}
