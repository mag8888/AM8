/**
 * GameStateManager v3.0.0 - REFACTORED & OPTIMIZED
 * ---------------------------------------------------------------------------
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
 * ‚úÖ –£–±—Ä–∞–Ω –≤—ã–∑–æ–≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ syncWithServer()
 * ‚úÖ –£–ª—É—á—à–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–∫—É—Ä—Å–∏–∏ –∏ –∫–∞—Å–∫–∞–¥–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π  
 * ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (debouncing)
 * ‚úÖ –ß–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
 * ‚úÖ –ù–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ listeners
 * ‚úÖ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ memory leaks
 */

const STORAGE_KEY_PREFIX = 'am_game_state';

class GameStateManager {
    constructor() {
        /** @type {Map<string, Set<Function>>} */
        this.listeners = new Map();
        this._state = this._createEmptyState();
        this._stateSnapshot = null;

        this._storage = this._detectStorage();
        this._hydratedFromStorage = false;

        // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –∑–∞—â–∏—Ç–∞ –æ—Ç race conditions –∏ —Ä–µ–∫—É—Ä—Å–∏–∏
        this._lastFetchTime = 0;
        this._fetchInterval = 30000; // 30 —Å–µ–∫—É–Ω–¥
        this._isUpdating = false;
        this._isNotifying = false;
        this._updateTimer = null;
        this._rateLimitUntil = 0;
        this._fetchBackoffMs = 0;
        
        // –ù–û–í–û–ï: Debouncing –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∞–º)
        this._notificationQueue = new Map();
        this._notificationDebounceMs = 150; // 150–º—Å debounce
        this._lastNotificationTime = 0;
        
        // –ù–û–í–û–ï: –°—á–µ—Ç—á–∏–∫ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        this._recursionDepth = 0;
        this._maxRecursionDepth = 3;
        
        // –ù–û–í–û–ï: Circuit breaker –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        this._errorCount = 0;
        this._maxErrors = 10;
        this._circuitOpen = false;

        const roomIdFromHash = this._parseRoomIdFromHash();
        if (roomIdFromHash) {
            this._state.roomId = roomIdFromHash;
        }

        this._hydrateFromStorage();

        console.log('üèóÔ∏è GameStateManager v3.0: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏', {
            roomId: this._state.roomId,
            players: this._state.players.length
        });
    }

    /**
     * Update state using payload from server.
     * –£–õ–£–ß–®–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–∫—É—Ä—Å–∏–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
     * @param {Object} serverState
     */
    updateFromServer(serverState = {}) {
        // –ù–û–í–û–ï: Circuit breaker
        if (this._circuitOpen) {
            console.warn('‚ö†Ô∏è GameStateManager: Circuit breaker –æ—Ç–∫—Ä—ã—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
            return;
        }
        
        // –£–õ–£–ß–®–ï–ù–û: –ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–∫—É—Ä—Å–∏–∏
        if (this._recursionDepth >= this._maxRecursionDepth) {
            console.warn('‚ö†Ô∏è GameStateManager: –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏, –ø—Ä–µ—Ä—ã–≤–∞–µ–º');
            return;
        }
        
        if (!serverState || typeof serverState !== 'object') {
            console.warn('‚ö†Ô∏è GameStateManager.updateFromServer: invalid payload', serverState);
            return;
        }

        // –£–õ–£–ß–®–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (this._isUpdating) {
            console.log('üö´ GameStateManager: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }

        this._isUpdating = true;
        this._recursionDepth++;

        try {
            const previous = this._cloneState(this._state);
            const next = this._cloneState(this._state);

            let playersChanged = false;
            let activePlayerChanged = false;
            let coreFlagsChanged = false;

            if (Array.isArray(serverState.players)) {
                const normalisedPlayers = serverState.players
                    .map(player => this._normalisePlayer(player))
                    .filter(Boolean);

                playersChanged = !this._arePlayersEqual(next.players, normalisedPlayers);
                if (playersChanged) {
                    next.players = normalisedPlayers;
                }
            }

            if (typeof serverState.currentPlayerIndex === 'number') {
                next.currentPlayerIndex = Math.max(0, Math.floor(serverState.currentPlayerIndex));
            }

            const candidateActivePlayer = this._resolveActivePlayer(serverState, next);
            if (candidateActivePlayer) {
                activePlayerChanged = !this._arePlayersEqual([previous.activePlayer], [candidateActivePlayer]);
                next.activePlayer = candidateActivePlayer;
                next.currentPlayerIndex = Math.max(
                    0,
                    next.players.findIndex(p => p.id === candidateActivePlayer.id)
                );
            } else if (next.players.length && next.currentPlayerIndex >= 0) {
                next.activePlayer = next.players[next.currentPlayerIndex] || null;
            } else if (next.players.length && !next.activePlayer) {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç
                console.log('üéØ GameStateManager: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ');
                next.currentPlayerIndex = 0;
                next.activePlayer = next.players[0];
                activePlayerChanged = true;
            }

            if (serverState.roomId && serverState.roomId !== next.roomId) {
                next.roomId = serverState.roomId;
                coreFlagsChanged = true;
            }

            const serverFlags = this._extractGameFlags(serverState);
            coreFlagsChanged = this._applyFlags(next, serverFlags) || coreFlagsChanged;

            if (serverState.gameState && typeof serverState.gameState === 'object') {
                coreFlagsChanged = this._applyFlags(next, this._extractGameFlags(serverState.gameState)) || coreFlagsChanged;
            }

            if (!playersChanged &&
                !activePlayerChanged &&
                !coreFlagsChanged &&
                !this._hasMiscChanges(previous, next)) {
                return;
            }

            next.updatedAt = Date.now();
            this._commitState(next, previous, { playersChanged, activePlayerChanged });
            
        } catch (error) {
            this._handleError('updateFromServer', error);
        } finally {
            this._isUpdating = false;
            this._recursionDepth = Math.max(0, this._recursionDepth - 1);
        }
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å game-state –±–µ–∑ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ syncWithServer()
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {boolean} force - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
     * @returns {Promise<Object|null>}
     */
    async fetchGameState(roomId, force = false) {
        // Circuit breaker
        if (this._circuitOpen) {
            console.warn('‚ö†Ô∏è GameStateManager: Circuit breaker –æ—Ç–∫—Ä—ã—Ç');
            return null;
        }
        
        // –ë—ã—Å—Ç—Ä—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!force && this._state && this._state.players && this._state.players.length > 0) {
            const timeSinceLastFetch = Date.now() - this._lastFetchTime;
            if (timeSinceLastFetch < 2000) {
                console.log('üöÄ GameStateManager: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≤–µ–∂–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                return this._state;
            }
        }

        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if (this._isUpdating && !force) {
            console.log('üö´ GameStateManager: –ó–∞–ø—Ä–æ—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
            return null;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
        if (!force && this._rateLimitUntil > Date.now()) {
            const waitMs = this._rateLimitUntil - Date.now();
            console.log(`‚è≥ GameStateManager: Rate limit –∞–∫—Ç–∏–≤–µ–Ω (${waitMs}ms –æ—Å—Ç–∞–ª–æ—Å—å)`);
            return null;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π rate limiter
        if (!force && window.CommonUtils) {
            if (!window.CommonUtils.gameStateLimiter.setRequestPending(roomId)) {
                console.log('üö´ GameStateManager: –ì–ª–æ–±–∞–ª—å–Ω—ã–π rate limiting –∞–∫—Ç–∏–≤–µ–Ω');
                return null;
            }
        }

        this._isUpdating = true;

        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 5000);
            
            const response = await fetch(`/api/rooms/${roomId}/game-state`, {
                headers: {
                    'Cache-Control': 'no-cache',
                    'Pragma': 'no-cache'
                },
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);

            if (response.ok) {
                const gameStateData = await response.json();
                if (gameStateData.success && gameStateData.state) {
                    this.updateFromServer(gameStateData.state);
                    this._lastFetchTime = Date.now();
                    this._fetchBackoffMs = 0;
                    this._rateLimitUntil = 0;
                    this._resetErrorCount(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                    console.log('‚úÖ GameStateManager: –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
                    return gameStateData.state;
                }
            } else {
                if (response.status === 429) {
                    const retryMs = this._applyRateLimitFromResponse(response);
                    console.warn(`‚ö†Ô∏è GameStateManager: Rate limited (HTTP 429), –ø–∞—É–∑–∞ ${retryMs}–º—Å`);
                } else {
                    console.warn('‚ö†Ô∏è GameStateManager: –ù–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å game-state:', response.status);
                }
            }
        } catch (error) {
            if (error.name === 'AbortError') {
                console.warn('‚ö†Ô∏è GameStateManager: –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É (5 —Å–µ–∫)');
            } else {
                this._handleError('fetchGameState', error);
            }
        } finally {
            this._isUpdating = false;
            if (window.CommonUtils) {
                window.CommonUtils.gameStateLimiter.clearRequestPending(roomId);
            }
        }

        return null;
    }

    /**
     * –£–õ–£–ß–®–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è rate limit
     * @param {Response} response
     * @returns {number} –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     * @private
     */
    _applyRateLimitFromResponse(response) {
        const header = response?.headers?.get?.('Retry-After') || response?.headers?.get?.('retry-after');
        let retryMs = 0;

        if (header) {
            const retrySeconds = Number(header);
            if (!Number.isNaN(retrySeconds) && retrySeconds >= 0) {
                retryMs = retrySeconds * 1000;
            }
        }

        if (!retryMs) {
            this._fetchBackoffMs = this._fetchBackoffMs ? Math.min(this._fetchBackoffMs * 2, 120000) : 10000;
            retryMs = this._fetchBackoffMs;
        } else {
            this._fetchBackoffMs = retryMs;
        }

        this._rateLimitUntil = Date.now() + retryMs;
        return retryMs;
    }

    /**
     * –£–õ–£–ß–®–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {number} interval - –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    startPeriodicUpdates(roomId, interval = 45000) {
        if (this._updateTimer) {
            clearInterval(this._updateTimer);
        }

        console.log(`üîÑ GameStateManager: –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ ${interval}ms`);
        this._updateTimer = setInterval(async () => {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É circuit breaker
            if (!this._circuitOpen) {
                await this.fetchGameState(roomId);
            }
        }, interval);
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
     */
    stopPeriodicUpdates() {
        if (this._updateTimer) {
            clearInterval(this._updateTimer);
            this._updateTimer = null;
            console.log('‚èπÔ∏è GameStateManager: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
        }
    }

    /**
     * Force re-emit current snapshot.
     */
    forceUpdate() {
        if (this._circuitOpen) {
            console.warn('‚ö†Ô∏è GameStateManager: Circuit breaker –æ—Ç–∫—Ä—ã—Ç, forceUpdate –ø—Ä–æ–ø—É—â–µ–Ω');
            return;
        }
        
        this._emitStateUpdate(this._cloneState(this._state), this._cloneState(this._state), {
            playersChanged: false,
            activePlayerChanged: false
        });
    }

    /**
     * Set room id and rehydrate persisted state for that room if available.
     * @param {string} roomId
     */
    setRoomId(roomId) {
        if (!roomId || typeof roomId !== 'string') {
            return;
        }
        if (roomId === this._state.roomId) {
            return;
        }

        const previous = this._cloneState(this._state);
        this._state.roomId = roomId;
        this._hydrateFromStorage(roomId);
        this._persistState();
        this._emitStateUpdate(previous, this._cloneState(this._state), {
            playersChanged: false,
            activePlayerChanged: false
        });
        console.log('üèóÔ∏è GameStateManager: roomId set', roomId);
    }

    /**
     * Get immutable snapshot of the current state.
     * @returns {Object}
     */
    getState() {
        if (!this._stateSnapshot) {
            const snapshot = this._cloneState(this._state);
            const derived = {
                players: snapshot.players,
                activePlayer: snapshot.activePlayer,
                currentPlayerIndex: snapshot.currentPlayerIndex,
                roomId: snapshot.roomId,
                gameState: {
                    canRoll: snapshot.canRoll,
                    canMove: snapshot.canMove,
                    canEndTurn: snapshot.canEndTurn,
                    lastDiceResult: snapshot.lastDiceResult,
                    gameStarted: snapshot.gameStarted
                },
                canRoll: snapshot.canRoll,
                canMove: snapshot.canMove,
                canEndTurn: snapshot.canEndTurn,
                lastDiceResult: snapshot.lastDiceResult,
                gameStarted: snapshot.gameStarted,
                updatedAt: snapshot.updatedAt
            };
            this._stateSnapshot = this._freezeSnapshot(derived);
        }
        return this._cloneState(this._stateSnapshot);
    }

    /**
     * @returns {Array}
     */
    getPlayers() {
        return this._cloneState(this._state.players);
    }

    /**
     * @param {string} playerId
     * @returns {Object|null}
     */
    getPlayerById(playerId) {
        if (!playerId) return null;
        return this._cloneState(
            this._state.players.find(p => p.id === playerId || p.userId === playerId) || null
        );
    }

    /**
     * @returns {Object|null}
     */
    getActivePlayer() {
        return this._cloneState(this._state.activePlayer);
    }

    /**
     * @param {string} playerId
     * @returns {boolean}
     */
    isPlayerActive(playerId) {
        if (!playerId || !this._state.activePlayer) return false;
        return this._state.activePlayer.id === playerId ||
            this._state.activePlayer.userId === playerId;
    }

    /**
     * Add or replace player locally.
     * @param {Object} player
     */
    addPlayer(player) {
        if (this._circuitOpen) return;
        
        const normalised = this._normalisePlayer(player);
        if (!normalised) return;

        const previous = this._cloneState(this._state);
        const next = this._cloneState(this._state);

        const existingIndex = next.players.findIndex(p => p.id === normalised.id);
        if (existingIndex >= 0) {
            next.players[existingIndex] = normalised;
        } else {
            next.players.push(normalised);
        }

        next.updatedAt = Date.now();
        this._commitState(next, previous, { playersChanged: true, activePlayerChanged: false });
    }

    /**
     * Merge player updates.
     * @param {Object} player
     */
    updatePlayer(player) {
        if (this._circuitOpen) return;
        
        const normalised = this._normalisePlayer(player);
        if (!normalised) return;

        const previous = this._cloneState(this._state);
        const next = this._cloneState(this._state);

        const idx = next.players.findIndex(p => p.id === normalised.id);
        if (idx === -1) {
            return;
        }

        next.players[idx] = { ...next.players[idx], ...normalised };
        if (next.activePlayer && next.activePlayer.id === normalised.id) {
            next.activePlayer = next.players[idx];
        }

        next.updatedAt = Date.now();
        this._commitState(next, previous, {
            playersChanged: true,
            activePlayerChanged: Boolean(next.activePlayer && next.activePlayer.id === normalised.id)
        });
    }

    /**
     * Remove player locally.
     * @param {string} playerId
     */
    removePlayer(playerId) {
        if (!playerId || this._circuitOpen) return;
        
        const previous = this._cloneState(this._state);
        const next = this._cloneState(this._state);

        const initialLength = next.players.length;
        next.players = next.players.filter(player =>
            player.id !== playerId && player.userId !== playerId
        );

        if (next.players.length === initialLength) {
            return;
        }

        if (next.activePlayer && (
            next.activePlayer.id === playerId ||
            next.activePlayer.userId === playerId
        )) {
            next.activePlayer = next.players[0] || null;
            next.currentPlayerIndex = next.activePlayer ? 0 : 0;
        } else {
            next.currentPlayerIndex = Math.min(next.currentPlayerIndex, Math.max(next.players.length - 1, 0));
        }

        next.updatedAt = Date.now();
        this._commitState(next, previous, { playersChanged: true, activePlayerChanged: true });
    }

    /**
     * Persist dice result.
     * @param {Object|number|null} diceResult
     */
    updateDiceResult(diceResult) {
        if (this._circuitOpen) return;
        
        const previous = this._cloneState(this._state);
        const next = this._cloneState(this._state);
        next.lastDiceResult = diceResult ?? null;
        next.updatedAt = Date.now();
        this._commitState(next, previous, { playersChanged: false, activePlayerChanged: false });
    }

    /**
     * Set active player by id.
     * @param {string} playerId
     */
    setActivePlayer(playerId) {
        if (!playerId || this._circuitOpen) return;

        const previous = this._cloneState(this._state);
        const next = this._cloneState(this._state);
        const player = next.players.find(p =>
            p.id === playerId || p.userId === playerId
        );

        if (!player || (next.activePlayer && next.activePlayer.id === player.id)) {
            return;
        }

        next.activePlayer = player;
        next.currentPlayerIndex = next.players.findIndex(p => p.id === player.id);
        next.updatedAt = Date.now();
        this._commitState(next, previous, { playersChanged: false, activePlayerChanged: true });
    }

    /**
     * Rotate to next player.
     */
    passTurnToNextPlayer() {
        if (!this._state.players.length || this._circuitOpen) return;
        
        const previous = this._cloneState(this._state);
        const next = this._cloneState(this._state);

        next.currentPlayerIndex = (next.currentPlayerIndex + 1) % next.players.length;
        next.activePlayer = next.players[next.currentPlayerIndex] || null;
        next.updatedAt = Date.now();
        this._commitState(next, previous, { playersChanged: false, activePlayerChanged: true });
    }

    /**
     * –£–õ–£–ß–®–ï–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ö–æ–¥ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ä–µ–∫—É—Ä—Å–∏–∏
     */
    forceStartFirstTurn() {
        if (!this._state.players.length || this._circuitOpen) {
            console.warn('‚ö†Ô∏è GameStateManager: –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞ –∏–ª–∏ circuit breaker –æ—Ç–∫—Ä—ã—Ç');
            return;
        }

        if (this._state.activePlayer) {
            console.log('‚ÑπÔ∏è GameStateManager: –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', this._state.activePlayer.username || this._state.activePlayer.id);
            return;
        }

        const previous = this._cloneState(this._state);
        const next = this._cloneState(this._state);

        console.log('üéØ GameStateManager: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –¥–ª—è –∏–≥—Ä–æ–∫–∞:', next.players[0].username || next.players[0].id);
        
        next.currentPlayerIndex = 0;
        next.activePlayer = next.players[0];
        next.updatedAt = Date.now();
        this._commitState(next, previous, { playersChanged: false, activePlayerChanged: true });
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–µ—Ç–æ–¥—ã forceUpdateAllComponents() –∏ forceUpdateSafe()
     * –í–º–µ—Å—Ç–æ –Ω–∏—Ö - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    safeUpdateComponents() {
        if (this._circuitOpen) {
            console.warn('‚ö†Ô∏è GameStateManager: Circuit breaker –æ—Ç–∫—Ä—ã—Ç, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø—Ä–æ–ø—É—â–µ–Ω–æ');
            return;
        }
        
        console.log('üîÑ GameStateManager: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (this._state.players.length > 0 && !this._state.activePlayer) {
            console.log('üéØ GameStateManager: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ');
            this.forceStartFirstTurn();
        }
        
        // –≠–º–∏—Ç–∏–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        this._debouncedNotify('state:updated', this._state);
        this._debouncedNotify('players:updated', { 
            players: this._state.players,
            activePlayer: this._state.activePlayer
        });
        
        console.log('‚úÖ GameStateManager: UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ');
    }

    /**
     * Subscribe on event.
     * @param {string} event
     * @param {Function} callback
     */
    on(event, callback) {
        if (!event || typeof callback !== 'function') {
            return;
        }
        if (!this.listeners.has(event)) {
            this.listeners.set(event, new Set());
        }
        this.listeners.get(event).add(callback);
    }

    /**
     * Unsubscribe handler.
     * @param {string} event
     * @param {Function} callback
     */
    off(event, callback) {
        if (!event || !this.listeners.has(event)) return;
        const set = this.listeners.get(event);
        set.delete(callback);
        if (set.size === 0) {
            this.listeners.delete(event);
        }
    }

    /**
     * Clear state (used on logout / room leave).
     */
    clear() {
        const previous = this._cloneState(this._state);
        this._state = this._createEmptyState({ roomId: previous.roomId });
        this._stateSnapshot = null;
        this._persistState();
        this._debouncedNotify('state:cleared', {});
        this._emitStateUpdate(previous, this._cloneState(this._state), {
            playersChanged: previous.players.length > 0,
            activePlayerChanged: Boolean(previous.activePlayer)
        });
    }

    /**
     * Destroy manager.
     */
    destroy() {
        this.stopPeriodicUpdates();
        this.listeners.clear();
        this._state = this._createEmptyState({ roomId: this._state.roomId });
        this._stateSnapshot = null;
        this._isUpdating = false;
        this._isNotifying = false;
        this._recursionDepth = 0;
        
        // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥–∏ debounce
        if (this._notificationQueue) {
            this._notificationQueue.clear();
        }
        
        console.log('üèóÔ∏è GameStateManager v3.0: –£–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }

    /**
     * –£–õ–£–ß–®–ï–ù–û: –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å debouncing –∏ –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
     * @param {string} event
     * @param {*} data
     */
    notifyListeners(event, data) {
        if (!this.listeners.has(event) || this._circuitOpen) {
            return;
        }
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–∫—É—Ä—Å–∏–∏
        if (this._isNotifying) {
            console.warn('‚ö†Ô∏è GameStateManager: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏—è –≤ notifyListeners');
            return;
        }
        
        this._isNotifying = true;
        
        try {
            const callbacks = Array.from(this.listeners.get(event)); // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            
            for (const callback of callbacks) {
                try {
                    // –£–õ–£–ß–®–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è callback'–æ–≤
                    const timeoutId = setTimeout(() => {
                        console.warn(`‚ö†Ô∏è GameStateManager: Callback –¥–ª—è —Å–æ–±—ã—Ç–∏—è '${event}' –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ`);
                    }, 1000);
                    
                    const result = callback(data);
                    
                    // –ï—Å–ª–∏ callback –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
                    if (result && typeof result.catch === 'function') {
                        result.catch(error => {
                            console.error(`‚ùå GameStateManager async callback error (${event}):`, error);
                            this._handleError(`callback-${event}`, error);
                        });
                    }
                    
                    clearTimeout(timeoutId);
                    
                } catch (error) {
                    console.error(`‚ùå GameStateManager callback error (${event}):`, error);
                    this._handleError(`callback-${event}`, error);
                }
            }
        } finally {
            this._isNotifying = false;
        }
    }

    /**
     * –ù–û–í–û–ï: Debounced —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
     * @param {string} event
     * @param {*} data
     */
    _debouncedNotify(event, data) {
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π timeout –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        if (this._notificationQueue.has(event)) {
            clearTimeout(this._notificationQueue.get(event));
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π timeout
        const timeoutId = setTimeout(() => {
            this._notificationQueue.delete(event);
            this.notifyListeners(event, data);
        }, this._notificationDebounceMs);
        
        this._notificationQueue.set(event, timeoutId);
    }

    /**
     * –ù–û–í–û–ï: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å circuit breaker
     * @param {string} operation
     * @param {Error} error
     */
    _handleError(operation, error) {
        this._errorCount++;
        console.error(`‚ùå GameStateManager error in ${operation}:`, error);
        
        // Circuit breaker: –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        if (this._errorCount >= this._maxErrors) {
            console.error(`üö® GameStateManager: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ (${this._errorCount}), –æ—Ç–∫—Ä—ã–≤–∞–µ–º circuit breaker`);
            this._circuitOpen = true;
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º circuit breaker —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                this._circuitOpen = false;
                this._errorCount = 0;
                console.log('‚úÖ GameStateManager: Circuit breaker –∑–∞–∫—Ä—ã—Ç, –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—É');
            }, 30000);
        }
    }

    /**
     * –ù–û–í–û–ï: –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
     */
    _resetErrorCount() {
        if (this._errorCount > 0) {
            this._errorCount = Math.max(0, this._errorCount - 1);
        }
        
        if (this._circuitOpen && this._errorCount === 0) {
            this._circuitOpen = false;
            console.log('‚úÖ GameStateManager: Circuit breaker –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
        }
    }

    // ---------------------------------------------------------------------
    // Internal helpers (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
    // ---------------------------------------------------------------------

    _commitState(next, previous, meta) {
        try {
            this._state = next;
            this._stateSnapshot = null;
            this._persistState();
            this._emitStateUpdate(previous, next, meta);
        } catch (error) {
            this._handleError('commitState', error);
        }
    }

    _emitStateUpdate(previous, current, meta) {
        try {
            const snapshot = this.getState();
            this._debouncedNotify('state:updated', snapshot);

            if (meta.activePlayerChanged) {
                this._debouncedNotify('turn:changed', {
                    activePlayer: snapshot.activePlayer,
                    previousPlayer: previous.activePlayer
                });
            }

            if (meta.playersChanged) {
                this._debouncedNotify('players:updated', snapshot.players);
                this._debouncedNotify('game:playersUpdated', snapshot.players);
            }
        } catch (error) {
            this._handleError('emitStateUpdate', error);
        }
    }

    _normalisePlayer(player) {
        if (!player || typeof player !== 'object') return null;
        const id = player.id || player.userId;
        if (!id) return null;
        return {
            ...player,
            id,
            userId: player.userId || id,
            username: player.username || player.name || `player-${id}`,
            isReady: Boolean(player.isReady)
        };
    }

    _resolveActivePlayer(serverState, next) {
        const fromPayload = serverState.activePlayer ? this._normalisePlayer(serverState.activePlayer) : null;
        if (fromPayload) {
            const existing = next.players.find(p => p.id === fromPayload.id);
            if (existing) return existing;
            return fromPayload;
        }
        if (typeof serverState.currentPlayerIndex === 'number') {
            const idx = Math.max(0, Math.floor(serverState.currentPlayerIndex));
            return next.players[idx] || null;
        }
        return null;
    }

    _extractGameFlags(source) {
        const flags = {};
        const keys = ['canRoll', 'canMove', 'canEndTurn', 'gameStarted', 'lastDiceResult'];
        for (const key of keys) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
                flags[key] = source[key];
            }
        }
        return flags;
    }

    _applyFlags(target, flags) {
        let changed = false;
        for (const [key, value] of Object.entries(flags)) {
            if (target[key] !== value) {
                target[key] = value;
                changed = true;
            }
        }
        return changed;
    }

    _createEmptyState(overrides = {}) {
        return {
            roomId: null,
            players: [],
            currentPlayerIndex: 0,
            activePlayer: null,
            canRoll: false,
            canMove: false,
            canEndTurn: false,
            gameStarted: false,
            lastDiceResult: null,
            updatedAt: Date.now(),
            ...overrides
        };
    }

    _cloneState(value) {
        if (value === null || value === undefined) return value;
        if (typeof structuredClone === 'function') {
            try {
                return structuredClone(value);
            } catch (_) { /* no-op */ }
        }
        return JSON.parse(JSON.stringify(value));
    }

    _freezeSnapshot(snapshot) {
        if (!snapshot || typeof snapshot !== 'object') return snapshot;
        if (Array.isArray(snapshot)) {
            return snapshot.map(item => this._freezeSnapshot(item));
        }
        const clone = {};
        for (const [key, value] of Object.entries(snapshot)) {
            clone[key] = this._freezeSnapshot(value);
        }
        return clone;
    }

    _arePlayersEqual(a = [], b = []) {
        if (a.length !== b.length) return false;
        const serialize = (players) => players.map(player => ({
            id: player?.id,
            username: player?.username,
            money: player?.money,
            position: player?.position,
            isReady: Boolean(player?.isReady)
        }));
        return JSON.stringify(serialize(a)) === JSON.stringify(serialize(b));
    }

    _hasMiscChanges(previous, next) {
        return previous.roomId !== next.roomId ||
            previous.lastDiceResult !== next.lastDiceResult ||
            previous.gameStarted !== next.gameStarted;
    }

    _parseRoomIdFromHash() {
        if (typeof window === 'undefined' || !window.location || !window.location.hash) {
            return null;
        }
        try {
            const params = new URLSearchParams(window.location.hash.split('?')[1] || '');
            return params.get('roomId');
        } catch (_) {
            return null;
        }
    }

    _detectStorage() {
        if (typeof window === 'undefined') return null;
        const stores = [window.sessionStorage, window.localStorage].filter(Boolean);
        for (const store of stores) {
            try {
                const key = '__gsm_probe__';
                store.setItem(key, '1');
                store.removeItem(key);
                return store;
            } catch (_) {
                continue;
            }
        }
        return null;
    }

    _buildStorageKey(roomId) {
        const suffix = roomId || this._state.roomId || 'global';
        return `${STORAGE_KEY_PREFIX}:${suffix}`;
    }

    _hydrateFromStorage(explicitRoomId) {
        if (!this._storage) return;
        const key = this._buildStorageKey(explicitRoomId);
        try {
            const raw = this._storage.getItem(key);
            if (!raw) return;
            const stored = JSON.parse(raw);
            if (!stored || typeof stored !== 'object') return;
            this._state = this._createEmptyState({
                ...stored,
                roomId: explicitRoomId || this._state.roomId
            });
            this._stateSnapshot = null;
            this._hydratedFromStorage = true;
            console.log('üèóÔ∏è GameStateManager v3.0: state restored from storage', {
                roomId: this._state.roomId,
                players: this._state.players.length
            });
        } catch (error) {
            console.warn('‚ö†Ô∏è GameStateManager: failed to hydrate state', error);
        }
    }

    _persistState() {
        if (!this._storage) return;
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–∫—É—Ä—Å–∏–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (this._persisting) {
            console.warn('‚ö†Ô∏è GameStateManager: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏—è –≤ _persistState');
            return;
        }
        
        this._persisting = true;
        
        try {
            const key = this._buildStorageKey();
            const payload = this._cloneState(this._state);
            this._storage.setItem(key, JSON.stringify(payload));
        } catch (error) {
            console.warn('‚ö†Ô∏è GameStateManager: failed to persist state', error);
        } finally {
            this._persisting = false;
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç
if (typeof window !== 'undefined') {
    window.GameStateManager = GameStateManager;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = GameStateManager;
}

// Version: 3.0.0 - Refactored & Optimized - Fixed all major issues