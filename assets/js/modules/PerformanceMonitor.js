/**
 * PerformanceMonitor v1.0.0
 * –ú–æ–¥—É–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–∞–º—è—Ç–∏
 */

class PerformanceMonitor {
    constructor() {
        this.metrics = {
            memory: {
                used: 0,
                total: 0,
                limit: 0
            },
            performance: {
                renderTime: 0,
                updateTime: 0,
                apiCallTime: 0
            },
            errors: {
                count: 0,
                lastError: null,
                errorTypes: new Map()
            },
            rateLimiting: {
                blockedRequests: 0,
                averageWaitTime: 0,
                lastBlocked: 0
            }
        };
        
        this.startTime = Date.now();
        this.isMonitoring = false;
        this.monitorInterval = null;
        
        console.log('üìä PerformanceMonitor: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    start() {
        if (this.isMonitoring) {
            console.log('‚ö†Ô∏è PerformanceMonitor: –£–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }
        
        this.isMonitoring = true;
        this.monitorInterval = setInterval(() => {
            this.updateMetrics();
        }, 5000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        
        console.log('üìä PerformanceMonitor: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω');
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    stop() {
        if (!this.isMonitoring) {
            return;
        }
        
        this.isMonitoring = false;
        if (this.monitorInterval) {
            clearInterval(this.monitorInterval);
            this.monitorInterval = null;
        }
        
        console.log('üìä PerformanceMonitor: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
     */
    updateMetrics() {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏
            if (performance.memory) {
                this.metrics.memory.used = performance.memory.usedJSHeapSize;
                this.metrics.memory.total = performance.memory.totalJSHeapSize;
                this.metrics.memory.limit = performance.memory.jsHeapSizeLimit;
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            const memoryUsagePercent = (this.metrics.memory.used / this.metrics.memory.limit) * 100;
            if (memoryUsagePercent > 80) {
                console.warn(`‚ö†Ô∏è PerformanceMonitor: –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memoryUsagePercent.toFixed(1)}%`);
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è PerformanceMonitor: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫:', error);
        }
    }
    
    /**
     * –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
     */
    measureTime(fn, context = 'unknown') {
        const start = performance.now();
        const result = fn();
        const end = performance.now();
        const duration = end - start;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if (context.includes('render')) {
            this.metrics.performance.renderTime = duration;
        } else if (context.includes('update')) {
            this.metrics.performance.updateTime = duration;
        } else if (context.includes('api')) {
            this.metrics.performance.apiCallTime = duration;
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if (duration > 100) {
            console.warn(`‚ö†Ô∏è PerformanceMonitor: –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è ${context}: ${duration.toFixed(2)}ms`);
        }
        
        return result;
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∏
     */
    logError(error, context = 'unknown') {
        this.metrics.errors.count++;
        this.metrics.errors.lastError = {
            message: error.message || error,
            context,
            timestamp: Date.now()
        };
        
        const errorType = error.name || 'UnknownError';
        const currentCount = this.metrics.errors.errorTypes.get(errorType) || 0;
        this.metrics.errors.errorTypes.set(errorType, currentCount + 1);
        
        console.error(`‚ùå PerformanceMonitor: –û—à–∏–±–∫–∞ –≤ ${context}:`, error);
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
     */
    logBlockedRequest(waitTime) {
        this.metrics.rateLimiting.blockedRequests++;
        this.metrics.rateLimiting.lastBlocked = Date.now();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        const currentAvg = this.metrics.rateLimiting.averageWaitTime;
        const totalRequests = this.metrics.rateLimiting.blockedRequests;
        this.metrics.rateLimiting.averageWaitTime = 
            (currentAvg * (totalRequests - 1) + waitTime) / totalRequests;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    getReport() {
        const uptime = Date.now() - this.startTime;
        const memoryUsagePercent = (this.metrics.memory.used / this.metrics.memory.limit) * 100;
        
        return {
            uptime: Math.round(uptime / 1000), // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            memory: {
                used: Math.round(this.metrics.memory.used / 1024 / 1024), // –≤ MB
                total: Math.round(this.metrics.memory.total / 1024 / 1024), // –≤ MB
                limit: Math.round(this.metrics.memory.limit / 1024 / 1024), // –≤ MB
                usagePercent: Math.round(memoryUsagePercent * 10) / 10
            },
            performance: {
                renderTime: Math.round(this.metrics.performance.renderTime * 100) / 100,
                updateTime: Math.round(this.metrics.performance.updateTime * 100) / 100,
                apiCallTime: Math.round(this.metrics.performance.apiCallTime * 100) / 100
            },
            errors: {
                count: this.metrics.errors.count,
                lastError: this.metrics.errors.lastError,
                errorTypes: Object.fromEntries(this.metrics.errors.errorTypes)
            },
            rateLimiting: {
                blockedRequests: this.metrics.rateLimiting.blockedRequests,
                averageWaitTime: Math.round(this.metrics.rateLimiting.averageWaitTime),
                lastBlocked: this.metrics.rateLimiting.lastBlocked
            }
        };
    }
    
    /**
     * –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
     */
    printReport() {
        const report = this.getReport();
        console.group('üìä PerformanceMonitor Report');
        console.log('‚è±Ô∏è Uptime:', report.uptime + 's');
        console.log('üíæ Memory:', `${report.memory.used}MB / ${report.memory.limit}MB (${report.memory.usagePercent}%)`);
        console.log('‚ö° Performance:', report.performance);
        console.log('‚ùå Errors:', report.errors.count, 'total');
        if (report.errors.count > 0) {
            console.log('   Last error:', report.errors.lastError);
            console.log('   Error types:', report.errors.errorTypes);
        }
        console.log('üö´ Rate Limiting:', report.rateLimiting);
        console.groupEnd();
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –º–µ—Ç—Ä–∏–∫
     */
    reset() {
        this.metrics = {
            memory: { used: 0, total: 0, limit: 0 },
            performance: { renderTime: 0, updateTime: 0, apiCallTime: 0 },
            errors: { count: 0, lastError: null, errorTypes: new Map() },
            rateLimiting: { blockedRequests: 0, averageWaitTime: 0, lastBlocked: 0 }
        };
        this.startTime = Date.now();
        console.log('üìä PerformanceMonitor: –ú–µ—Ç—Ä–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞
     */
    destroy() {
        this.stop();
        this.reset();
        console.log('üìä PerformanceMonitor: –£–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
if (typeof window !== 'undefined') {
    window.PerformanceMonitor = PerformanceMonitor;
    window.performanceMonitor = new PerformanceMonitor();
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = PerformanceMonitor;
}
