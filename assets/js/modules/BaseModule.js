/**
 * BaseModule v1.0.0
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
 * –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
 */

class BaseModule {
    constructor(config = {}) {
        this.gameState = config.gameState || null;
        this.eventBus = config.eventBus || null;
        this.gameStateManager = config.gameStateManager || null;
        this.roomApi = config.roomApi || null;
        
        // –û–±—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
        this.currentUserId = null;
        this.currentRoomId = null;
        this.isInitialized = false;
        
        console.log('üèóÔ∏è BaseModule: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    initCurrentUser() {
        try {
            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            let userData = localStorage.getItem('currentUser');
            if (!userData) {
                userData = sessionStorage.getItem('am_player_bundle');
            }
            
            if (userData) {
                const user = JSON.parse(userData);
                this.currentUserId = user.id || user.userId;
                this.currentRoomId = user.roomId || this.getCurrentRoomId();
                console.log('‚úÖ BaseModule: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', {
                    userId: this.currentUserId,
                    roomId: this.currentRoomId
                });
            } else {
                console.warn('‚ö†Ô∏è BaseModule: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }
        } catch (error) {
            console.error('‚ùå BaseModule: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–æ–º–Ω–∞—Ç—ã –∏–∑ URL
     */
    getCurrentRoomId() {
        // 1. –ò–∑ URL hash
        const hash = window.location.hash;
        const hashMatch = hash.match(/roomId=([^&]+)/);
        if (hashMatch) return hashMatch[1];
        
        // 2. –ò–∑ URL search params
        const searchParams = new URLSearchParams(window.location.search);
        const roomId = searchParams.get('roomId');
        if (roomId) return roomId;
        
        // 3. –ò–∑ sessionStorage
        try {
            const bundleRaw = sessionStorage.getItem('am_player_bundle');
            if (bundleRaw) {
                const bundle = JSON.parse(bundleRaw);
                return bundle.roomId;
            }
        } catch (e) {
            console.warn('‚ö†Ô∏è BaseModule: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è roomId –∏–∑ sessionStorage:', e);
        }
        
        return null;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ GameState
     */
    async getCurrentUserPlayer() {
        if (!this.gameState && !this.gameStateManager) return null;
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º currentUserId –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–≥—Ä–æ–∫–∞–º –≤ –∏–≥—Ä–µ
        if (this.currentUserId) {
            const gameStateManager = this.gameStateManager || window.app?.getModule?.('gameStateManager');
            const state = gameStateManager?.getState?.();
            const players = state?.players || [];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º ID
            let player = players.find(p => p.id === this.currentUserId);
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID, –∏—â–µ–º –ø–æ username –∏–∑ localStorage
            if (!player) {
                try {
                    const userData = localStorage.getItem('currentUser');
                    if (userData) {
                        const user = JSON.parse(userData);
                        player = players.find(p => p.username === user.username);
                        if (player) {
                            console.log('üîß BaseModule: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º currentUserId —Å', this.currentUserId, '–Ω–∞', player.id);
                            this.currentUserId = player.id;
                        }
                    }
                } catch (e) {
                    console.warn('‚ö†Ô∏è BaseModule: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è currentUserId:', e);
                }
            }
            
            return player;
        }
        
        return null;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å fallback –ª–æ–≥–∏–∫–æ–π
     */
    async getCurrentUserPlayerWithFallback() {
        console.log('üîß BaseModule: –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞...');
        
        const gameStateManager = this.gameStateManager || window.app?.getModule?.('gameStateManager');
        const state = gameStateManager?.getState?.();
        const players = state?.players || [];
        
        console.log('üîß BaseModule: –ò–≥—Ä–æ–∫–∏ –≤ –∏–≥—Ä–µ:', players.map(p => ({ id: p.id, username: p.username })));
        
        // –ò—â–µ–º –ø–æ username –∏–∑ localStorage
        try {
            const userData = localStorage.getItem('currentUser');
            if (userData) {
                const user = JSON.parse(userData);
                const player = players.find(p => p.username === user.username);
                if (player) {
                    console.log('‚úÖ BaseModule: –ù–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫ —á–µ—Ä–µ–∑ fallback:', player.username);
                    this.currentUserId = player.id;
                    return player;
                }
            }
        } catch (e) {
            console.warn('‚ö†Ô∏è BaseModule: –û—à–∏–±–∫–∞ fallback –ª–æ–≥–∏–∫–∏:', e);
        }
        
        return null;
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
     */
    formatNumber(num) {
        if (typeof num !== 'number') return '0';
        return num.toLocaleString('ru-RU');
    }
    
    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNotification(message, type = 'info') {
        if (this.eventBus) {
            this.eventBus.emit('notification', { message, type });
        } else {
            console.log(`üì¢ ${type.toUpperCase()}: ${message}`);
        }
    }
    
    /**
     * –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤
     */
    debounce(func, delay = 300) {
        let timeoutId;
        return (...args) => {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => func.apply(this, args), delay);
        };
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è
     */
    ensureInitialized() {
        if (!this.isInitialized) {
            console.warn('‚ö†Ô∏è BaseModule: –ú–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return false;
        }
        return true;
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è
     */
    destroy() {
        this.gameState = null;
        this.eventBus = null;
        this.gameStateManager = null;
        this.roomApi = null;
        this.currentUserId = null;
        this.currentRoomId = null;
        this.isInitialized = false;
        console.log('üóëÔ∏è BaseModule: –£–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.BaseModule = BaseModule;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = BaseModule;
}

console.log('‚úÖ BaseModule: –ó–∞–≥—Ä—É–∂–µ–Ω');
