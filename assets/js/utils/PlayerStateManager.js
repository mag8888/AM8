/**
 * PlayerStateManager v1.0.0
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä–æ–∫–æ–≤
 * –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
 */

class PlayerStateManager {
    constructor() {
        this.currentUser = null;
        this.currentRoom = null;
        this.selectedToken = null;
        this.dreamData = {
            id: '',
            title: '',
            description: '',
            cost: 0,
            icon: ''
        };
        
        this.listeners = new Map();
        this.cache = new Map();
        
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
     */
    init() {
        this.loadCurrentUser();
        this.loadDreamData();
        this.loadSelectedToken();
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    loadCurrentUser() {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ sessionStorage
            const bundleRaw = sessionStorage.getItem('am_player_bundle');
            if (bundleRaw) {
                const bundle = JSON.parse(bundleRaw);
                this.currentUser = bundle.currentUser;
                return;
            }
            
            // Fallback –∫ localStorage
            const userRaw = localStorage.getItem('currentUser') || localStorage.getItem('aura_money_user');
            if (userRaw) {
                this.currentUser = JSON.parse(userRaw);
            }
            
            // –ï—Å–ª–∏ currentUser –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º fallback
            if (!this.currentUser || !this.currentUser.username) {
                this.currentUser = {
                    id: `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                    username: 'player1',
                    name: '–ò–≥—Ä–æ–∫ 1',
                    avatar: 'üë§'
                };
            }
        } catch (error) {
            console.error('‚ùå PlayerStateManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            this.currentUser = {
                id: `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                username: 'player1',
                name: '–ò–≥—Ä–æ–∫ 1',
                avatar: 'üë§'
            };
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ—á—Ç—ã
     */
    loadDreamData() {
        try {
            const dreamRaw = localStorage.getItem('selected_dream');
            if (dreamRaw) {
                this.dreamData = JSON.parse(dreamRaw);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è PlayerStateManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—á—Ç—ã:', error);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
     */
    loadSelectedToken() {
        this.selectedToken = localStorage.getItem('selected_token') || null;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object|null} –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getCurrentUser() {
        return this.currentUser;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {string|null} ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getCurrentUserId() {
        return this.currentUser?.id || this.currentUser?.userId;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Object|null} –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
     */
    getCurrentRoom() {
        return this.currentRoom;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
     * @param {Object} room - –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
     */
    setCurrentRoom(room) {
        this.currentRoom = room;
        this.notifyListeners('roomChanged', room);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
     * @returns {string|null} –¢–æ–∫–µ–Ω
     */
    getSelectedToken() {
        return this.selectedToken;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
     * @param {string} token - –¢–æ–∫–µ–Ω
     */
    setSelectedToken(token) {
        this.selectedToken = token;
        localStorage.setItem('selected_token', token);
        this.notifyListeners('tokenChanged', token);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ—á—Ç—ã
     * @returns {Object} –î–∞–Ω–Ω—ã–µ –º–µ—á—Ç—ã
     */
    getDreamData() {
        return this.dreamData;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ—á—Ç—ã
     * @param {Object} dream - –î–∞–Ω–Ω—ã–µ –º–µ—á—Ç—ã
     */
    setDreamData(dream) {
        this.dreamData = dream;
        localStorage.setItem('selected_dream', JSON.stringify(dream));
        this.notifyListeners('dreamChanged', dream);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –≥–æ—Ç–æ–≤ –ª–∏ –∏–≥—Ä–æ–∫ –∫ –∏–≥—Ä–µ
     * @returns {boolean} –ì–æ—Ç–æ–≤ –ª–∏ –∏–≥—Ä–æ–∫
     */
    isPlayerReady() {
        const isDreamComplete = this.dreamData.id && 
                               this.dreamData.title && 
                               this.dreamData.description && 
                               this.dreamData.cost > 0;
        const isTokenSelected = !!this.selectedToken;
        
        return isDreamComplete && isTokenSelected;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
     * @returns {Object|null} –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
     */
    getPlayerInRoom() {
        if (!this.currentRoom || !this.currentUser) return null;
        
        return this.currentRoom.players.find(p => 
            p.userId === this.currentUser.id || 
            p.username === this.currentUser.username ||
            p.id === this.currentUser.id
        );
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     * @param {Object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @returns {boolean} –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    isCurrentUser(player) {
        if (!this.currentUser || !player) return false;
        
        return player.id === this.currentUser.id ||
               player.userId === this.currentUser.id ||
               player.username === this.currentUser.username ||
               (player.username && this.currentUser.username && 
                player.username === this.currentUser.username);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –¥–ª—è API
     * @returns {Object} –ü–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö
     */
    getPlayerBundle() {
        if (!this.currentUser) {
            throw new Error('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
        }
        
        let userId = this.currentUser.id || this.currentUser.userId;
        if (!userId && this.currentUser.username) {
            userId = `user_${this.currentUser.username}_${Date.now()}`;
        }
        
        return {
            userId: userId,
            username: this.currentUser.username || this.currentUser.name,
            name: this.currentUser.name || this.currentUser.username,
            avatar: this.currentUser.avatar || '',
            token: this.selectedToken || '',
            dream: this.dreamData.id ? {
                id: this.dreamData.id,
                title: this.dreamData.title || '',
                description: this.dreamData.description || '',
                cost: Number(this.dreamData.cost) || 0
            } : null,
            isReady: this.isPlayerReady()
        };
    }
    
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
     * @param {Object} bundle - –ü–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    validatePlayerBundle(bundle) {
        if (!bundle?.userId || !bundle?.username) {
            return { isValid: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' };
        }
        if (!bundle?.token) {
            return { isValid: false, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏—à–∫—É' };
        }
        if (!bundle?.dream || !bundle.dream.id || !bundle.dream.title || !bundle.dream.cost) {
            return { isValid: false, message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –º–µ—á—Ç—É –ø–æ–ª–Ω–æ—Å—Ç—å—é' };
        }
        
        return { isValid: true };
    }
    
    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @param {string} event - –°–æ–±—ã—Ç–∏–µ
     * @param {Function} callback - –û–±—Ä–∞–±–æ—Ç—á–∏–∫
     */
    on(event, callback) {
        if (!this.listeners.has(event)) {
            this.listeners.set(event, []);
        }
        this.listeners.get(event).push(callback);
    }
    
    /**
     * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @param {string} event - –°–æ–±—ã—Ç–∏–µ
     * @param {Function} callback - –û–±—Ä–∞–±–æ—Ç—á–∏–∫
     */
    off(event, callback) {
        if (!this.listeners.has(event)) return;
        
        const callbacks = this.listeners.get(event);
        const index = callbacks.indexOf(callback);
        if (index > -1) {
            callbacks.splice(index, 1);
        }
    }
    
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
     * @param {string} event - –°–æ–±—ã—Ç–∏–µ
     * @param {*} data - –î–∞–Ω–Ω—ã–µ
     */
    notifyListeners(event, data) {
        if (!this.listeners.has(event)) return;
        
        this.listeners.get(event).forEach(callback => {
            try {
                callback(data);
            } catch (error) {
                console.error(`‚ùå PlayerStateManager: –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ ${event}:`, error);
            }
        });
    }
    
    /**
     * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     * @param {string} key - –ö–ª—é—á
     * @param {*} data - –î–∞–Ω–Ω—ã–µ
     * @param {number} ttl - –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ –º—Å
     */
    setCache(key, data, ttl = 5000) {
        this.cache.set(key, {
            data,
            expires: Date.now() + ttl
        });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
     * @param {string} key - –ö–ª—é—á
     * @returns {*} –î–∞–Ω–Ω—ã–µ –∏–ª–∏ null
     */
    getCache(key) {
        const cached = this.cache.get(key);
        if (!cached) return null;
        
        if (Date.now() > cached.expires) {
            this.cache.delete(key);
            return null;
        }
        
        return cached.data;
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
     */
    clearCache() {
        this.cache.clear();
    }
    
    /**
     * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    reset() {
        this.currentUser = null;
        this.currentRoom = null;
        this.selectedToken = null;
        this.dreamData = {
            id: '',
            title: '',
            description: '',
            cost: 0,
            icon: ''
        };
        this.clearCache();
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const playerStateManager = new PlayerStateManager();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.PlayerStateManager = PlayerStateManager;
    window.playerStateManager = playerStateManager;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = PlayerStateManager;
}
