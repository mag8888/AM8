/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã
 */

class GameDataManager {
    constructor() {
        this.cache = new Map();
        this.cacheTimeout = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    init() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.loadCache();
        
        // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        setInterval(() => {
            this.cleanExpiredCache();
        }, 10 * 60 * 1000);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {boolean} useCache - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
     * @returns {Promise<Object>} - –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
     */
    async getRoomData(roomId, useCache = true) {
        const cacheKey = `room_${roomId}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (useCache && this.cache.has(cacheKey)) {
            const cached = this.cache.get(cacheKey);
            if (Date.now() - cached.timestamp < this.cacheTimeout) {
                console.log(`üì¶ GameDataManager: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
                return cached.data;
            }
        }
        
        try {
            console.log(`üåê GameDataManager: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
            const data = await window.apiClient.get(`/api/rooms/${roomId}?include=players,ready,status`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            this.cache.set(cacheKey, {
                data: data,
                timestamp: Date.now()
            });
            
            return data;
        } catch (error) {
            console.error(`‚ùå GameDataManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã ${roomId}:`, error);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (this.cache.has(cacheKey)) {
                console.log(`üì¶ GameDataManager: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
                return this.cache.get(cacheKey).data;
            }
            
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
     * @param {boolean} useCache - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
     * @returns {Promise<Array>} - –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
     */
    async getRoomsList(useCache = true) {
        const cacheKey = 'rooms_list';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (useCache && this.cache.has(cacheKey)) {
            const cached = this.cache.get(cacheKey);
            if (Date.now() - cached.timestamp < this.cacheTimeout) {
                console.log('üì¶ GameDataManager: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç');
                return cached.data;
            }
        }
        
        try {
            console.log('üåê GameDataManager: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç');
            const data = await window.apiClient.get('/api/rooms');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            this.cache.set(cacheKey, {
                data: data,
                timestamp: Date.now()
            });
            
            return data;
        } catch (error) {
            console.error('‚ùå GameDataManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç:', error);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (this.cache.has(cacheKey)) {
                console.log('üì¶ GameDataManager: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç');
                return this.cache.get(cacheKey).data;
            }
            
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {Object} playerData - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async updatePlayerData(roomId, playerData) {
        try {
            console.log(`üåê GameDataManager: –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
            const result = await window.apiClient.put(`/api/rooms/${roomId}/player`, playerData);
            
            // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –∫–æ–º–Ω–∞—Ç—ã
            this.invalidateRoomCache(roomId);
            
            return result;
        } catch (error) {
            console.error(`‚ùå GameDataManager: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:`, error);
            throw error;
        }
    }

    /**
     * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {Object} playerData - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    async joinRoom(roomId, playerData) {
        try {
            console.log(`üåê GameDataManager: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
            const result = await window.apiClient.post(`/api/rooms/${roomId}/join`, playerData);
            
            // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –∫–æ–º–Ω–∞—Ç—ã
            this.invalidateRoomCache(roomId);
            
            return result;
        } catch (error) {
            console.error(`‚ùå GameDataManager: –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:`, error);
            throw error;
        }
    }

    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞
     */
    async startGame(roomId) {
        try {
            console.log(`üåê GameDataManager: –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
            const result = await window.apiClient.post(`/api/rooms/${roomId}/start`);
            
            // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –∫–æ–º–Ω–∞—Ç—ã
            this.invalidateRoomCache(roomId);
            
            return result;
        } catch (error) {
            console.error(`‚ùå GameDataManager: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:`, error);
            throw error;
        }
    }

    /**
     * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     */
    invalidateRoomCache(roomId) {
        const cacheKey = `room_${roomId}`;
        this.cache.delete(cacheKey);
        console.log(`üóëÔ∏è GameDataManager: –ö—ç—à –∫–æ–º–Ω–∞—Ç—ã ${roomId} –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω`);
    }

    /**
     * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å –∫—ç—à
     */
    invalidateAllCache() {
        this.cache.clear();
        console.log('üóëÔ∏è GameDataManager: –í–µ—Å—å –∫—ç—à –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à –∏–∑ localStorage
     */
    loadCache() {
        try {
            const cached = CommonUtils.storage.get('game_data_cache', {});
            const now = Date.now();
            
            for (const [key, value] of Object.entries(cached)) {
                if (now - value.timestamp < this.cacheTimeout) {
                    this.cache.set(key, value);
                }
            }
            
            console.log(`üì¶ GameDataManager: –ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à (${this.cache.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)`);
        } catch (error) {
            console.warn('‚ö†Ô∏è GameDataManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞:', error);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—ç—à –≤ localStorage
     */
    saveCache() {
        try {
            const cacheData = {};
            for (const [key, value] of this.cache.entries()) {
                cacheData[key] = value;
            }
            
            CommonUtils.storage.set('game_data_cache', cacheData);
            console.log(`üíæ GameDataManager: –ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω (${this.cache.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)`);
        } catch (error) {
            console.warn('‚ö†Ô∏è GameDataManager: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞:', error);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
     */
    cleanExpiredCache() {
        const now = Date.now();
        let cleaned = 0;
        
        for (const [key, value] of this.cache.entries()) {
            if (now - value.timestamp >= this.cacheTimeout) {
                this.cache.delete(key);
                cleaned++;
            }
        }
        
        if (cleaned > 0) {
            console.log(`üßπ GameDataManager: –û—á–∏—â–µ–Ω–æ ${cleaned} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫—ç—à–∞`);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
     * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
     */
    getCacheStats() {
        const now = Date.now();
        let valid = 0;
        let expired = 0;
        
        for (const value of this.cache.values()) {
            if (now - value.timestamp < this.cacheTimeout) {
                valid++;
            } else {
                expired++;
            }
        }
        
        return {
            total: this.cache.size,
            valid,
            expired,
            timeout: this.cacheTimeout
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
window.gameDataManager = new GameDataManager();

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    window.gameDataManager.saveCache();
});

console.log('‚úÖ GameDataManager –∑–∞–≥—Ä—É–∂–µ–Ω');
