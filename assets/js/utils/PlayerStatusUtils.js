/**
 * PlayerStatusUtils v1.0.0
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
 * –ï–¥–∏–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */

class PlayerStatusUtils {
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–∞
     * @param {Object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @param {Object} activePlayer - –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
     * @param {boolean} isCurrentUser - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     * @returns {string} –°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞
     */
    static getPlayerStatus(player, activePlayer, isCurrentUser = false) {
        if (activePlayer && activePlayer.id === player.id) {
            return isCurrentUser ? 'üéØ –í–∞—à —Ö–æ–¥' : 'üéØ –•–æ–¥ –∏–≥—Ä–æ–∫–∞';
        }
        
        if (player.isReady) {
            return '‚úÖ –ì–æ—Ç–æ–≤';
        }
        
        return '‚è≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è';
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
     * @param {Object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @returns {string} –ò–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    static getPlayerDisplayName(player) {
        return player.username || player.name || `–ò–≥—Ä–æ–∫ ${player.id}`;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏–≥—Ä–æ–∫–∞
     * @param {Object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @returns {string} –≠–º–æ–¥–∑–∏ —Ç–æ–∫–µ–Ω–∞
     */
    static getPlayerToken(player) {
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —ç–º–æ–¥–∑–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if (player.token && /[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/u.test(player.token)) {
            return player.token;
        }
        
        const tokenIcons = {
            'lion': 'ü¶Å',
            'eagle': 'ü¶Ö', 
            'fox': 'ü¶ä',
            'bear': 'üêª',
            'tiger': 'üêÖ',
            'wolf': 'üê∫',
            'elephant': 'üêò',
            'shark': 'ü¶à',
            'owl': 'ü¶â',
            'dolphin': 'üê¨'
        };
        
        return tokenIcons[player.token] || 'üéØ';
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
     * @param {Object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
     */
    static getPlayerBalance(player) {
        const balance = player.money || player.balance || 0;
        return `$${balance.toLocaleString()}`;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º
     * @param {Object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @param {Object} activePlayer - –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
     * @returns {boolean} –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –∏–≥—Ä–æ–∫
     */
    static isPlayerActive(player, activePlayer) {
        return activePlayer && activePlayer.id === player.id;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ CSS –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞
     * @param {Object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @param {Object} activePlayer - –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
     * @param {boolean} isCurrentUser - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     * @returns {string} CSS –∫–ª–∞—Å—Å
     */
    static getPlayerCSSClass(player, activePlayer, isCurrentUser = false) {
        const classes = ['player-item'];
        
        if (this.isPlayerActive(player, activePlayer)) {
            classes.push('active');
        }
        
        if (isCurrentUser) {
            classes.push('current-user');
        }
        
        if (!player.isReady) {
            classes.push('not-ready');
        }
        
        return classes.join(' ');
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∏–≥—Ä–æ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
     * @param {Object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @param {Array} players - –í—Å–µ –∏–≥—Ä–æ–∫–∏
     * @returns {number} –ü–æ—Ä—è–¥–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏ (1-based)
     */
    static getPlayerOrder(player, players) {
        const sortedPlayers = [...players].sort((a, b) => {
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏, –∑–∞—Ç–µ–º –ø–æ –∏–º–µ–Ω–∏
            if (a.isReady !== b.isReady) {
                return b.isReady - a.isReady;
            }
            return (a.username || a.name || '').localeCompare(b.username || b.name || '');
        });
        
        return sortedPlayers.findIndex(p => p.id === player.id) + 1;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–∞
     * @param {Object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @param {Object} activePlayer - –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
     * @param {Array} players - –í—Å–µ –∏–≥—Ä–æ–∫–∏
     * @param {boolean} isCurrentUser - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     * @returns {Object} –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
     */
    static getPlayerStatusInfo(player, activePlayer, players, isCurrentUser = false) {
        const isActive = this.isPlayerActive(player, activePlayer);
        const order = this.getPlayerOrder(player, players);
        const status = this.getPlayerStatus(player, activePlayer, isCurrentUser);
        
        return {
            status,
            isActive,
            order,
            isReady: player.isReady,
            isCurrentUser,
            cssClass: this.getPlayerCSSClass(player, activePlayer, isCurrentUser)
        };
    }
    
    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
     * @param {Array} players - –ú–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤
     * @param {string} status - –°—Ç–∞—Ç—É—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     * @param {Object} activePlayer - –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
     * @returns {Array} –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏
     */
    static filterPlayersByStatus(players, status, activePlayer) {
        return players.filter(player => {
            const playerStatus = this.getPlayerStatus(player, activePlayer);
            return playerStatus === status;
        });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
     * @param {Array} players - –ú–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤
     * @param {Object} activePlayer - –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    static getPlayersStats(players, activePlayer) {
        const total = players.length;
        const ready = players.filter(p => p.isReady).length;
        const active = activePlayer ? 1 : 0;
        const waiting = total - ready - active;
        
        return {
            total,
            ready,
            active,
            waiting,
            readyPercentage: total > 0 ? Math.round((ready / total) * 100) : 0
        };
    }
    
    /**
     * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
     * @param {Object} a - –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫
     * @param {Object} b - –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫
     * @param {Object} activePlayer - –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
     * @returns {number} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    static comparePlayers(a, b, activePlayer) {
        // –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π
        if (activePlayer) {
            if (a.id === activePlayer.id) return -1;
            if (b.id === activePlayer.id) return 1;
        }
        
        // –ó–∞—Ç–µ–º –≥–æ—Ç–æ–≤—ã–µ –∏–≥—Ä–æ–∫–∏
        if (a.isReady !== b.isReady) {
            return b.isReady - a.isReady;
        }
        
        // –ó–∞—Ç–µ–º –ø–æ –∏–º–µ–Ω–∏
        const nameA = a.username || a.name || '';
        const nameB = b.username || b.name || '';
        return nameA.localeCompare(nameB);
    }
    
    /**
     * –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
     * @param {Array} players - –ú–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤
     * @param {Object} activePlayer - –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
     * @returns {Array} –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏
     */
    static sortPlayers(players, activePlayer) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ players —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
        if (!Array.isArray(players)) {
            console.warn('PlayerStatusUtils: players –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', typeof players, players);
            return [];
        }
        return [...players].sort((a, b) => this.comparePlayers(a, b, activePlayer));
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.PlayerStatusUtils = PlayerStatusUtils;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = PlayerStatusUtils;
}
