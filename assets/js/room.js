/**
 * Room Page Controller v1.0.0
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let roomService;
let currentRoom = null;
let currentUser = null;
let selectedToken = null;
let dreamData = {
    title: '',
    description: '',
    cost: 0
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ—á—Ç (—Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—á—Ç—ã –∏–∑ –∏–≥—Ä—ã)
const DREAMS_CONFIG = [
    {
        id: 'dream_house',
        name: '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–º –º–µ—á—Ç—ã –¥–ª—è —Å–µ–º—å–∏',
        description: '–°–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–æ–º –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏',
        cost: 100000,
        icon: 'üè†'
    },
    {
        id: 'antarctica_trip',
        name: '–ü–æ—Å–µ—Ç–∏—Ç—å –ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥—É',
        description: '–£–≤–∏–¥–µ—Ç—å —Å–∞–º—ã–π –∑–∞–≥–∞–¥–æ—á–Ω—ã–π –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç –ø–ª–∞–Ω–µ—Ç—ã',
        cost: 150000,
        icon: 'üßä'
    },
    {
        id: 'mountain_peaks',
        name: '–ü–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞ –≤—Å–µ –≤—ã—Å–æ—á–∞–π—à–∏–µ –≤–µ—Ä—à–∏–Ω—ã –º–∏—Ä–∞',
        description: '–ü–æ–∫–æ—Ä–∏—Ç—å –≤—Å–µ —Å–∞–º—ã–µ –≤—ã—Å–æ–∫–∏–µ –≥–æ—Ä—ã –ø–ª–∞–Ω–µ—Ç—ã',
        cost: 500000,
        icon: 'üèîÔ∏è'
    },
    {
        id: 'bestseller_author',
        name: '–°—Ç–∞—Ç—å –∞–≤—Ç–æ—Ä–æ–º –∫–Ω–∏–≥–∏-–±–µ—Å—Ç—Å–µ–ª–ª–µ—Ä–∞',
        description: '–ù–∞–ø–∏—Å–∞—Ç—å –∫–Ω–∏–≥—É, –∫–æ—Ç–æ—Ä–∞—è –∏–∑–º–µ–Ω–∏—Ç –∂–∏–∑–Ω–∏ –ª—é–¥–µ–π',
        cost: 300000,
        icon: 'üìö'
    },
    {
        id: 'yacht_mediterranean',
        name: '–ñ–∏—Ç—å –≥–æ–¥ –Ω–∞ —è—Ö—Ç–µ –≤ –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º –º–æ—Ä–µ',
        description: '–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ü–µ–ª—ã–π –≥–æ–¥ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –ø–æ –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º—É –º–æ—Ä—é',
        cost: 300000,
        icon: '‚õµ'
    },
    {
        id: 'world_festival',
        name: '–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –º–∏—Ä–æ–≤–æ–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å',
        description: '–°–æ–∑–¥–∞—Ç—å —Ñ–µ—Å—Ç–∏–≤–∞–ª—å, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–±–µ—Ä–µ—Ç –ª—é–¥–µ–π —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞',
        cost: 200000,
        icon: 'üé™'
    },
    {
        id: 'retreat_center',
        name: '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ—Ç—Ä–∏—Ç-—Ü–µ–Ω—Ç—Ä',
        description: '–°–æ–∑–¥–∞—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –æ—Ç–¥—ã—Ö–∞',
        cost: 500000,
        icon: 'üßò'
    },
    {
        id: 'talent_fund',
        name: '–°–æ–∑–¥–∞—Ç—å —Ñ–æ–Ω–¥ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–∞–ª–∞–Ω—Ç–æ–≤',
        description: '–ü–æ–º–æ—á—å –º–æ–ª–æ–¥—ã–º —Ç–∞–ª–∞–Ω—Ç–∞–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª',
        cost: 300000,
        icon: '‚≠ê'
    },
    {
        id: 'sailing_around_world',
        name: '–ö—Ä—É–≥–æ—Å–≤–µ—Ç–Ω–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ –Ω–∞ –ø–∞—Ä—É—Å–Ω–∏–∫–µ',
        description: '–û–±–æ–≥–Ω—É—Ç—å –≤–µ—Å—å –º–∏—Ä –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º –ø–∞—Ä—É—Å–Ω–∏–∫–µ',
        cost: 200000,
        icon: '‚õµ'
    },
    {
        id: 'private_jet',
        name: '–ö—É–ø–∏—Ç—å —á–∞—Å—Ç–Ω—ã–π —Å–∞–º–æ–ª—ë—Ç',
        description: '–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∞–º–æ–ª–µ—Ç',
        cost: 1000000,
        icon: 'üõ©Ô∏è'
    },
    {
        id: 'supercar_collection',
        name: '–ö—É–ø–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å—É–ø–µ—Ä–∫–∞—Ä–æ–≤',
        description: '–°–æ–±—Ä–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å–∞–º—ã—Ö –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π',
        cost: 1000000,
        icon: 'üèéÔ∏è'
    },
    {
        id: 'feature_film',
        name: '–°–Ω—è—Ç—å –ø–æ–ª–Ω–æ–º–µ—Ç—Ä–∞–∂–Ω—ã–π —Ñ–∏–ª—å–º',
        description: '–°–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∏–ª—å–º',
        cost: 500000,
        icon: 'üé¨'
    },
    {
        id: 'thought_leader',
        name: '–°—Ç–∞—Ç—å –º–∏—Ä–æ–≤—ã–º –ª–∏–¥–µ—Ä–æ–º –º–Ω–µ–Ω–∏–π',
        description: '–í–ª–∏—è—Ç—å –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
        cost: 1000000,
        icon: 'üåç'
    },
    {
        id: 'white_yacht',
        name: '–ë–µ–ª–æ—Å–Ω–µ–∂–Ω–∞—è –Ø—Ö—Ç–∞',
        description: '–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ä–æ—Å–∫–æ—à–Ω—É—é –±–µ–ª–æ—Å–Ω–µ–∂–Ω—É—é —è—Ö—Ç—É',
        cost: 300000,
        icon: 'üõ•Ô∏è'
    },
    {
        id: 'space_flight',
        name: '–ü–æ–ª—ë—Ç –≤ –∫–æ—Å–º–æ—Å',
        description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ',
        cost: 250000,
        icon: 'üöÄ'
    }
];

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∏—à–µ–∫ (10 –∂–∏–≤–æ—Ç–Ω—ã—Ö)
const TOKENS_CONFIG = [
    {
        id: 'lion',
        name: '–õ–µ–≤',
        icon: 'ü¶Å',
        description: '–¶–∞—Ä—å –∑–≤–µ—Ä–µ–π, –ª–∏–¥–µ—Ä –ø–æ –Ω–∞—Ç—É—Ä–µ –∏ –º–∞—Å—Ç–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏'
    },
    {
        id: 'eagle',
        name: '–û—Ä–µ–ª',
        icon: 'ü¶Ö',
        description: '–û—Ä–ª–∏–Ω—ã–π –≤–∑–≥–ª—è–¥ –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –≤–∏–¥–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–≤–µ—Ä—Ö—É'
    },
    {
        id: 'fox',
        name: '–õ–∏—Å–∞',
        icon: 'ü¶ä',
        description: '–•–∏—Ç—Ä–∞—è –∏ —É–º–Ω–∞—è, –≤—Å–µ–≥–¥–∞ –Ω–∞–π–¥–µ—Ç –≤—ã–≥–æ–¥–Ω—É—é —Å–¥–µ–ª–∫—É'
    },
    {
        id: 'bear',
        name: '–ú–µ–¥–≤–µ–¥—å',
        icon: 'üêª',
        description: '–°–∏–ª—å–Ω—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π, –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä'
    },
    {
        id: 'tiger',
        name: '–¢–∏–≥—Ä',
        icon: 'üêÖ',
        description: '–ë—ã—Å—Ç—Ä—ã–π –∏ —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–π, –∞—Ç–∞–∫—É—é—â–∏–π —Å—Ç–∏–ª—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    },
    {
        id: 'wolf',
        name: '–í–æ–ª–∫',
        icon: 'üê∫',
        description: '–ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–≥—Ä–æ–∫, —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å—Ç–∞–µ –¥–ª—è –±–æ–ª—å—à–µ–π –ø—Ä–∏–±—ã–ª–∏'
    },
    {
        id: 'elephant',
        name: '–°–ª–æ–Ω',
        icon: 'üêò',
        description: '–ú—É–¥—Ä—ã–π –∏ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π, –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'
    },
    {
        id: 'shark',
        name: '–ê–∫—É–ª–∞',
        icon: 'ü¶à',
        description: '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä, —á—É–≤—Å—Ç–≤—É–µ—Ç –∑–∞–ø–∞—Ö –ø—Ä–∏–±—ã–ª–∏'
    },
    {
        id: 'owl',
        name: '–°–æ–≤–∞',
        icon: 'ü¶â',
        description: '–ú—É–¥—Ä–∞—è –∏ –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ –Ω–æ—á—å—é'
    },
    {
        id: 'dolphin',
        name: '–î–µ–ª—å—Ñ–∏–Ω',
        icon: 'üê¨',
        description: '–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π –∏ —É–º–Ω—ã–π, —Å—Ç—Ä–æ–∏—Ç —Å–µ—Ç—å –¥–µ–ª–æ–≤—ã—Ö —Å–≤—è–∑–µ–π'
    }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üè† Room: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–º–Ω–∞—Ç—ã');
    
    initializeServices();
    setupEventListeners();
    loadRoomData();
    displayUserInfo();
    loadDreams();
    loadTokens();
    updateStartGameButton();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    startRoomDataPolling();
});

// –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é –±–µ–∑ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
function navigateToGameBoard(roomId) {
    try {
        // –ü–æ–º–µ—á–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –∏–Ω–¥–µ–∫—Å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞ –∫–æ–º–Ω–∞—Ç—ã
        sessionStorage.setItem('am_navigated_to_game', '1');
        // –ò–¥–µ–º —Å—Ä–∞–∑—É –Ω–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–º–Ω–∞—Ç—ã (–∏–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞)
        window.location.href = `room.html?id=${roomId}`;
    } catch (e) {
        window.location.href = `room.html?id=${roomId}`;
    }
}

/**
 * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
 */
function startRoomDataPolling() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏)
    setInterval(async () => {
        if (currentRoom && currentUser) {
            await refreshRoomData();
        }
    }, 10000);
    
    console.log('üîÑ Room: –ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã');
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
 */
function initializeServices() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        roomService = new RoomService(window.logger || null, window.errorHandler || null);
        // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º roomService –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        window.roomService = roomService;
        // notificationService –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ –∫–∞–∫ window.notificationService
        
        console.log('‚úÖ Room: –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
        console.error('‚ùå Room: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', 'error');
    }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –∫–æ–º–Ω–∞—Ç–∞–º"
    const backButton = document.getElementById('back-to-rooms');
    if (backButton) {
        backButton.addEventListener('click', () => {
            window.location.href = 'rooms.html';
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
    const startGameButton = document.getElementById('start-game');
    if (startGameButton) {
        startGameButton.addEventListener('click', showStartGameModal);
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–Ø –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ!"
    const readyButton = document.getElementById('ready-button');
    if (readyButton) {
        readyButton.addEventListener('click', toggleReadyStatus);
    }
    
    // –ö–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authLoginBtn = document.getElementById('auth-login-btn');
    if (authLoginBtn) {
        authLoginBtn.addEventListener('click', () => {
            window.location.href = '../index.html';
        });
    }
    
    const authBackToRoomsBtn = document.getElementById('auth-back-to-rooms-btn');
    if (authBackToRoomsBtn) {
        authBackToRoomsBtn.addEventListener('click', () => {
            window.location.href = 'rooms.html';
        });
    }
    
    // –ü–æ–ª—è —Ñ–æ—Ä–º—ã –º–µ—á—Ç—ã
    const dreamSelect = document.getElementById('dream-select');
    const dreamDescription = document.getElementById('dream-description');
    const dreamCost = document.getElementById('dream-cost');
    
    if (dreamSelect) {
        dreamSelect.addEventListener('change', handleDreamSelection);
    }
    if (dreamDescription) {
        dreamDescription.addEventListener('input', updateDreamData);
    }
    if (dreamCost) {
        dreamCost.addEventListener('input', updateDreamData);
    }
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.getElementById('confirm-modal');
    const modalClose = document.getElementById('modal-close');
    const modalCancel = document.getElementById('modal-cancel');
    const modalConfirm = document.getElementById('modal-confirm');
    
    if (modalClose) {
        modalClose.addEventListener('click', hideStartGameModal);
    }
    if (modalCancel) {
        modalCancel.addEventListener('click', hideStartGameModal);
    }
    if (modalConfirm) {
        modalConfirm.addEventListener('click', confirmStartGame);
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
    if (modal) {
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                hideStartGameModal();
            }
        });
    }
    
    console.log('‚úÖ Room: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
 */
async function loadRoomData() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–Ω–∞—Ç—ã –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const urlParams = new URLSearchParams(window.location.search);
        const roomId = urlParams.get('id');
        
        if (!roomId) {
            showNotification('ID –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω', 'error');
            setTimeout(() => {
                window.location.href = 'rooms.html';
            }, 2000);
            return;
        }
        
        console.log('üè† Room: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã:', roomId);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        const room = await roomService.getRoomById(roomId);
        
        if (!room) {
            console.warn('‚ö†Ô∏è Room: –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ API, –ø—Ä–æ–±—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ');
            
            // Fallback –Ω–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
            const mockRooms = [
                {
                    id: 'room-demo-1',
                    name: '–î–µ–º–æ –∫–æ–º–Ω–∞—Ç–∞ 1',
                    maxPlayers: 4,
                    playerCount: 2,
                    status: 'waiting',
                    isStarted: false,
                    isFull: false,
                    creator: 'demo_user',
                    turnTime: 30,
                    assignProfessions: true,
                    players: [
                        { id: 'p1', username: 'demo_user', name: 'demo_user', isHost: true },
                        { id: 'p2', username: 'player1', name: 'player1', isHost: false }
                    ],
                    createdAt: new Date(Date.now() - 60000).toISOString()
                },
                {
                    id: 'room-demo-2',
                    name: '–¢—É—Ä–Ω–∏—Ä–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞',
                    maxPlayers: 6,
                    playerCount: 3,
                    status: 'waiting',
                    isStarted: false,
                    isFull: false,
                    creator: 'tournament_master',
                    turnTime: 60,
                    assignProfessions: false,
                    players: [
                        { id: 'p3', username: 'tournament_master', name: 'tournament_master', isHost: true },
                        { id: 'p4', username: 'player2', name: 'player2', isHost: false },
                        { id: 'p5', username: 'player3', name: 'player3', isHost: false }
                    ],
                    createdAt: new Date(Date.now() - 30000).toISOString()
                }
            ];
            
            const mockRoom = mockRooms.find(r => r.id === roomId);
            if (mockRoom) {
                console.log('‚úÖ Room: –ö–æ–º–Ω–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö:', mockRoom.name);
                room = mockRoom;
            } else {
                showNotification('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
                setTimeout(() => {
                    window.location.href = 'rooms.html';
                }, 2000);
                return;
            }
        }
        
        currentRoom = room;
        updateRoomInfo();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞
        if (room.isStarted && room.status === 'playing') {
            console.log('üéÆ Room: –ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞');
            showNotification('–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é...', 'info');
            
            setTimeout(() => {
                const roomId = room.id;
                console.log('üéÆ Room: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–µ:', roomId);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞ –∏–≥—Ä–æ–≤—É—é –¥–æ—Å–∫—É
                const userData = {
                    ...currentUser,
                    roomId: roomId,
                    fromRoom: true
                };
                localStorage.setItem('currentUser', JSON.stringify(userData));
                
                navigateToGameBoard(roomId);
            }, 2000);
            return;
        }
        
        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω—ã
        await joinRoomIfNeeded();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        updateStartGameButton();
        
    } catch (error) {
        console.error('‚ùå Room: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã', 'error');
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã –±–µ–∑ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏)
 */
async function loadRoomDataWithoutJoin() {
    try {
        const roomId = new URLSearchParams(window.location.search).get('id');
        
        if (!roomId) {
            console.warn('‚ö†Ô∏è Room: ID –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω');
            return;
        }
        
        console.log('üè† Room: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã –±–µ–∑ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', roomId);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        const room = await roomService.getRoomById(roomId);
        
        if (!room) {
            console.warn('‚ö†Ô∏è Room: –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ API');
            return;
        }
        
        currentRoom = room;
        updateRoomInfo();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        updateStartGameButton();
        
    } catch (error) {
        console.error('‚ùå Room: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã:', error);
    }
}

/**
 * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
 */
async function joinRoomIfNeeded() {
    try {
        if (!currentRoom || !currentUser) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ–º–Ω–∞—Ç–µ
        const isInRoom = currentRoom.players.some(player => player.userId === currentUser.id || player.username === currentUser.username);
        
        if (!isInRoom) {
            console.log('üè† Room: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ');
            
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const playerData = {
                userId: currentUser.id || currentUser.userId || 'unknown',
                username: currentUser.username || currentUser.name || 'unknown',
                name: currentUser.username || currentUser.name || 'unknown',
                avatar: currentUser.avatar || '',
                isReady: false,
                dream: null,
                token: null
            };
            
            console.log('üîç Room: –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', playerData);
            
            await roomService.joinRoom(currentRoom.id, playerData);
            showNotification('–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ', 'success');
        } else {
            console.log('‚ÑπÔ∏è Room: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ');
            showNotification('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–æ–º–Ω–∞—Ç—É!', 'info');
        }
    } catch (error) {
        console.error('‚ùå Room: –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ (409), –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        if (error.message && (error.message.includes('409') || error.message.includes('ALREADY_JOINED'))) {
            console.log('‚ÑπÔ∏è Room: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –ë–ï–ó –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await loadRoomDataWithoutJoin();
        } else {
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ', 'error');
        }
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ
 */
function updateRoomInfo() {
    if (!currentRoom) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const roomTitle = document.getElementById('room-title');
    if (roomTitle) {
        roomTitle.textContent = `üè† ${currentRoom.name}`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
    const roomName = document.getElementById('room-name');
    const roomCreator = document.getElementById('room-creator');
    const roomPlayers = document.getElementById('room-players');
    const roomStatus = document.getElementById('room-status');
    
    if (roomName) roomName.textContent = currentRoom.name;
    if (roomCreator) roomCreator.textContent = currentRoom.creator || currentRoom.creatorName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    if (roomPlayers) roomPlayers.textContent = `${currentRoom.playerCount}/${currentRoom.maxPlayers}`;
    if (roomStatus) {
        roomStatus.textContent = currentRoom.isStarted ? '–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞' : '–û–∂–∏–¥–∞–Ω–∏–µ';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    updatePlayersList();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
    updateStartGameButton();
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
 */
function updatePlayersList() {
    const playersList = document.getElementById('players-list');
    if (!playersList || !currentRoom) return;
    
    playersList.innerHTML = '';
    
    currentRoom.players.forEach(player => {
        const playerItem = document.createElement('div');
        playerItem.className = 'player-item';
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º name –∏–ª–∏ username –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const playerName = player.name || player.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫';
        const avatar = player.avatar || playerName.charAt(0).toUpperCase();
        const status = player.isReady ? '–ì–æ—Ç–æ–≤' : '–ì–æ—Ç–æ–≤–∏—Ç—Å—è';
        
        playerItem.innerHTML = `
            <div class="player-avatar">${avatar}</div>
            <div class="player-info">
                <div class="player-name">${playerName}</div>
                <div class="player-status">${status}</div>
            </div>
        `;
        
        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Ö–æ—Å—Ç–∞ (–∫—Ä–æ–º–µ —Å–µ–±—è)
        const isHost = currentRoom.creatorId === currentUser?.id ||
                       currentRoom.creator === currentUser?.username ||
                       currentRoom.players.some(p => (p.userId === currentUser?.id || p.username === currentUser?.username) && (p.isCreator || p.isHost || p.role === 'creator'));
        const isSelf = player.userId === currentUser?.id || player.username === currentUser?.username;
        if (isHost && !isSelf) {
            const kickBtn = document.createElement('button');
            kickBtn.className = 'btn btn-danger btn-sm';
            kickBtn.style.marginLeft = '8px';
            kickBtn.textContent = '–£–¥–∞–ª–∏—Ç—å';
            kickBtn.addEventListener('click', () => kickPlayer(player));
            playerItem.querySelector('.player-info')?.appendChild(kickBtn);
        }

        playersList.appendChild(playerItem);
    });
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç)
 */
async function kickPlayer(player) {
    try {
        if (!currentRoom || !player) return;
        const confirmKick = confirm(`–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ ${player.name || player.username || '–∏–≥—Ä–æ–∫'} –∏–∑ –∫–æ–º–Ω–∞—Ç—ã?`);
        if (!confirmKick) return;

        await fetch(`/api/rooms/${currentRoom.id}/players/${player.userId || player.id}`, {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' }
        });

        showNotification('–ò–≥—Ä–æ–∫ —É–¥–∞–ª—ë–Ω', 'success');
        await refreshRoomData();
    } catch (error) {
        console.error('‚ùå Room: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', error);
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞', 'error');
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
 */
function updateStartGameButton() {
    const startGameButton = document.getElementById('start-game');
    if (!startGameButton) return;
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–Ω–∞—Ç–µ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é
    if (!currentRoom || !currentUser) {
        startGameButton.disabled = true;
        startGameButton.textContent = 'üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É';
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–æ–º–Ω–∞—Ç—ã
    const isHost = currentRoom.creatorId === currentUser.id || 
                   currentRoom.creator_id === currentUser.id ||
                   currentRoom.creator === currentUser.username ||
                   currentRoom.creator === currentUser.name ||
                   (currentRoom.players && currentRoom.players.some(p => 
                       (p.userId === currentUser.id || p.id === currentUser.id || p.username === currentUser.username) && 
                       (p.isCreator || p.role === 'creator' || p.isHost)
                   ));
    const playersCount = currentRoom.players.length;
    const readyCount = currentRoom.players.filter(p => p.isReady).length;
    const minPlayers = currentRoom.minPlayers || 1; // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 1 –∏–≥—Ä–æ–∫–∞
    const allPlayersReady = currentRoom.players.every(player => player.isReady);
    // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å—Ç–∞—Ä—Ç –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ö–æ—Ç—è –±—ã 1 –≥–æ—Ç–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const canStart = (playersCount >= 1 && readyCount >= 1) || (playersCount >= minPlayers && allPlayersReady);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
    console.log('üîç Room: –û—Ç–ª–∞–¥–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É":', {
        isHost,
        playersCount,
        readyCount,
        minPlayers,
        allPlayersReady,
        canStart,
        creatorId: currentRoom.creatorId,
        currentUserId: currentUser.id,
        players: currentRoom.players.map(p => ({ name: p.name, isReady: p.isReady }))
    });
    
    // –õ–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
    if (playersCount >= minPlayers && !allPlayersReady) {
        console.log('üîç Room: –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤:', {
            playersCount,
            minPlayers,
            allPlayersReady,
            readyPlayers: currentRoom.players.filter(p => p.isReady).length
        });
    }
    
    startGameButton.disabled = !isHost || !canStart || currentRoom.isStarted;
    
    if (currentRoom.isStarted) {
        startGameButton.textContent = 'üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞';
    } else if (!isHost) {
        startGameButton.textContent = '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ—Å—Ç–∞';
    } else if (!canStart) {
        startGameButton.textContent = `üë• –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (${readyCount}/${playersCount})`;
    } else {
        startGameButton.textContent = 'üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É';
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
function displayUserInfo() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞)
        const raw = localStorage.getItem('currentUser') || localStorage.getItem('aura_money_user');
        const storedToken = localStorage.getItem('aura_money_token') || 'ok'; // –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç–æ–∫–µ–Ω –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
        
        if (raw) {
            currentUser = JSON.parse(raw);
            
            const userAvatar = document.getElementById('room-user-avatar');
            const userName = document.getElementById('room-user-name');
            
            if (userAvatar && userName) {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const username = currentUser.username || currentUser.name || currentUser.email || 'User';
                const firstLetter = username.charAt(0).toUpperCase();
                userAvatar.textContent = firstLetter;
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                userName.textContent = username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                
                console.log('‚úÖ Room: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞:', currentUser.username || currentUser.name);
            }
        } else {
            console.log('‚ö†Ô∏è Room: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            showAuthRequired();
            return false;
        }
        
        return true;
    } catch (error) {
        console.error('‚ùå Room: –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
        showAuthRequired();
        return false;
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
function showAuthRequired() {
    // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    const roomContent = document.querySelector('.room-content');
    if (roomContent) {
        roomContent.style.display = 'none';
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const roomContainer = document.querySelector('.room-container');
    if (roomContainer) {
        const authMessage = document.createElement('div');
        authMessage.className = 'auth-required-message';
        authMessage.innerHTML = `
            <div class="auth-message-content">
                <div class="auth-icon">üîê</div>
                <h2>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>
                <p>–î–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–æ–º–Ω–∞—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è</p>
                <div class="auth-actions">
                    <button class="btn btn-primary" id="auth-login-btn">
                        –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
                    </button>
                    <button class="btn btn-secondary" id="auth-back-to-rooms-btn">
                        –ù–∞–∑–∞–¥ –∫ –∫–æ–º–Ω–∞—Ç–∞–º
                    </button>
                </div>
            </div>
        `;
        
        roomContainer.appendChild(authMessage);
    }
    
    showNotification('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–æ–º–Ω–∞—Ç—É', 'warning');
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—á—Ç –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
 */
function loadDreams() {
    const dreamSelect = document.getElementById('dream-select');
    if (!dreamSelect) return;
    
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞)
    dreamSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –º–µ—á—Ç—É...</option>';
    
    DREAMS_CONFIG.forEach(dream => {
        const option = document.createElement('option');
        option.value = dream.id;
        option.textContent = `${dream.icon} ${dream.name} - ${formatCurrency(dream.cost)}`;
        dreamSelect.appendChild(option);
    });
    
    console.log('‚úÖ Room: –ú–µ—á—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—á—Ç—ã
 */
function handleDreamSelection() {
    const dreamSelect = document.getElementById('dream-select');
    const dreamDescription = document.getElementById('dream-description');
    const dreamCost = document.getElementById('dream-cost');
    
    if (!dreamSelect || !dreamDescription || !dreamCost) return;
    
    const selectedDreamId = dreamSelect.value;
    
    if (selectedDreamId) {
        const dream = DREAMS_CONFIG.find(d => d.id === selectedDreamId);
        if (dream) {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—á—Ç–æ–π
            dreamDescription.value = dream.description;
            dreamCost.value = dream.cost;
            
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            dreamDescription.removeAttribute('readonly');
            dreamCost.removeAttribute('readonly');
            
            console.log('‚úÖ Room: –ú–µ—á—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞:', dream.name);
        }
    } else {
        // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
        dreamDescription.value = '';
        dreamCost.value = '';
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—è
        dreamDescription.setAttribute('readonly', 'readonly');
        dreamCost.setAttribute('readonly', 'readonly');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—á—Ç—ã
    updateDreamData();
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
 */
function formatCurrency(amount) {
    return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
    }).format(amount);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏—à–µ–∫
 */
function loadTokens() {
    const tokensGrid = document.getElementById('tokens-grid');
    if (!tokensGrid) return;
    
    tokensGrid.innerHTML = '';
    
    TOKENS_CONFIG.forEach(token => {
        const tokenCard = document.createElement('div');
        tokenCard.className = 'token-card';
        tokenCard.dataset.tokenId = token.id;
        
        tokenCard.innerHTML = `
            <div class="token-icon">${token.icon}</div>
        `;
        
        tokenCard.addEventListener('click', () => selectToken(token.id));
        tokensGrid.appendChild(tokenCard);
    });
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ–∏—à–∫—É –∏–∑ localStorage
    const savedToken = localStorage.getItem('selected_token');
    if (savedToken) {
        const savedCard = document.querySelector(`[data-token-id="${savedToken}"]`);
        if (savedCard) {
            savedCard.classList.add('selected');
            selectedToken = savedToken;
            console.log('‚úÖ Room: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ñ–∏—à–∫–∞:', savedToken);
        }
    }
    
    console.log('‚úÖ Room: –§–∏—à–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
}

/**
 * –í—ã–±–æ—Ä —Ñ–∏—à–∫–∏
 */
async function selectToken(tokenId) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ñ–∏—à–∫–∏
        const isTokenUnique = await checkTokenUniqueness(tokenId);
        if (!isTokenUnique) {
            showNotification('–≠—Ç–∞ —Ñ–∏—à–∫–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º', 'error');
            return;
        }
        
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ñ–∏—à–∫–∏
        const previousSelected = document.querySelector('.token-card.selected');
        if (previousSelected) {
            previousSelected.classList.remove('selected');
        }
        
        // –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é —Ñ–∏—à–∫—É
        const selectedCard = document.querySelector(`[data-token-id="${tokenId}"]`);
        if (selectedCard) {
            selectedCard.classList.add('selected');
            selectedToken = tokenId;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ localStorage
            localStorage.setItem('selected_token', tokenId);
            
            console.log('‚úÖ Room: –§–∏—à–∫–∞ –≤—ã–±—Ä–∞–Ω–∞:', tokenId);
            console.log('‚úÖ Room: –ö–ª–∞—Å—Å selected –¥–æ–±–∞–≤–ª–µ–Ω –∫ —ç–ª–µ–º–µ–Ω—Ç—É:', selectedCard);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏—à–∫–æ–π
            if (currentRoom && currentUser) {
                const playerData = {
                    userId: currentUser.id,
                    username: currentUser.username,
                    avatar: currentUser.avatar || '',
                    isReady: false, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∏—à–∫–∏
                    dream: dreamData,
                    token: selectedToken
                };
                
                await roomService.updatePlayerInRoom(currentRoom.id, playerData);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º –æ –≤—ã–±–æ—Ä–µ —Ñ–∏—à–∫–∏
            await sendPushNotification('token_selected', {
                playerName: currentUser.username,
                tokenId: tokenId,
                tokenName: selectedCard.textContent.trim(),
                roomId: currentRoom.id
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            updateReadyStatus();
            
            showNotification(`–§–∏—à–∫–∞ ${tokenId} –≤—ã–±—Ä–∞–Ω–∞!`, 'success');
        }
    } catch (error) {
        console.error('‚ùå Room: –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏—à–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏—à–∫–∏', 'error');
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ—á—Ç—ã
 */
function updateDreamData() {
    const dreamSelect = document.getElementById('dream-select');
    const description = document.getElementById('dream-description').value.trim();
    const cost = parseInt(document.getElementById('dream-cost').value) || 0;
    
    const selectedDreamId = dreamSelect ? dreamSelect.value : '';
    const selectedDream = selectedDreamId ? DREAMS_CONFIG.find(d => d.id === selectedDreamId) : null;
    
    dreamData = { 
        id: selectedDreamId,
        title: selectedDream ? selectedDream.name : '',
        description: description,
        cost: cost,
        icon: selectedDream ? selectedDream.icon : ''
    };
    
    console.log('‚úÖ Room: –î–∞–Ω–Ω—ã–µ –º–µ—á—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', dreamData);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    updateReadyStatus();
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
 */
function updateReadyStatus() {
    const readyButton = document.getElementById('ready-button');
    if (!readyButton) return;
    
    const isDreamSelected = dreamData.id && dreamData.title;
    const isDreamComplete = isDreamSelected && dreamData.description && dreamData.cost > 0;
    const isTokenSelected = selectedToken !== null;
    const canBeReady = isDreamComplete && isTokenSelected;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    const currentPlayer = currentRoom ? currentRoom.players.find(p => p.userId === currentUser?.id || p.username === currentUser?.username) : null;
    const isCurrentlyReady = currentPlayer ? currentPlayer.isReady : false;
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('üîç Room: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', {
        isDreamComplete,
        isTokenSelected,
        canBeReady,
        isCurrentlyReady,
        currentPlayer: currentPlayer ? { name: currentPlayer.name, isReady: currentPlayer.isReady } : null,
        currentUser: currentUser ? { id: currentUser.id, username: currentUser.username } : null
    });
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–∂–Ω–æ –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã–º
    readyButton.disabled = !canBeReady;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (canBeReady) {
        if (isCurrentlyReady) {
            readyButton.innerHTML = '‚ùå –ù–µ –≥–æ—Ç–æ–≤';
            readyButton.className = 'btn btn-secondary btn-large';
        } else {
            readyButton.innerHTML = '‚úÖ –ì–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ!';
            readyButton.className = 'btn btn-success btn-large';
        }
    } else {
        readyButton.innerHTML = '‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—á—Ç—É –∏ —Ñ–∏—à–∫—É';
        readyButton.className = 'btn btn-secondary btn-large';
    }
    
    const hint = document.querySelector('.ready-hint');
    if (hint) {
        if (canBeReady) {
            if (isCurrentlyReady) {
                hint.textContent = '–í—ã –≥–æ—Ç–æ–≤—ã –∫ –∏–≥—Ä–µ!';
                hint.style.color = '#10b981';
            } else {
                hint.textContent = '–ù–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤" –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ';
                hint.style.color = '#3b82f6';
            }
        } else {
            const missing = [];
            if (!isDreamSelected) missing.push('–º–µ—á—Ç—É');
            if (!isTokenSelected) missing.push('—Ñ–∏—à–∫—É');
            hint.textContent = `–í—ã–±–µ—Ä–∏—Ç–µ: ${missing.join(' –∏ ')}`;
            hint.style.color = '#a0a0a0';
        }
    }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
 */
async function toggleReadyStatus() {
    try {
        if (!currentRoom || !currentUser || !selectedToken) return;
        
        const isDreamSelected = dreamData.id && dreamData.title;
        const isDreamComplete = isDreamSelected && dreamData.description && dreamData.cost > 0;
        if (!isDreamComplete) {
            showNotification('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –º–µ—á—Ç–µ', 'warning');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ñ–∏—à–∫–∏
        const isTokenUnique = await checkTokenUniqueness(selectedToken);
        if (!isTokenUnique) {
            showNotification('–≠—Ç–∞ —Ñ–∏—à–∫–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º', 'error');
            return;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        const currentPlayer = currentRoom.players.find(p => p.userId === currentUser.id || p.username === currentUser.username);
        const isCurrentlyReady = currentPlayer ? currentPlayer.isReady : false;
        const newReadyState = !isCurrentlyReady;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç –∏–≥—Ä–æ–∫–∞ (PlayerBundle)
        const playerData = buildPlayerBundle({
            user: currentUser,
            dream: dreamData,
            token: selectedToken,
            isReady: newReadyState
        });

        const validation = validatePlayerBundle(playerData);
        if (!validation.isValid) {
            showNotification(validation.message || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞', 'error');
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
        await roomService.updatePlayerInRoom(currentRoom.id, playerData);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (newReadyState) {
            showNotification('–í—ã –≥–æ—Ç–æ–≤—ã –∫ –∏–≥—Ä–µ!', 'success');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç—É –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
            await sendPushNotification('player_ready', {
                playerName: currentUser.username,
                roomId: currentRoom.id,
                readyPlayersCount: currentRoom.players.filter(p => p.isReady).length + 1,
                totalPlayersCount: currentRoom.players.length
            });
        } else {
            showNotification('–í—ã –±–æ–ª—å—à–µ –Ω–µ –≥–æ—Ç–æ–≤—ã –∫ –∏–≥—Ä–µ', 'info');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
        await refreshRoomData();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        updateReadyStatus();
        
    } catch (error) {
        console.error('‚ùå Room: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', 'error');
    }
}

/**
 * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
 */
function buildPlayerBundle({ user, dream, token, isReady }) {
    return {
        userId: user?.id || user?.userId || null,
        username: user?.username || user?.name || '',
        avatar: user?.avatar || '',
        token: token || '',
        dream: dream?.id ? {
            id: dream.id,
            title: dream.title || '',
            description: dream.description || '',
            cost: Number(dream.cost) || 0
        } : null,
        isReady: !!isReady
    };
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ PlayerBundle
 */
function validatePlayerBundle(bundle) {
    if (!bundle?.userId || !bundle?.username) {
        return { isValid: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' };
    }
    if (!bundle?.token) {
        return { isValid: false, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏—à–∫—É' };
    }
    if (!bundle?.dream || !bundle.dream.id || !bundle.dream.title || !bundle.dream.cost) {
        return { isValid: false, message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –º–µ—á—Ç—É –ø–æ–ª–Ω–æ—Å—Ç—å—é' };
    }
    return { isValid: true };
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
 */
async function refreshRoomData() {
    try {
        if (!currentRoom) return;
        
        const room = await roomService.getRoomById(currentRoom.id);
        if (room) {
            const previousReadyCount = currentRoom.players ? currentRoom.players.filter(p => p.isReady).length : 0;
            const newReadyCount = room.players ? room.players.filter(p => p.isReady).length : 0;
            const wasNotStarted = !currentRoom.isStarted;
            const isNowStarted = room.isStarted;
            
            currentRoom = room;
            updateRoomInfo();
            updatePlayersList();
            updateStartGameButton();
            updateTokensAvailability(); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∏—à–µ–∫
            updateReadyStatus(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∏–≥—Ä–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞—á–∞–ª–∞—Å—å
            if (wasNotStarted && isNowStarted) {
                console.log('üéÆ Room: –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é...');
                showNotification('–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é...', 'success');
                
                setTimeout(() => {
                navigateToGameBoard(room.id);
                }, 2000);
                return;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            if (newReadyCount > previousReadyCount) {
                const readyPlayers = room.players.filter(p => p.isReady);
                const lastReadyPlayer = readyPlayers[readyPlayers.length - 1];
                if (lastReadyPlayer && lastReadyPlayer.userId !== currentUser?.id) {
                    showNotification(`${lastReadyPlayer.username} –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ!`, 'success');
                }
            }
        }
    } catch (error) {
        console.error('‚ùå Room: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã:', error);
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
 */
function showStartGameModal() {
    const modal = document.getElementById('confirm-modal');
    const roomName = document.getElementById('modal-room-name');
    const readyCount = document.getElementById('modal-ready-count');
    const totalPlayers = document.getElementById('modal-total-players');
    
    if (modal && roomName && readyCount && totalPlayers) {
        roomName.textContent = currentRoom ? currentRoom.name : '';
        readyCount.textContent = currentRoom ? currentRoom.players.filter(p => p.isReady).length : 0;
        totalPlayers.textContent = currentRoom ? currentRoom.maxPlayers : 0;
        
        modal.classList.add('show');
    }
}

/**
 * –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
 */
function hideStartGameModal() {
    const modal = document.getElementById('confirm-modal');
    if (modal) {
        modal.classList.remove('show');
    }
}

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
 */
async function confirmStartGame() {
    try {
        if (!currentRoom || !currentUser) return;
        
        console.log('üè† Room: –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã');
        console.log('üîç Room: –û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', {
            currentUser: currentUser,
            currentRoom: currentRoom,
            userId: currentUser.id,
            creatorId: currentRoom.creatorId
        });
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∏–≥—Ä—ã
        console.log('üîÑ Room: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∏–≥—Ä—ã');
        await refreshRoomData();
        
        // –ò—â–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ ID
        const currentPlayer = currentRoom.players.find(player => 
            player.username === currentUser.username || 
            player.name === currentUser.username
        );
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (UUID –∏–∑ –ë–î) –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∏–≥—Ä–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç—ã -> —è–≤–Ω—ã–µ –ø–æ–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è -> —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        let userId = null;
        const foundPlayer = currentRoom.players?.find(p => 
            p.username === currentUser.username || 
            p.name === currentUser.username ||
            p.userId === currentUser.id
        );
        if (foundPlayer) {
            userId = foundPlayer.userId || foundPlayer.id || null;
        }
        if (!userId) {
            userId = currentRoom.creatorUserId || currentRoom.creator_id || currentRoom.creatorId || null;
        }
        if (!userId) {
            // –∫–∞–∫ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º currentUser.id, –µ—Å–ª–∏ –æ–Ω –ø–æ—Ö–æ–∂ –Ω–∞ UUID
            const maybeId = currentUser.id;
            const uuidLike = typeof maybeId === 'string' && /[a-f0-9\-]{8,}/i.test(maybeId);
            userId = uuidLike ? maybeId : null;
        }
        
        // –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ userId ‚Äî –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å—Ä–µ–¥–∏ –∏–≥—Ä–æ–∫–æ–≤
        if (!userId && currentRoom.players) {
            const creatorPlayer = currentRoom.players.find(p => p.isCreator || p.role === 'creator' || p.isHost);
            if (creatorPlayer) userId = creatorPlayer.userId || creatorPlayer.id || null;
        }
        
        
        console.log('üîç Room: –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', {
            userId: userId,
            currentUser: currentUser,
            currentRoom: currentRoom,
            currentPlayer: currentPlayer,
            creatorId: currentRoom.creatorId,
            creator_id: currentRoom.creator_id,
            roomCreator: currentRoom.creator,
            roomCreatorId: currentRoom.creatorId
        });
        
        if (!userId) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã');
        }
        
        try {
            await roomService.startGame(currentRoom.id, userId);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
            await sendPushNotification('game_started', {
                roomId: currentRoom.id,
                roomName: currentRoom.name,
                hostName: currentUser.username
            });
            
            showNotification('–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é...', 'success');
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–µ
            setTimeout(() => {
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–æ–º–Ω–∞—Ç–µ
                const roomId = currentRoom.id;
                console.log('üéÆ Room: –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–µ:', roomId);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞ –∏–≥—Ä–æ–≤—É—é –¥–æ—Å–∫—É
                const userData = {
                    ...currentUser,
                    roomId: roomId,
                    fromRoom: true
                };
                localStorage.setItem('currentUser', JSON.stringify(userData));
                
                navigateToGameBoard(roomId);
            }, 2000);
            
        } catch (error) {
            // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∏–≥—Ä–æ–≤—É—é –¥–æ—Å–∫—É
            if (error.message && error.message.includes('—É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞')) {
                console.log('üéÆ Room: –ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∏–≥—Ä–æ–≤—É—é –¥–æ—Å–∫—É');
                showNotification('–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é...', 'info');
                
                setTimeout(() => {
                    const roomId = currentRoom.id;
                    console.log('üéÆ Room: –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–µ (–∏–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞):', roomId);
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞ –∏–≥—Ä–æ–≤—É—é –¥–æ—Å–∫—É
                    const userData = {
                        ...currentUser,
                        roomId: roomId,
                        fromRoom: true
                    };
                    localStorage.setItem('currentUser', JSON.stringify(userData));
                    
                    navigateToGameBoard(roomId);
                }, 2000);
            } else {
                throw error; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            }
        }
        
    } catch (error) {
        console.error('‚ùå Room: –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã:', error);
        showNotification('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã', 'error');
        hideStartGameModal();
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 */
/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∏—à–∫–∏
 */
async function checkTokenUniqueness(tokenId) {
    try {
        if (!currentRoom || !currentUser) return true;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —ç—Ç–∞ —Ñ–∏—à–∫–∞ –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º username –¥–ª—è –ø–æ–∏—Å–∫–∞, –∫–∞–∫ –≤ updateTokensAvailability
        const isTokenTaken = currentRoom.players.some(player => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const isNotCurrentUser = player.username !== currentUser.username && 
                                   player.name !== currentUser.username &&
                                   (currentUser.id ? player.userId !== currentUser.id : true);
            
            // –ò —á—Ç–æ —Ñ–∏—à–∫–∞ –≤—ã–±—Ä–∞–Ω–∞
            return isNotCurrentUser && player.token === tokenId;
        });
        
        if (isTokenTaken) {
            console.log(`‚ö†Ô∏è Room: –§–∏—à–∫–∞ ${tokenId} —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º`);
            return false;
        }
        
        return true;
    } catch (error) {
        console.error('‚ùå Room: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∏—à–∫–∏:', error);
        return false;
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
async function sendPushNotification(type, data) {
    try {
        if (!currentRoom || !currentUser) return;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        let recipients = [];
        
        if (type === 'game_started') {
            // –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
            recipients = currentRoom.players
                .filter(player => player.userId !== currentUser.id)
                .map(player => player.userId);
        } else {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç—É
            const hostId = currentRoom.creatorId;
            if (hostId === currentUser.id) return; // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–±–µ
            recipients = [hostId];
        }
        
        if (recipients.length === 0) return;
        
        const notification = {
            type: type,
            data: data,
            timestamp: new Date().toISOString(),
            from: currentUser.id,
            to: recipients
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API (–∏–º–∏—Ç–∞—Ü–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
        await fetch(`/api/rooms/${currentRoom.id}/notifications`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('aura_money_token')}`
            },
            body: JSON.stringify(notification)
        });
        
        console.log('üì± Room: Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', type);
        
    } catch (error) {
        console.error('‚ùå Room: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
function handlePushNotification(notification) {
    try {
        console.log('üì± Room: –ü–æ–ª—É—á–µ–Ω–æ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', notification);
        
        switch (notification.type) {
            case 'player_ready':
                handlePlayerReadyNotification(notification.data);
                break;
            case 'token_selected':
                handleTokenSelectedNotification(notification.data);
                break;
            case 'game_started':
                handleGameStartedNotification(notification.data);
                break;
            default:
                console.log('üì± Room: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notification.type);
        }
    } catch (error) {
        console.error('‚ùå Room: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
 */
function handlePlayerReadyNotification(data) {
    const isHost = currentRoom && currentRoom.creatorId === currentUser.id;
    if (!isHost) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
    updateStartGameButton();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç—É
    showNotification(
        `${data.playerName} –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ! (${data.readyPlayersCount}/${data.totalPlayersCount})`, 
        'success'
    );
    
    // –ï—Å–ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ä—Ç"
    if (data.readyPlayersCount === data.totalPlayersCount) {
        showNotification('–í—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã! –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É!', 'success');
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–±–æ—Ä–µ —Ñ–∏—à–∫–∏
 */
function handleTokenSelectedNotification(data) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏—à–µ–∫
    updateTokensAvailability();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(`–§–∏—à–∫–∞ ${data.tokenName} –≤—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–æ–∫–æ–º ${data.playerName}`, 'info');
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
 */
function handleGameStartedNotification(data) {
    try {
        console.log('üéÆ Room: –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã:', data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à–∞ –∫–æ–º–Ω–∞—Ç–∞
        if (data.roomId !== currentRoom?.id) {
            console.log('‚ö†Ô∏è Room: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–ª—è –Ω–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showNotification(`–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! ${data.hostName} –∑–∞–ø—É—Å—Ç–∏–ª –∏–≥—Ä—É "${data.roomName}"`, 'success');
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            console.log('üéÆ Room: –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é...');
            navigateToGameBoard(data.roomId);
        }, 2000);
        
    } catch (error) {
        console.error('‚ùå Room: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã:', error);
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–∏—à–µ–∫
 */
function updateTokensAvailability() {
    if (!currentRoom || !currentRoom.players) return;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏—à–∫–∏, –∑–∞–Ω—è—Ç—ã–µ –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
    const takenTokens = currentRoom.players
        .filter(player => (player.userId !== currentUser.id && player.username !== currentUser.username) && player.token)
        .map(player => player.token);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏—à–∫—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º username –¥–ª—è –ø–æ–∏—Å–∫–∞, —Ç–∞–∫ –∫–∞–∫ userId –º–æ–∂–µ—Ç –±—ã—Ç—å undefined
    const currentPlayer = currentRoom.players.find(player => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±)
        if (player.username === currentUser.username) return true;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ userId (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (currentUser.id && player.userId === currentUser.id) return true;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ name (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)
        if (player.name === currentUser.username) return true;
        return false;
    });
    
    const currentPlayerToken = currentPlayer?.token;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏—à–µ–∫
    const tokenCards = document.querySelectorAll('.token-card');
    tokenCards.forEach(card => {
        const tokenId = card.dataset.tokenId;
        const isTakenByOther = takenTokens.includes(tokenId);
        const isMyToken = tokenId === currentPlayerToken;
        
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        card.classList.remove('taken', 'selected');
        card.style.opacity = '1';
        card.style.pointerEvents = 'auto';
        
        if (isTakenByOther) {
            // –§–∏—à–∫–∞ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º
            card.classList.add('taken');
            card.style.opacity = '0.4';
            card.style.pointerEvents = 'none';
            console.log('üö´ Room: –§–∏—à–∫–∞ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º:', tokenId);
        } else if (isMyToken) {
            // –≠—Ç–æ –º–æ—è —Ñ–∏—à–∫–∞
            card.classList.add('selected');
            selectedToken = tokenId; // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            console.log('‚úÖ Room: –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–µ–π —Ñ–∏—à–∫–∏:', tokenId);
        }
    });
    
    console.log('üîÑ Room: –û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∏—à–µ–∫. –ó–∞–Ω—è—Ç—ã–µ:', takenTokens, '–ú–æ—è:', currentPlayerToken);
    console.log('üîç Room: –û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞:', {
        currentUser: currentUser,
        roomPlayers: currentRoom.players.map(p => ({ username: p.username, name: p.name, userId: p.userId, token: p.token })),
        foundPlayer: currentPlayer
    });
}

function showNotification(message, type = 'info') {
    if (window.notificationService) {
        window.notificationService.show(message, type);
    } else {
        // Fallback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        alert(message);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.loadRoomData = loadRoomData;
window.displayUserInfo = displayUserInfo;
window.selectToken = selectToken;
window.toggleReadyStatus = toggleReadyStatus;

// –≠–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
Object.defineProperty(window, 'currentUser', {
    get: () => currentUser,
    configurable: true
});
Object.defineProperty(window, 'currentRoom', {
    get: () => currentRoom,
    configurable: true
});
Object.defineProperty(window, 'selectedToken', {
    get: () => selectedToken,
    configurable: true
});
Object.defineProperty(window, 'dreamData', {
    get: () => dreamData,
    configurable: true
});
