/**
 * Room Page Controller v1.0.0
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let roomService;
let notificationService;
let currentRoom = null;
let currentUser = null;
let selectedToken = null;
let dreamData = {
    title: '',
    description: '',
    cost: 0
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∏—à–µ–∫ (10 –∂–∏–≤–æ—Ç–Ω—ã—Ö)
const TOKENS_CONFIG = [
    {
        id: 'lion',
        name: '–õ–µ–≤',
        icon: 'ü¶Å',
        description: '–¶–∞—Ä—å –∑–≤–µ—Ä–µ–π, –ª–∏–¥–µ—Ä –ø–æ –Ω–∞—Ç—É—Ä–µ –∏ –º–∞—Å—Ç–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏'
    },
    {
        id: 'eagle',
        name: '–û—Ä–µ–ª',
        icon: 'ü¶Ö',
        description: '–û—Ä–ª–∏–Ω—ã–π –≤–∑–≥–ª—è–¥ –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –≤–∏–¥–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–≤–µ—Ä—Ö—É'
    },
    {
        id: 'fox',
        name: '–õ–∏—Å–∞',
        icon: 'ü¶ä',
        description: '–•–∏—Ç—Ä–∞—è –∏ —É–º–Ω–∞—è, –≤—Å–µ–≥–¥–∞ –Ω–∞–π–¥–µ—Ç –≤—ã–≥–æ–¥–Ω—É—é —Å–¥–µ–ª–∫—É'
    },
    {
        id: 'bear',
        name: '–ú–µ–¥–≤–µ–¥—å',
        icon: 'üêª',
        description: '–°–∏–ª—å–Ω—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π, –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä'
    },
    {
        id: 'tiger',
        name: '–¢–∏–≥—Ä',
        icon: 'üêÖ',
        description: '–ë—ã—Å—Ç—Ä—ã–π –∏ —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–π, –∞—Ç–∞–∫—É—é—â–∏–π —Å—Ç–∏–ª—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    },
    {
        id: 'wolf',
        name: '–í–æ–ª–∫',
        icon: 'üê∫',
        description: '–ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–≥—Ä–æ–∫, —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å—Ç–∞–µ –¥–ª—è –±–æ–ª—å—à–µ–π –ø—Ä–∏–±—ã–ª–∏'
    },
    {
        id: 'elephant',
        name: '–°–ª–æ–Ω',
        icon: 'üêò',
        description: '–ú—É–¥—Ä—ã–π –∏ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π, –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'
    },
    {
        id: 'shark',
        name: '–ê–∫—É–ª–∞',
        icon: 'ü¶à',
        description: '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä, —á—É–≤—Å—Ç–≤—É–µ—Ç –∑–∞–ø–∞—Ö –ø—Ä–∏–±—ã–ª–∏'
    },
    {
        id: 'owl',
        name: '–°–æ–≤–∞',
        icon: 'ü¶â',
        description: '–ú—É–¥—Ä–∞—è –∏ –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ –Ω–æ—á—å—é'
    },
    {
        id: 'dolphin',
        name: '–î–µ–ª—å—Ñ–∏–Ω',
        icon: 'üê¨',
        description: '–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π –∏ —É–º–Ω—ã–π, —Å—Ç—Ä–æ–∏—Ç —Å–µ—Ç—å –¥–µ–ª–æ–≤—ã—Ö —Å–≤—è–∑–µ–π'
    }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üè† Room: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–º–Ω–∞—Ç—ã');
    
    initializeServices();
    setupEventListeners();
    loadRoomData();
    displayUserInfo();
    loadTokens();
});

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
 */
function initializeServices() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        roomService = new RoomService();
        notificationService = window.notificationService;
        
        console.log('‚úÖ Room: –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
        console.error('‚ùå Room: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', 'error');
    }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –∫–æ–º–Ω–∞—Ç–∞–º"
    const backButton = document.getElementById('back-to-rooms');
    if (backButton) {
        backButton.addEventListener('click', () => {
            window.location.href = 'rooms.html';
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
    const startGameButton = document.getElementById('start-game');
    if (startGameButton) {
        startGameButton.addEventListener('click', showStartGameModal);
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–Ø –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ!"
    const readyButton = document.getElementById('ready-button');
    if (readyButton) {
        readyButton.addEventListener('click', toggleReadyStatus);
    }
    
    // –ü–æ–ª—è —Ñ–æ—Ä–º—ã –º–µ—á—Ç—ã
    const dreamTitle = document.getElementById('dream-title');
    const dreamDescription = document.getElementById('dream-description');
    const dreamCost = document.getElementById('dream-cost');
    
    if (dreamTitle) {
        dreamTitle.addEventListener('input', updateDreamData);
    }
    if (dreamDescription) {
        dreamDescription.addEventListener('input', updateDreamData);
    }
    if (dreamCost) {
        dreamCost.addEventListener('input', updateDreamData);
    }
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.getElementById('confirm-modal');
    const modalClose = document.getElementById('modal-close');
    const modalCancel = document.getElementById('modal-cancel');
    const modalConfirm = document.getElementById('modal-confirm');
    
    if (modalClose) {
        modalClose.addEventListener('click', hideStartGameModal);
    }
    if (modalCancel) {
        modalCancel.addEventListener('click', hideStartGameModal);
    }
    if (modalConfirm) {
        modalConfirm.addEventListener('click', confirmStartGame);
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
    if (modal) {
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                hideStartGameModal();
            }
        });
    }
    
    console.log('‚úÖ Room: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
 */
async function loadRoomData() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–Ω–∞—Ç—ã –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const urlParams = new URLSearchParams(window.location.search);
        const roomId = urlParams.get('id');
        
        if (!roomId) {
            showNotification('ID –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω', 'error');
            setTimeout(() => {
                window.location.href = 'rooms.html';
            }, 2000);
            return;
        }
        
        console.log('üè† Room: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã:', roomId);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        const room = await roomService.getRoomById(roomId);
        
        if (!room) {
            showNotification('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
            setTimeout(() => {
                window.location.href = 'rooms.html';
            }, 2000);
            return;
        }
        
        currentRoom = room;
        updateRoomInfo();
        
        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω—ã
        await joinRoomIfNeeded();
        
    } catch (error) {
        console.error('‚ùå Room: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã', 'error');
    }
}

/**
 * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
 */
async function joinRoomIfNeeded() {
    try {
        if (!currentRoom || !currentUser) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ–º–Ω–∞—Ç–µ
        const isInRoom = currentRoom.players.some(player => player.userId === currentUser.id);
        
        if (!isInRoom) {
            console.log('üè† Room: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ');
            
            const playerData = {
                userId: currentUser.id,
                username: currentUser.username,
                avatar: currentUser.avatar || '',
                isReady: false,
                dream: null,
                token: null
            };
            
            await roomService.joinRoom(currentRoom.id, playerData);
            showNotification('–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ', 'success');
        }
    } catch (error) {
        console.error('‚ùå Room: –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ', 'error');
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ
 */
function updateRoomInfo() {
    if (!currentRoom) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const roomTitle = document.getElementById('room-title');
    if (roomTitle) {
        roomTitle.textContent = `üè† ${currentRoom.name}`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
    const roomName = document.getElementById('room-name');
    const roomCreator = document.getElementById('room-creator');
    const roomPlayers = document.getElementById('room-players');
    const roomStatus = document.getElementById('room-status');
    
    if (roomName) roomName.textContent = currentRoom.name;
    if (roomCreator) roomCreator.textContent = currentRoom.creatorName;
    if (roomPlayers) roomPlayers.textContent = `${currentRoom.playerCount}/${currentRoom.maxPlayers}`;
    if (roomStatus) {
        roomStatus.textContent = currentRoom.isStarted ? '–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞' : '–û–∂–∏–¥–∞–Ω–∏–µ';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    updatePlayersList();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
    updateStartGameButton();
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
 */
function updatePlayersList() {
    const playersList = document.getElementById('players-list');
    if (!playersList || !currentRoom) return;
    
    playersList.innerHTML = '';
    
    currentRoom.players.forEach(player => {
        const playerItem = document.createElement('div');
        playerItem.className = 'player-item';
        
        const avatar = player.avatar || player.username.charAt(0).toUpperCase();
        const status = player.isReady ? '–ì–æ—Ç–æ–≤' : '–ì–æ—Ç–æ–≤–∏—Ç—Å—è';
        
        playerItem.innerHTML = `
            <div class="player-avatar">${avatar}</div>
            <div class="player-info">
                <div class="player-name">${player.username}</div>
                <div class="player-status">${status}</div>
            </div>
        `;
        
        playersList.appendChild(playerItem);
    });
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
 */
function updateStartGameButton() {
    const startGameButton = document.getElementById('start-game');
    if (!startGameButton || !currentRoom || !currentUser) return;
    
    const isHost = currentRoom.creatorId === currentUser.id;
    const canStart = currentRoom.players.length >= currentRoom.minPlayers && 
                     currentRoom.players.every(player => player.isReady);
    
    startGameButton.disabled = !isHost || !canStart || currentRoom.isStarted;
    
    if (currentRoom.isStarted) {
        startGameButton.textContent = 'üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞';
    } else if (!isHost) {
        startGameButton.textContent = '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ—Å—Ç–∞';
    } else if (!canStart) {
        startGameButton.textContent = 'üë• –ñ–¥–µ–º –∏–≥—Ä–æ–∫–æ–≤';
    } else {
        startGameButton.textContent = 'üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É';
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
function displayUserInfo() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
        const storedUser = localStorage.getItem('aura_money_user');
        const storedToken = localStorage.getItem('aura_money_token');
        
        if (storedUser && storedToken) {
            currentUser = JSON.parse(storedUser);
            
            const userAvatar = document.getElementById('room-user-avatar');
            const userName = document.getElementById('room-user-name');
            
            if (userAvatar && userName) {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const firstLetter = currentUser.username ? currentUser.username.charAt(0).toUpperCase() : 'U';
                userAvatar.textContent = firstLetter;
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                userName.textContent = currentUser.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                
                console.log('‚úÖ Room: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞:', currentUser.username);
            }
        } else {
            console.log('‚ö†Ô∏è Room: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            setTimeout(() => {
                window.location.href = '../auth/';
            }, 2000);
        }
    } catch (error) {
        console.error('‚ùå Room: –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏—à–µ–∫
 */
function loadTokens() {
    const tokensGrid = document.getElementById('tokens-grid');
    if (!tokensGrid) return;
    
    tokensGrid.innerHTML = '';
    
    TOKENS_CONFIG.forEach(token => {
        const tokenCard = document.createElement('div');
        tokenCard.className = 'token-card';
        tokenCard.dataset.tokenId = token.id;
        
        tokenCard.innerHTML = `
            <div class="token-icon">${token.icon}</div>
            <div class="token-name">${token.name}</div>
            <div class="token-description">${token.description}</div>
        `;
        
        tokenCard.addEventListener('click', () => selectToken(token.id));
        tokensGrid.appendChild(tokenCard);
    });
    
    console.log('‚úÖ Room: –§–∏—à–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
}

/**
 * –í—ã–±–æ—Ä —Ñ–∏—à–∫–∏
 */
function selectToken(tokenId) {
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ñ–∏—à–∫–∏
    const previousSelected = document.querySelector('.token-card.selected');
    if (previousSelected) {
        previousSelected.classList.remove('selected');
    }
    
    // –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é —Ñ–∏—à–∫—É
    const selectedCard = document.querySelector(`[data-token-id="${tokenId}"]`);
    if (selectedCard) {
        selectedCard.classList.add('selected');
        selectedToken = tokenId;
        
        console.log('‚úÖ Room: –§–∏—à–∫–∞ –≤—ã–±—Ä–∞–Ω–∞:', tokenId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        updateReadyStatus();
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ—á—Ç—ã
 */
function updateDreamData() {
    const title = document.getElementById('dream-title').value.trim();
    const description = document.getElementById('dream-description').value.trim();
    const cost = parseInt(document.getElementById('dream-cost').value) || 0;
    
    dreamData = { title, description, cost };
    
    console.log('‚úÖ Room: –î–∞–Ω–Ω—ã–µ –º–µ—á—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', dreamData);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    updateReadyStatus();
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
 */
function updateReadyStatus() {
    const readyButton = document.getElementById('ready-button');
    if (!readyButton) return;
    
    const isDreamComplete = dreamData.title && dreamData.description && dreamData.cost > 0;
    const isTokenSelected = selectedToken !== null;
    const isReady = isDreamComplete && isTokenSelected;
    
    readyButton.disabled = !isReady;
    
    const hint = document.querySelector('.ready-hint');
    if (hint) {
        if (isReady) {
            hint.textContent = '–í—ã –≥–æ—Ç–æ–≤—ã –∫ –∏–≥—Ä–µ!';
            hint.style.color = '#10b981';
        } else {
            const missing = [];
            if (!isDreamComplete) missing.push('–º–µ—á—Ç—É');
            if (!isTokenSelected) missing.push('—Ñ–∏—à–∫—É');
            hint.textContent = `–ó–∞–ø–æ–ª–Ω–∏—Ç–µ: ${missing.join(' –∏ ')}`;
            hint.style.color = '#a0a0a0';
        }
    }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
 */
async function toggleReadyStatus() {
    try {
        if (!currentRoom || !currentUser || !selectedToken) return;
        
        const isDreamComplete = dreamData.title && dreamData.description && dreamData.cost > 0;
        if (!isDreamComplete) {
            showNotification('–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –º–µ—á—Ç–µ', 'warning');
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        const playerData = {
            userId: currentUser.id,
            username: currentUser.username,
            avatar: currentUser.avatar || '',
            isReady: true,
            dream: dreamData,
            token: selectedToken
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
        await roomService.updatePlayerInRoom(currentRoom.id, playerData);
        
        showNotification('–°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
        await refreshRoomData();
        
    } catch (error) {
        console.error('‚ùå Room: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', 'error');
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
 */
async function refreshRoomData() {
    try {
        if (!currentRoom) return;
        
        const room = await roomService.getRoomById(currentRoom.id);
        if (room) {
            currentRoom = room;
            updateRoomInfo();
        }
    } catch (error) {
        console.error('‚ùå Room: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã:', error);
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
 */
function showStartGameModal() {
    const modal = document.getElementById('confirm-modal');
    const roomName = document.getElementById('modal-room-name');
    const readyCount = document.getElementById('modal-ready-count');
    const totalPlayers = document.getElementById('modal-total-players');
    
    if (modal && roomName && readyCount && totalPlayers) {
        roomName.textContent = currentRoom ? currentRoom.name : '';
        readyCount.textContent = currentRoom ? currentRoom.players.filter(p => p.isReady).length : 0;
        totalPlayers.textContent = currentRoom ? currentRoom.maxPlayers : 0;
        
        modal.classList.add('show');
    }
}

/**
 * –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
 */
function hideStartGameModal() {
    const modal = document.getElementById('confirm-modal');
    if (modal) {
        modal.classList.remove('show');
    }
}

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
 */
async function confirmStartGame() {
    try {
        if (!currentRoom || !currentUser) return;
        
        console.log('üè† Room: –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã');
        
        await roomService.startGame(currentRoom.id, currentUser.id);
        
        showNotification('–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!', 'success');
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–µ
        setTimeout(() => {
            window.location.href = '../';
        }, 2000);
        
    } catch (error) {
        console.error('‚ùå Room: –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã:', error);
        showNotification('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã', 'error');
        hideStartGameModal();
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 */
function showNotification(message, type = 'info') {
    if (notificationService) {
        notificationService.show(message, type);
    } else {
        // Fallback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        alert(message);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.loadRoomData = loadRoomData;
window.displayUserInfo = displayUserInfo;
window.selectToken = selectToken;
window.toggleReadyStatus = toggleReadyStatus;
