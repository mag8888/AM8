/**
 * PlayerList v1.0.0
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ PlayersPanel –∏ TurnController
 */

class PlayerList {
    constructor(containerId, options = {}) {
        this.container = document.getElementById(containerId);
        this.options = {
            showBalance: true,
            showStatus: true,
            showToken: true,
            showOrder: false,
            showCurrentUser: true,
            filterCurrentUser: false,
            sortBy: 'status', // 'status', 'name', 'order'
            ...options
        };
        
        if (!this.container) {
            console.error('‚ùå PlayerList: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', containerId);
            return;
        }
        
        console.log('üë• PlayerList: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –æ–ø—Ü–∏—è–º–∏:', this.options);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
     * @param {Array} players - –ú–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤
     * @param {Object} activePlayer - –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
     * @param {string} currentUserId - ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    updatePlayers(players, activePlayer, currentUserId = null) {
        if (!this.container) return;
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        let displayPlayers = players;
        if (this.options.filterCurrentUser && currentUserId) {
            displayPlayers = players.filter(p => p.id !== currentUserId);
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤
        displayPlayers = this.sortPlayers(displayPlayers, activePlayer);
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.container.innerHTML = '';
        
        if (displayPlayers.length === 0) {
            this.renderEmptyState();
            return;
        }
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –∏–≥—Ä–æ–∫–æ–≤
        displayPlayers.forEach((player, index) => {
            const isCurrentUser = currentUserId && player.id === currentUserId;
            const playerElement = this.renderPlayerItem(player, activePlayer, isCurrentUser, index);
            this.container.appendChild(playerElement);
        });
        
        console.log(`üë• PlayerList: –û–±–Ω–æ–≤–ª–µ–Ω–æ ${displayPlayers.length} –∏–≥—Ä–æ–∫–æ–≤`);
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–≥—Ä–æ–∫–∞
     * @param {Object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @param {Object} activePlayer - –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
     * @param {boolean} isCurrentUser - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     * @param {number} index - –ò–Ω–¥–µ–∫—Å –≤ —Å–ø–∏—Å–∫–µ
     * @returns {HTMLElement} DOM —ç–ª–µ–º–µ–Ω—Ç –∏–≥—Ä–æ–∫–∞
     */
    renderPlayerItem(player, activePlayer, isCurrentUser, index) {
        const statusInfo = PlayerStatusUtils.getPlayerStatusInfo(player, activePlayer, [], isCurrentUser);
        const playerElement = document.createElement('div');
        playerElement.className = statusInfo.cssClass;
        playerElement.dataset.playerId = player.id;
        
        playerElement.innerHTML = this.getPlayerHTML(player, statusInfo, index);
        
        return playerElement;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ HTML –¥–ª—è –∏–≥—Ä–æ–∫–∞
     * @param {Object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @param {Object} statusInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
     * @param {number} index - –ò–Ω–¥–µ–∫—Å –≤ —Å–ø–∏—Å–∫–µ
     * @returns {string} HTML —Å—Ç—Ä–æ–∫–∞
     */
    getPlayerHTML(player, statusInfo, index) {
        const token = this.options.showToken ? PlayerStatusUtils.getPlayerToken(player) : 'üë§';
        const name = PlayerStatusUtils.getPlayerDisplayName(player);
        const status = this.options.showStatus ? statusInfo.status : '';
        const balance = this.options.showBalance ? PlayerStatusUtils.getPlayerBalance(player) : '';
        const order = this.options.showOrder ? `#${index + 1}` : '';
        
        return `
            <div class="player-avatar ${statusInfo.isActive ? 'active-avatar' : ''}">${token}</div>
            <div class="player-info">
                <div class="player-name">${name}</div>
                ${status ? `<div class="player-status">${status}</div>` : ''}
                ${order ? `<div class="player-order">${order}</div>` : ''}
            </div>
            ${balance ? `<div class="player-money">
                <span class="money-icon">üí∞</span>
                <span class="money-amount">${balance}</span>
            </div>` : ''}
        `;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    renderEmptyState() {
        this.container.innerHTML = `
            <div class="no-players-message">
                <p>–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤</p>
                <p>–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</p>
            </div>
        `;
    }
    
    /**
     * –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
     * @param {Array} players - –ú–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤
     * @param {Object} activePlayer - –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
     * @returns {Array} –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏
     */
    sortPlayers(players, activePlayer) {
        switch (this.options.sortBy) {
            case 'status':
                return PlayerStatusUtils.sortPlayers(players, activePlayer);
            case 'name':
                return [...players].sort((a, b) => {
                    const nameA = PlayerStatusUtils.getPlayerDisplayName(a);
                    const nameB = PlayerStatusUtils.getPlayerDisplayName(b);
                    return nameA.localeCompare(nameB);
                });
            case 'order':
                return [...players].sort((a, b) => {
                    const orderA = PlayerStatusUtils.getPlayerOrder(a, players);
                    const orderB = PlayerStatusUtils.getPlayerOrder(b, players);
                    return orderA - orderB;
                });
            default:
                return players;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     * @param {Object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @param {Object} activePlayer - –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
     * @param {string} currentUserId - ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    updatePlayer(player, activePlayer, currentUserId = null) {
        const playerElement = this.container.querySelector(`[data-player-id="${player.id}"]`);
        if (!playerElement) return;
        
        const isCurrentUser = currentUserId && player.id === currentUserId;
        const statusInfo = PlayerStatusUtils.getPlayerStatusInfo(player, activePlayer, [], isCurrentUser);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã
        playerElement.className = statusInfo.cssClass;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        const avatar = playerElement.querySelector('.player-avatar');
        const name = playerElement.querySelector('.player-name');
        const status = playerElement.querySelector('.player-status');
        const balance = playerElement.querySelector('.money-amount');
        
        if (avatar && this.options.showToken) {
            avatar.textContent = PlayerStatusUtils.getPlayerToken(player);
        }
        
        if (name) {
            name.textContent = PlayerStatusUtils.getPlayerDisplayName(player);
        }
        
        if (status && this.options.showStatus) {
            status.textContent = statusInfo.status;
        }
        
        if (balance && this.options.showBalance) {
            balance.textContent = PlayerStatusUtils.getPlayerBalance(player);
        }
    }
    
    /**
     * –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     * @param {string} playerId - ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    highlightActivePlayer(playerId) {
        // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–æ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        this.container.querySelectorAll('.player-item').forEach(item => {
            item.classList.remove('active');
        });
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        const activeElement = this.container.querySelector(`[data-player-id="${playerId}"]`);
        if (activeElement) {
            activeElement.classList.add('active');
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
     * @param {Array} players - –ú–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤
     * @param {Object} activePlayer - –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    getPlayersStats(players, activePlayer) {
        return PlayerStatusUtils.getPlayersStats(players, activePlayer);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–π
     * @param {Object} newOptions - –ù–æ–≤—ã–µ –æ–ø—Ü–∏–∏
     */
    updateOptions(newOptions) {
        this.options = { ...this.options, ...newOptions };
        console.log('üë• PlayerList: –û–ø—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', this.options);
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞
     */
    clear() {
        if (this.container) {
            this.container.innerHTML = '';
        }
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    destroy() {
        this.clear();
        console.log('üë• PlayerList: –£–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.PlayerList = PlayerList;
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = PlayerList;
}
