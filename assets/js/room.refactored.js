/**
 * Room Page Controller v2.0.0 - Refactored
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
 */

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Ç–∏–ª–∏—Ç
let roomLogger, performanceOptimizer, playerStateManager;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
let roomService;
let currentRoom = null;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ—á—Ç
const DREAMS_CONFIG = [
    {
        id: 'dream_house',
        title: '–ö—É–ø–∏—Ç—å –¥–æ–º –º–µ—á—Ç—ã',
        description: '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ–º —Å —Å–∞–¥–æ–º –∏ –±–∞—Å—Å–µ–π–Ω–æ–º',
        cost: 500000,
        icon: 'üè†'
    },
    {
        id: 'dream_car',
        title: '–ö—É–ø–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –º–µ—á—Ç—ã',
        description: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞',
        cost: 150000,
        icon: 'üöó'
    },
    {
        id: 'dream_travel',
        title: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –º–∏—Ä—É',
        description: '–ü–æ—Å–µ—Ç–∏—Ç—å 50 —Å—Ç—Ä–∞–Ω –º–∏—Ä–∞',
        cost: 100000,
        icon: '‚úàÔ∏è'
    },
    {
        id: 'dream_business',
        title: '–û—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å',
        description: '–°–æ–∑–¥–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é',
        cost: 300000,
        icon: 'üíº'
    },
    {
        id: 'dream_education',
        title: '–ü–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
        description: '–û–±—É—á–∏—Ç—å—Å—è –≤ –ª—É—á—à–µ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ –º–∏—Ä–∞',
        cost: 80000,
        icon: 'üéì'
    },
    {
        id: 'antarctica_trip',
        title: '–ü–æ—Å–µ—Ç–∏—Ç—å –ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥—É',
        description: '–£–≤–∏–¥–µ—Ç—å —Å–∞–º—ã–π –∑–∞–≥–∞–¥–æ—á–Ω—ã–π –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç –ø–ª–∞–Ω–µ—Ç—ã',
        cost: 150000,
        icon: 'üßä'
    }
];

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
const TOKENS_CONFIG = [
    { id: 'lion', name: '–õ–µ–≤', icon: 'ü¶Å' },
    { id: 'eagle', name: '–û—Ä–µ–ª', icon: 'ü¶Ö' },
    { id: 'fox', name: '–õ–∏—Å–∞', icon: 'ü¶ä' },
    { id: 'bear', name: '–ú–µ–¥–≤–µ–¥—å', icon: 'üêª' },
    { id: 'tiger', name: '–¢–∏–≥—Ä', icon: 'üêÖ' },
    { id: 'wolf', name: '–í–æ–ª–∫', icon: 'üê∫' },
    { id: 'elephant', name: '–°–ª–æ–Ω', icon: 'üêò' },
    { id: 'shark', name: '–ê–∫—É–ª–∞', icon: 'ü¶à' },
    { id: 'owl', name: '–°–æ–≤–∞', icon: 'ü¶â' },
    { id: 'dolphin', name: '–î–µ–ª—å—Ñ–∏–Ω', icon: 'üê¨' }
];

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
async function initializePage() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã
        initializeUtils();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        await initializeServices();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await loadRoomData();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI
        setupUI();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        setupEventListeners();
        
        roomLogger.info('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–º–Ω–∞—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
        roomLogger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', 'error');
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Ç–∏–ª–∏—Ç
 */
function initializeUtils() {
    roomLogger = window.roomLogger || new window.Logger({ prefix: 'Room', level: 'info' });
    performanceOptimizer = window.performanceOptimizer;
    playerStateManager = window.playerStateManager;
    
    if (!playerStateManager) {
        throw new Error('PlayerStateManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
 */
async function initializeServices() {
    try {
        roomService = new RoomService(window.logger || null, window.errorHandler || null);
        window.roomService = roomService;
        roomLogger.info('–°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
        roomLogger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤', error);
        throw error;
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
 */
async function loadRoomData() {
    try {
        const urlParams = new URLSearchParams(window.location.search);
        const roomId = urlParams.get('id');
        
        if (!roomId) {
            throw new Error('ID –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω');
        }
        
        roomLogger.info('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã', { roomId });
        
        const room = await roomService.getRoomById(roomId);
        if (!room) {
            throw new Error('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        currentRoom = room;
        playerStateManager.setCurrentRoom(room);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        displayUserInfo();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—á—Ç—ã
        loadDreams();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã
        loadTokens();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateRoomUI();
        
        roomLogger.info('–î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã', { 
            roomName: room.name, 
            playersCount: room.players?.length || 0 
        });
        
    } catch (error) {
        roomLogger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã', error);
        throw error;
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
function displayUserInfo() {
    const currentUser = playerStateManager.getCurrentUser();
    if (!currentUser) {
        roomLogger.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        showAuthRequired();
        return;
    }
    
    const userAvatar = document.getElementById('room-user-avatar');
    const userName = document.getElementById('room-user-name');
    
    if (userAvatar && userName) {
        const username = currentUser.username || currentUser.name || 'User';
        const firstLetter = username.charAt(0).toUpperCase();
        userAvatar.textContent = firstLetter;
        userName.textContent = username;
        
        roomLogger.info('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞', { username });
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—á—Ç
 */
function loadDreams() {
    const dreamsContainer = document.getElementById('dreams-container');
    if (!dreamsContainer) return;
    
    dreamsContainer.innerHTML = '';
    
    DREAMS_CONFIG.forEach(dream => {
        const dreamCard = createDreamCard(dream);
        dreamsContainer.appendChild(dreamCard);
    });
    
    roomLogger.info('–ú–µ—á—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã', { count: DREAMS_CONFIG.length });
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ—á—Ç—ã
 */
function createDreamCard(dream) {
    const card = document.createElement('div');
    card.className = 'dream-card';
    card.dataset.dreamId = dream.id;
    
    card.innerHTML = `
        <div class="dream-icon">${dream.icon}</div>
        <div class="dream-content">
            <h4 class="dream-title">${dream.title}</h4>
            <p class="dream-description">${dream.description}</p>
            <div class="dream-cost">$${dream.cost.toLocaleString()}</div>
        </div>
    `;
    
    card.addEventListener('click', () => handleDreamSelection(dream));
    
    return card;
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—á—Ç—ã
 */
function handleDreamSelection(dream) {
    try {
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –º–µ—á—Ç—ã
        document.querySelectorAll('.dream-card').forEach(card => {
            card.classList.remove('selected');
        });
        
        // –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é –º–µ—á—Ç—É
        const selectedCard = document.querySelector(`[data-dream-id="${dream.id}"]`);
        if (selectedCard) {
            selectedCard.classList.add('selected');
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—á—Ç—ã
        playerStateManager.setDreamData(dream);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        updateReadyStatus();
        
        roomLogger.info('–ú–µ—á—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞', { dreamId: dream.id, title: dream.title });
        
    } catch (error) {
        roomLogger.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—á—Ç—ã', error);
        showNotification('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—á—Ç—ã', 'error');
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
 */
function loadTokens() {
    const tokensContainer = document.getElementById('tokens-container');
    if (!tokensContainer) return;
    
    tokensContainer.innerHTML = '';
    
    TOKENS_CONFIG.forEach(token => {
        const tokenCard = createTokenCard(token);
        tokensContainer.appendChild(tokenCard);
    });
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    const selectedToken = playerStateManager.getSelectedToken();
    if (selectedToken) {
        const tokenCard = document.querySelector(`[data-token-id="${selectedToken}"]`);
        if (tokenCard) {
            tokenCard.classList.add('selected');
        }
    }
    
    roomLogger.info('–¢–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã', { count: TOKENS_CONFIG.length });
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–∫–µ–Ω–∞
 */
function createTokenCard(token) {
    const card = document.createElement('div');
    card.className = 'token-card';
    card.dataset.tokenId = token.id;
    
    card.innerHTML = `
        <div class="token-icon">${token.icon}</div>
        <div class="token-name">${token.name}</div>
    `;
    
    card.addEventListener('click', () => handleTokenSelection(token.id));
    
    return card;
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞
 */
async function handleTokenSelection(tokenId) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
        const isTokenUnique = await checkTokenUniqueness(tokenId);
        if (!isTokenUnique) {
            showNotification('–≠—Ç–∞ —Ñ–∏—à–∫–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º', 'error');
            return;
        }
        
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
        document.querySelectorAll('.token-card').forEach(card => {
            card.classList.remove('selected');
        });
        
        // –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        const selectedCard = document.querySelector(`[data-token-id="${tokenId}"]`);
        if (selectedCard) {
            selectedCard.classList.add('selected');
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        playerStateManager.setSelectedToken(tokenId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
        await updatePlayerInRoom();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        updateReadyStatus();
        
        roomLogger.info('–¢–æ–∫–µ–Ω –≤—ã–±—Ä–∞–Ω', { tokenId });
        
    } catch (error) {
        roomLogger.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞', error);
        showNotification('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞', 'error');
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
 */
async function checkTokenUniqueness(tokenId) {
    try {
        const currentRoom = playerStateManager.getCurrentRoom();
        const currentUser = playerStateManager.getCurrentUser();
        
        if (!currentRoom || !currentUser) return true;
        
        const isTokenTaken = currentRoom.players.some(player => {
            const isNotCurrentUser = !playerStateManager.isCurrentUser(player);
            return isNotCurrentUser && player.token === tokenId;
        });
        
        return !isTokenTaken;
        
    } catch (error) {
        roomLogger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞', error);
        return false;
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
 */
async function updatePlayerInRoom() {
    try {
        const currentRoom = playerStateManager.getCurrentRoom();
        if (!currentRoom) return;
        
        const playerData = playerStateManager.getPlayerBundle();
        await roomService.updatePlayerInRoom(currentRoom.id, playerData);
        
        roomLogger.info('–ò–≥—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ', { playerData });
        
    } catch (error) {
        roomLogger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ', error);
        throw error;
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
 */
function updateReadyStatus() {
    const readyButton = document.getElementById('ready-button');
    if (!readyButton) return;
    
    const isPlayerReady = playerStateManager.isPlayerReady();
    const currentPlayer = playerStateManager.getPlayerInRoom();
    const isCurrentlyReady = currentPlayer ? Boolean(currentPlayer.isReady) : false;
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–∂–Ω–æ –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã–º
    readyButton.disabled = !isPlayerReady;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏
    if (isCurrentlyReady) {
        readyButton.innerHTML = '‚ùå –ù–µ –≥–æ—Ç–æ–≤';
        readyButton.className = 'btn btn-secondary btn-large';
    } else {
        readyButton.innerHTML = '‚úÖ –ì–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ!';
        readyButton.className = 'btn btn-success btn-large';
    }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
 */
async function toggleReadyStatus() {
    try {
        const currentUser = playerStateManager.getCurrentUser();
        const currentRoom = playerStateManager.getCurrentRoom();
        const selectedToken = playerStateManager.getSelectedToken();
        const dreamData = playerStateManager.getDreamData();
        
        if (!currentRoom || !currentUser || !selectedToken) {
            roomLogger.warn('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—á—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
        const isDreamComplete = dreamData.id && dreamData.title && dreamData.description && dreamData.cost > 0;
        if (!isDreamComplete) {
            showNotification('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –º–µ—á—Ç–µ', 'warning');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
        const isTokenUnique = await checkTokenUniqueness(selectedToken);
        if (!isTokenUnique) {
            showNotification('–≠—Ç–∞ —Ñ–∏—à–∫–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º', 'error');
            return;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        const currentPlayer = playerStateManager.getPlayerInRoom();
        const isCurrentlyReady = currentPlayer ? Boolean(currentPlayer.isReady) : false;
        const newReadyState = !isCurrentlyReady;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        const playerData = playerStateManager.getPlayerBundle();
        playerData.isReady = newReadyState;
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        const validation = playerStateManager.validatePlayerBundle(playerData);
        if (!validation.isValid) {
            showNotification(validation.message || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞', 'error');
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
        await roomService.updatePlayerInRoom(currentRoom.id, playerData);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (newReadyState) {
            showNotification('–í—ã –≥–æ—Ç–æ–≤—ã –∫ –∏–≥—Ä–µ!', 'success');
        } else {
            showNotification('–í—ã –±–æ–ª—å—à–µ –Ω–µ –≥–æ—Ç–æ–≤—ã –∫ –∏–≥—Ä–µ', 'info');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
        await refreshRoomData();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        updateReadyStatus();
        
        roomLogger.info('–°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω', { newReadyState });
        
    } catch (error) {
        roomLogger.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏', error);
        showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', 'error');
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∫–æ–º–Ω–∞—Ç—ã
 */
function updateRoomUI() {
    if (!currentRoom) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
    updateRoomInfo();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    updatePlayersList();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    updateControlButtons();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    updateReadyStatus();
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ
 */
function updateRoomInfo() {
    const roomNameElement = document.getElementById('room-name');
    const roomIdElement = document.getElementById('room-id');
    
    if (roomNameElement) {
        roomNameElement.textContent = currentRoom.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    }
    
    if (roomIdElement) {
        roomIdElement.textContent = currentRoom.id || '';
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
 */
function updatePlayersList() {
    const playersContainer = document.getElementById('players-list');
    if (!playersContainer || !currentRoom.players) return;
    
    playersContainer.innerHTML = '';
    
    currentRoom.players.forEach(player => {
        const playerElement = createPlayerElement(player);
        playersContainer.appendChild(playerElement);
    });
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–≥—Ä–æ–∫–∞
 */
function createPlayerElement(player) {
    const element = document.createElement('div');
    element.className = 'player-item';
    
    const isCurrentUser = playerStateManager.isCurrentUser(player);
    const status = player.isReady ? '–ì–æ—Ç–æ–≤' : '–ì–æ—Ç–æ–≤–∏—Ç—Å—è';
    
    element.innerHTML = `
        <div class="player-avatar">${player.avatar || player.name?.charAt(0) || 'U'}</div>
        <div class="player-info">
            <div class="player-name">${player.name || player.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫'}</div>
            <div class="player-status">${status}</div>
        </div>
        ${isCurrentUser ? '<div class="current-user-badge">–í—ã</div>' : ''}
    `;
    
    return element;
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
function updateControlButtons() {
    const startButton = document.getElementById('start-game-button');
    if (!startButton) return;
    
    const currentUser = playerStateManager.getCurrentUser();
    const isHost = currentRoom.creatorId === currentUser?.id || 
                   currentRoom.creator === currentUser?.username;
    
    const readyPlayers = currentRoom.players?.filter(p => p.isReady).length || 0;
    const totalPlayers = currentRoom.players?.length || 0;
    const allPlayersReady = readyPlayers >= 1 && readyPlayers === totalPlayers;
    
    startButton.disabled = !isHost || !allPlayersReady;
    
    if (allPlayersReady) {
        startButton.textContent = 'üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É';
        startButton.className = 'btn btn-success btn-large';
    } else {
        startButton.textContent = `‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (${readyPlayers}/${totalPlayers})`;
        startButton.className = 'btn btn-secondary btn-large';
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
 */
async function refreshRoomData() {
    try {
        if (!currentRoom) return;
        
        const room = await roomService.getRoomById(currentRoom.id);
        if (room) {
            currentRoom = room;
            playerStateManager.setCurrentRoom(room);
            updateRoomUI();
        }
        
    } catch (error) {
        roomLogger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã', error);
    }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
 */
function setupUI() {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    setInterval(refreshRoomData, 5000);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–µ—á—Ç—É
    const dreamData = playerStateManager.getDreamData();
    if (dreamData.id) {
        const dreamCard = document.querySelector(`[data-dream-id="${dreamData.id}"]`);
        if (dreamCard) {
            dreamCard.classList.add('selected');
        }
    }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    const readyButton = document.getElementById('ready-button');
    if (readyButton) {
        readyButton.addEventListener('click', toggleReadyStatus);
    }
    
    // –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    const startButton = document.getElementById('start-game-button');
    if (startButton) {
        startButton.addEventListener('click', confirmStartGame);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
    const quickCreateBtn = document.getElementById('quick-create-room');
    const quickRefreshBtn = document.getElementById('quick-refresh');
    
    if (quickCreateBtn) {
        quickCreateBtn.addEventListener('click', showCreateRoomModal);
    }
    
    if (quickRefreshBtn) {
        quickRefreshBtn.addEventListener('click', refreshRoomsWithAnimation);
    }
}

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
 */
async function confirmStartGame() {
    try {
        const currentUser = playerStateManager.getCurrentUser();
        const currentRoom = playerStateManager.getCurrentRoom();
        
        if (!currentRoom || !currentUser) {
            showNotification('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'error');
            return;
        }
        
        const userId = playerStateManager.getCurrentUserId();
        if (!userId) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã');
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        const startResult = await roomService.startGame(currentRoom.id, userId);
        
        if (!startResult.success) {
            throw new Error(startResult.message || '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã');
        }
        
        showNotification('–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é...', 'success');
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–µ
        setTimeout(() => {
            navigateToGameBoard(currentRoom.id);
        }, 2000);
        
    } catch (error) {
        if (error.message && error.message.includes('—É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞')) {
            showNotification('–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é...', 'info');
            setTimeout(() => {
                navigateToGameBoard(currentRoom.id);
            }, 2000);
        } else if (error.message && error.message.includes('Application failed to respond')) {
            showNotification('–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –∏–≥—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é...', 'warning');
            setTimeout(() => {
                navigateToGameBoard(currentRoom.id);
            }, 2000);
        } else {
            roomLogger.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã', error);
            showNotification('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã', 'error');
        }
    }
}

/**
 * –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é
 */
function navigateToGameBoard(roomId) {
    try {
        const currentUser = playerStateManager.getCurrentUser();
        const dreamData = playerStateManager.getDreamData();
        const selectedToken = playerStateManager.getSelectedToken();
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        const bundle = {
            roomId,
            currentUser: {
                ...currentUser,
                roomId: roomId,
                fromRoom: true
            },
            dreamData,
            selectedToken,
            players: currentRoom?.players || []
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ sessionStorage
        sessionStorage.setItem('am_player_bundle', JSON.stringify(bundle));
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é
        window.location.href = `../index.html#game?roomId=${roomId}`;
        
        roomLogger.info('–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é', { roomId });
        
    } catch (error) {
        roomLogger.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∏–≥—Ä–µ', 'error');
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 */
function showNotification(message, type = 'info') {
    if (window.showNotification) {
        window.showNotification(message, type);
    } else {
        console.log(`[${type.toUpperCase()}] ${message}`);
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
function showAuthRequired() {
    showNotification('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 'warning');
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
 */
function showCreateRoomModal() {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    console.log('–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
 */
function refreshRoomsWithAnimation() {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    console.log('–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', initializePage);

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.toggleReadyStatus = toggleReadyStatus;
window.confirmStartGame = confirmStartGame;
window.navigateToGameBoard = navigateToGameBoard;
