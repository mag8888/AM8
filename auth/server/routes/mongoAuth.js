/**
 * MongoAuth Routes - –ú–∞—Ä—à—Ä—É—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å MongoDB
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –î–∞—Ç–∞: 11 –æ–∫—Ç—è–±—Ä—è 2024
 */

const express = require('express');

// –ò–º–ø–æ—Ä—Ç middleware
const { authenticateToken, authRateLimit } = require('../middleware/auth');

// –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
const mongoAuthService = require('../services/MongoAuthService');

const router = express.Router();

/**
 * POST /api/auth/register
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.post('/register', 
    authRateLimit,
    async (req, res) => {
        try {
            console.log('üì° API: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.body.email);
            
            const result = await mongoAuthService.register(req.body);
            
            res.status(201).json(result);
            
        } catch (error) {
            console.error('‚ùå API: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            
            if (error.message === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç') {
                return res.status(400).json({
                    success: false,
                    message: error.message,
                    errors: ['email']
                });
            }
            
            res.status(500).json({
                success: false,
                message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
                errors: ['server']
            });
        }
    }
);

/**
 * POST /api/auth/login
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.post('/login',
    authRateLimit,
    async (req, res) => {
        try {
            console.log('üì° API: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.body.email);
            
            const result = await mongoAuthService.login(req.body);
            
            res.json(result);
            
        } catch (error) {
            console.error('‚ùå API: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            
            if (error.message === '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å') {
                return res.status(401).json({
                    success: false,
                    message: error.message,
                    errors: ['credentials']
                });
            }
            
            res.status(500).json({
                success: false,
                message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
                errors: ['server']
            });
        }
    }
);

/**
 * POST /api/auth/verify
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
 */
router.post('/verify',
    async (req, res) => {
        try {
            const { token } = req.body;
            
            if (!token) {
                return res.status(400).json({
                    success: false,
                    message: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
                });
            }
            
            const decoded = await mongoAuthService.verifyToken(token);
            
            res.json({
                success: true,
                message: '–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω',
                user: decoded
            });
            
        } catch (error) {
            console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
            
            res.status(401).json({
                success: false,
                message: error.message
            });
        }
    }
);

/**
 * GET /api/auth/me
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.get('/me',
    authenticateToken,
    async (req, res) => {
        try {
            const user = await mongoAuthService.getCurrentUser(req.user.token);
            
            res.json({
                success: true,
                user: user
            });
            
        } catch (error) {
            console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            
            res.status(401).json({
                success: false,
                message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
            });
        }
    }
);

/**
 * POST /api/auth/forgot-password
 * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
 */
router.post('/forgot-password',
    authRateLimit,
    async (req, res) => {
        try {
            const { email } = req.body;
            
            if (!email) {
                return res.status(400).json({
                    success: false,
                    message: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
                });
            }
            
            const result = await mongoAuthService.forgotPassword(email);
            
            res.json(result);
            
        } catch (error) {
            console.error('‚ùå API: –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:', error);
            
            res.status(500).json({
                success: false,
                message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è'
            });
        }
    }
);

/**
 * POST /api/auth/logout
 * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
 */
router.post('/logout',
    authenticateToken,
    async (req, res) => {
        try {
            // –í JWT –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º logout
            // –¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            
            res.json({
                success: true,
                message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'
            });
            
        } catch (error) {
            console.error('‚ùå API: –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
            
            res.status(500).json({
                success: false,
                message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ'
            });
        }
    }
);

module.exports = router;
