/**
 * Auth Routes - –ú–∞—Ä—à—Ä—É—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –î–∞—Ç–∞: 11 –æ–∫—Ç—è–±—Ä—è 2024
 */

const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');

// –ò–º–ø–æ—Ä—Ç middleware
const { authenticateToken, validateInput, rateLimit } = require('../middleware/auth');
const { validateEmail, validatePassword, validateUsername } = require('../middleware/validation');

// –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
const AuthService = require('../services/AuthService');
const UserModel = require('../models/UserModel');
const MongooseUserModel = require('../models/MongooseUserModel');

const router = express.Router();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
const authService = new AuthService();

// –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
const useMongoDB = process.env.NODE_ENV === 'production' || process.env.USE_MONGODB === 'true';
let userModel;

if (useMongoDB) {
    console.log(`üìä Auth: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MongoDB Atlas –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    // –ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    userModel = null;
} else {
    console.log(`üìä Auth: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è JSON —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    userModel = new UserModel();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ MongoDB –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
async function initializeMongoModel() {
    if (useMongoDB && !userModel) {
        userModel = new MongooseUserModel();
        await userModel.init();
        console.log('‚úÖ Auth: MongoDB –º–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏
async function ensureModelInitialized(req, res, next) {
    if (useMongoDB && !userModel) {
        try {
            await initializeMongoModel();
            next();
        } catch (error) {
            console.error('‚ùå Auth: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏:', error);
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
            });
        }
    } else {
        next();
    }
}

/**
 * POST /api/auth/register
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.post('/register', 
    ensureModelInitialized,
    validateInput(['username', 'email', 'password']),
    async (req, res) => {
        try {
            const { username, email, password } = req.body;

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            const usernameValidation = validateUsername(username);
            if (!usernameValidation.valid) {
                return res.status(400).json({
                    success: false,
                    message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                    errors: usernameValidation.errors
                });
            }

            const emailValidation = validateEmail(email);
            if (!emailValidation.valid) {
                return res.status(400).json({
                    success: false,
                    message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∞–¥—Ä–µ—Å',
                    errors: emailValidation.errors
                });
            }

            const passwordValidation = validatePassword(password);
            if (!passwordValidation.valid) {
                return res.status(400).json({
                    success: false,
                    message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å',
                    errors: passwordValidation.errors
                });
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            const emailExists = await userModel.isEmailUnique(email);
            if (!emailExists) {
                return res.status(409).json({
                    success: false,
                    message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                    errors: ['email']
                });
            }

            const usernameExists = await userModel.isUsernameUnique(username);
            if (!usernameExists) {
                return res.status(409).json({
                    success: false,
                    message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                    errors: ['username']
                });
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const passwordHash = await bcrypt.hash(password, 12);
            const user = await userModel.createUser({
                username,
                email,
                passwordHash
            });

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
            const jwtSecret = process.env.JWT_SECRET || 'em1-production-secret-key-2024-railway';
            const token = jwt.sign(
                { 
                    id: user.id, 
                    email: user.email, 
                    username: user.username 
                },
                jwtSecret,
                { expiresIn: '7d' }
            );

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
            await userModel.updateLastLogin(user.id);

            console.log('‚úÖ Auth: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', user.email);

            res.status(201).json({
                success: true,
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
                user: {
                    id: user.id,
                    email: user.email,
                    username: user.username,
                    createdAt: user.createdAt
                },
                token
            });

        } catch (error) {
            console.error('‚ùå Auth: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            res.status(500).json({
                success: false,
                message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    }
);

/**
 * POST /api/auth/login
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.post('/login', 
    ensureModelInitialized,
    validateInput(['email', 'password']),
    async (req, res) => {
        try {
            const { email, password } = req.body;

            // –í–∞–ª–∏–¥–∞—Ü–∏—è email
            const emailValidation = validateEmail(email);
            if (!emailValidation.valid) {
                return res.status(400).json({
                    success: false,
                    message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∞–¥—Ä–µ—Å',
                    errors: emailValidation.errors
                });
            }

            // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await userModel.findByEmail(email);
            if (!user) {
                return res.status(401).json({
                    success: false,
                    message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
                    errors: ['credentials']
                });
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (!user.isActive) {
                return res.status(403).json({
                    success: false,
                    message: '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
                    errors: ['account']
                });
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
            const passwordValid = await bcrypt.compare(password, user.passwordHash);
            if (!passwordValid) {
                return res.status(401).json({
                    success: false,
                    message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
                    errors: ['credentials']
                });
            }

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
            const jwtSecret = process.env.JWT_SECRET || 'em1-production-secret-key-2024-railway';
            const token = jwt.sign(
                { 
                    id: user.id, 
                    email: user.email, 
                    username: user.username 
                },
                jwtSecret,
                { expiresIn: '7d' }
            );

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
            await userModel.updateLastLogin(user.id);

            console.log('‚úÖ Auth: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.email);

            res.json({
                success: true,
                message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
                user: {
                    id: user.id,
                    email: user.email,
                    username: user.username,
                    lastLogin: new Date().toISOString()
                },
                token
            });

        } catch (error) {
            console.error('‚ùå Auth: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            res.status(500).json({
                success: false,
                message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    }
);

/**
 * POST /api/auth/logout
 * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
 */
router.post('/logout', authenticateToken, async (req, res) => {
    try {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É
        // –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ (blacklist)
        
        console.log('‚úÖ Auth: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã:', req.user.email);

        res.json({
            success: true,
            message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'
        });

    } catch (error) {
        console.error('‚ùå Auth: –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
        res.status(500).json({
            success: false,
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

/**
 * GET /api/auth/profile
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.get('/profile', authenticateToken, async (req, res) => {
    try {
        const user = await userModel.getUserProfile(req.user.id);
        
        if (!user) {
            return res.status(404).json({
                success: false,
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        res.json({
            success: true,
            user
        });

    } catch (error) {
        console.error('‚ùå Auth: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({
            success: false,
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

/**
 * PUT /api/auth/profile
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.put('/profile', 
    authenticateToken,
    validateInput(['username', 'email']),
    async (req, res) => {
        try {
            const { username, email } = req.body;
            const userId = req.user.id;

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            const usernameValidation = validateUsername(username);
            if (!usernameValidation.valid) {
                return res.status(400).json({
                    success: false,
                    message: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                    errors: usernameValidation.errors
                });
            }

            const emailValidation = validateEmail(email);
            if (!emailValidation.valid) {
                return res.status(400).json({
                    success: false,
                    message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∞–¥—Ä–µ—Å',
                    errors: emailValidation.errors
                });
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            const emailExists = await userModel.isEmailUnique(email, userId);
            if (!emailExists) {
                return res.status(409).json({
                    success: false,
                    message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                    errors: ['email']
                });
            }

            const usernameExists = await userModel.isUsernameUnique(username, userId);
            if (!usernameExists) {
                return res.status(409).json({
                    success: false,
                    message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                    errors: ['username']
                });
            }

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const updatedUser = await userModel.updateUser(userId, {
                username,
                email
            });

            console.log('‚úÖ Auth: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedUser.email);

            res.json({
                success: true,
                message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
                user: {
                    id: updatedUser.id,
                    email: updatedUser.email,
                    username: updatedUser.username,
                    updatedAt: new Date().toISOString()
                }
            });

        } catch (error) {
            console.error('‚ùå Auth: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
            res.status(500).json({
                success: false,
                message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    }
);

/**
 * GET /api/auth/validate
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
 */
router.get('/validate', authenticateToken, async (req, res) => {
    try {
        const user = await userModel.findById(req.user.id);
        
        if (!user || !user.isActive) {
            return res.status(401).json({
                success: false,
                message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
            });
        }

        res.json({
            success: true,
            valid: true,
            user: {
                id: user.id,
                email: user.email,
                username: user.username
            }
        });

    } catch (error) {
        console.error('‚ùå Auth: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
        res.status(500).json({
            success: false,
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

/**
 * POST /api/auth/forgot-password
 * –ó–∞–ø—Ä–æ—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
 */
router.post('/forgot-password', 
    validateInput(['email']),
    async (req, res) => {
        try {
            const { email } = req.body;

            // –í–∞–ª–∏–¥–∞—Ü–∏—è email
            const emailValidation = validateEmail(email);
            if (!emailValidation.valid) {
                return res.status(400).json({
                    success: false,
                    message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∞–¥—Ä–µ—Å',
                    errors: emailValidation.errors
                });
            }

            // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await userModel.findByEmail(email);
            if (!user) {
                // –í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                return res.json({
                    success: true,
                    message: '–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞ –Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è'
                });
            }

            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ email
            // —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
            
            console.log('‚úÖ Auth: –ó–∞–ø—Ä–æ—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –¥–ª—è:', user.email);

            res.json({
                success: true,
                message: '–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞ –Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è'
            });

        } catch (error) {
            console.error('‚ùå Auth: –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:', error);
            res.status(500).json({
                success: false,
                message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    }
);

/**
 * POST /api/auth/reset-password
 * –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
 */
router.post('/reset-password', 
    validateInput(['token', 'password']),
    async (req, res) => {
        try {
            const { token, password } = req.body;

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
            const passwordValidation = validatePassword(password);
            if (!passwordValidation.valid) {
                return res.status(400).json({
                    success: false,
                    message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å',
                    errors: passwordValidation.errors
                });
            }

            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
            // –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            res.json({
                success: true,
                message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω'
            });

        } catch (error) {
            console.error('‚ùå Auth: –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
            res.status(500).json({
                success: false,
                message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    }
);

/**
 * POST /api/auth/migrate
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –≤ MongoDB (—Ç–æ–ª—å–∫–æ –¥–ª—è MongoDB –º–æ–¥–µ–ª–∏)
 */
router.post('/migrate', async (req, res) => {
    try {
        if (!useMongoDB) {
            return res.status(400).json({
                success: false,
                message: '–ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è MongoDB'
            });
        }

        // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞
        const fs = require('fs').promises;
        const path = require('path');
        
        const dataFile = path.join(__dirname, '../../data/users.json');
        const data = await fs.readFile(dataFile, 'utf8');
        const usersData = JSON.parse(data);

        // –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        const result = await userModel.migrateFromJson(usersData);

        console.log('‚úÖ Auth: –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', result);

        res.json({
            success: true,
            message: '–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            result
        });

    } catch (error) {
        console.error('‚ùå Auth: –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö'
        });
    }
});

/**
 * GET /api/auth/stats
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
router.get('/stats', async (req, res) => {
    try {
        const stats = await userModel.getStats();
        
        res.json({
            success: true,
            stats
        });

    } catch (error) {
        console.error('‚ùå Auth: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
        });
    }
});

module.exports = router;
