/**
 * AuthService Server - –°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –î–∞—Ç–∞: 11 –æ–∫—Ç—è–±—Ä—è 2024
 */

const express = require('express');
const cors = require('cors');
const rateLimit = require('express-rate-limit');
const helmet = require('helmet');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const databaseConfig = require('./config/database');

// –ò–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
const authRoutes = require('./routes/auth');
const healthRoutes = require('./routes/health');

// –ò–º–ø–æ—Ä—Ç middleware
const { errorHandler } = require('./middleware/errorHandler');

class AuthServer {
    constructor() {
        this.app = express();
        this.port = process.env.PORT || 3001;
        this.isInitialized = false;
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
     */
    async init() {
        try {
            console.log('üöÄ AuthServer: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
            
            // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è MongoDB)
            const useMongoDB = process.env.USE_MONGODB !== 'false';
            if (useMongoDB) {
                await this.connectDatabase();
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
            this.setupMiddleware();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
            this.setupRoutes();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
            this.setupErrorHandling();
            
            this.isInitialized = true;
            console.log('‚úÖ AuthServer: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå AuthServer: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     */
    async connectDatabase() {
        try {
            await databaseConfig.connect();
            console.log('‚úÖ AuthServer: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå AuthServer: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
     */
    setupMiddleware() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ trust proxy –¥–ª—è Railway
        this.app.set('trust proxy', 1);
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        this.app.use(helmet({
            contentSecurityPolicy: {
                directives: {
                    defaultSrc: ["'self'"],
                    styleSrc: ["'self'", "'unsafe-inline'"],
                    scriptSrc: ["'self'", "'unsafe-inline'", "'unsafe-eval'"],
                    imgSrc: ["'self'", "data:", "https:"],
                    connectSrc: ["'self'", "https:", "wss:"],
                    fontSrc: ["'self'", "data:", "https:"],
                    objectSrc: ["'none'"],
                    mediaSrc: ["'self'"],
                    frameSrc: ["'self'"]
                }
            }
        }));

        // CORS
        this.app.use(cors({
            origin: process.env.ALLOWED_ORIGINS ? 
                process.env.ALLOWED_ORIGINS.split(',') : 
                ['http://localhost:8000', 'http://127.0.0.1:8000'],
            credentials: true,
            methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
            allowedHeaders: ['Content-Type', 'Authorization']
        }));

        // Rate limiting
        const limiter = rateLimit({
            windowMs: parseInt(process.env.RATE_LIMIT_WINDOW) || 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
            max: parseInt(process.env.RATE_LIMIT_MAX) || 100, // 100 –∑–∞–ø—Ä–æ—Å–æ–≤
            message: {
                success: false,
                message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
                retryAfter: Math.ceil((parseInt(process.env.RATE_LIMIT_WINDOW) || 15 * 60 * 1000) / 1000)
            },
            standardHeaders: true,
            legacyHeaders: false
        });

        this.app.use(limiter);

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π rate limiting –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const authLimiter = rateLimit({
            windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
            max: 5, // 5 –ø–æ–ø—ã—Ç–æ–∫
            message: {
                success: false,
                message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç'
            },
            skipSuccessfulRequests: true
        });

        this.app.use('/api/auth/login', authLimiter);
        this.app.use('/api/auth/register', authLimiter);

        // –ü–∞—Ä—Å–∏–Ω–≥ JSON
        this.app.use(express.json({ 
            limit: '10mb',
            verify: (req, res, buf) => {
                try {
                    JSON.parse(buf);
                } catch (e) {
                    res.status(400).json({
                        success: false,
                        message: '–ù–µ–≤–µ—Ä–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç'
                    });
                }
            }
        }));

        // –ü–∞—Ä—Å–∏–Ω–≥ URL-encoded –¥–∞–Ω–Ω—ã—Ö
        this.app.use(express.urlencoded({ extended: true, limit: '10mb' }));

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        this.app.use((req, res, next) => {
            const timestamp = new Date().toISOString();
            console.log(`${timestamp} ${req.method} ${req.path} - ${req.ip}`);
            next();
        });

        // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        this.app.use(express.static(path.join(__dirname, '../'), {
            maxAge: process.env.NODE_ENV === 'production' ? '1d' : 0
        }));
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
     */
    setupRoutes() {
        // API –º–∞—Ä—à—Ä—É—Ç—ã
        this.app.use('/api/auth', authRoutes);
        this.app.use('/api/health', healthRoutes);

        // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        this.app.get('/', (req, res) => {
            res.sendFile(path.join(__dirname, '../index.html'));
        });

        // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã
        this.app.get('/game', (req, res) => {
            res.redirect('/../index.html');
        });

        // 404 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        this.app.use('*', (req, res) => {
            res.status(404).json({
                success: false,
                message: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
                path: req.originalUrl
            });
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
     */
    setupErrorHandling() {
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        this.app.use(errorHandler);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
        process.on('unhandledRejection', (reason, promise) => {
            console.error('‚ùå AuthServer: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        process.on('uncaughtException', (error) => {
            console.error('‚ùå AuthServer: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
            process.exit(1);
        });
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
     */
    async start() {
        if (!this.isInitialized) {
            throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }

        return new Promise((resolve, reject) => {
            try {
                this.server = this.app.listen(this.port, () => {
                    console.log(`üöÄ AuthServer: –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.port}`);
                    console.log(`üì± AuthServer: URL - http://localhost:${this.port}`);
                    resolve();
                });

                this.server.on('error', (error) => {
                    console.error('‚ùå AuthServer: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
                    reject(error);
                });
            } catch (error) {
                console.error('‚ùå AuthServer: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
                reject(error);
            }
        });
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
     */
    async stop() {
        return new Promise(async (resolve) => {
            try {
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
                if (this.server) {
                    this.server.close(async () => {
                        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                        await databaseConfig.disconnect();
                        console.log('üõë AuthServer: –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                        resolve();
                    });
                } else {
                    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    await databaseConfig.disconnect();
                    resolve();
                }
            } catch (error) {
                console.error('‚ùå AuthServer: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ:', error);
                resolve();
            }
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    getApp() {
        return this.app;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
     */
    getStatus() {
        return {
            isInitialized: this.isInitialized,
            isRunning: !!this.server,
            port: this.port,
            uptime: process.uptime(),
            memory: process.memoryUsage(),
            version: process.version
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
module.exports = AuthServer;

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const server = new AuthServer();
    
    // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –ø–æ—Ç–æ–º –∑–∞–ø—É—Å–∫–∞–µ–º
    server.init()
        .then(() => server.start())
        .catch((error) => {
            console.error('‚ùå AuthServer: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });

    // Graceful shutdown
    process.on('SIGTERM', async () => {
        console.log('üì° AuthServer: –ü–æ–ª—É—á–µ–Ω SIGTERM, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
        await server.stop();
        process.exit(0);
    });

    process.on('SIGINT', async () => {
        console.log('üì° AuthServer: –ü–æ–ª—É—á–µ–Ω SIGINT, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
        await server.stop();
        process.exit(0);
    });
}
