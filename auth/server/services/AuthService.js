/**
 * AuthService - –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –î–∞—Ç–∞: 11 –æ–∫—Ç—è–±—Ä—è 2024
 */

const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');

class AuthService {
    constructor() {
        this.jwtSecret = process.env.JWT_SECRET || 'default-secret-key';
        this.jwtExpiresIn = process.env.JWT_EXPIRES_IN || '7d';
        this.bcryptRounds = parseInt(process.env.BCRYPT_ROUNDS) || 12;
        this.isInitialized = false;
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
     */
    async init() {
        try {
            console.log('üîê AuthService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JWT —Å–µ–∫—Ä–µ—Ç–∞
            if (this.jwtSecret === 'default-secret-key') {
                console.warn('‚ö†Ô∏è AuthService: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π JWT —Å–µ–∫—Ä–µ—Ç!');
            }

            this.isInitialized = true;
            console.log('‚úÖ AuthService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå AuthService: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
     * @param {string} password - –ü–∞—Ä–æ–ª—å –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {Promise<string>} –•–µ—à –ø–∞—Ä–æ–ª—è
     */
    async hashPassword(password) {
        try {
            return await bcrypt.hash(password, this.bcryptRounds);
        } catch (error) {
            console.error('‚ùå AuthService: –û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è:', error);
            throw new Error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–ª—è');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
     * @param {string} password - –ü–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @param {string} hash - –•–µ—à –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    async comparePassword(password, hash) {
        try {
            return await bcrypt.compare(password, hash);
        } catch (error) {
            console.error('‚ùå AuthService: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:', error);
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è');
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
     * @param {Object} payload - –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
     * @returns {string} JWT —Ç–æ–∫–µ–Ω
     */
    generateToken(payload) {
        try {
            return jwt.sign(payload, this.jwtSecret, {
                expiresIn: this.jwtExpiresIn,
                issuer: 'aura-money-auth',
                audience: 'aura-money-game'
            });
        } catch (error) {
            console.error('‚ùå AuthService: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');
        }
    }

    /**
     * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
     * @param {string} token - JWT —Ç–æ–∫–µ–Ω
     * @returns {Object} –î–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
     */
    verifyToken(token) {
        try {
            return jwt.verify(token, this.jwtSecret, {
                issuer: 'aura-money-auth',
                audience: 'aura-money-game'
            });
        } catch (error) {
            if (error.name === 'TokenExpiredError') {
                throw new Error('–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
            } else if (error.name === 'JsonWebTokenError') {
                throw new Error('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω');
            } else {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞');
            }
        }
    }

    /**
     * –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
     * @param {string} token - JWT —Ç–æ–∫–µ–Ω
     * @returns {Object} –î–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
     */
    decodeToken(token) {
        try {
            return jwt.decode(token);
        } catch (error) {
            console.error('‚ùå AuthService: –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
            throw new Error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
     * @param {number} length - –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞
     * @returns {string} –°–ª—É—á–∞–π–Ω—ã–π —Ç–æ–∫–µ–Ω
     */
    generateRandomToken(length = 32) {
        return crypto.randomBytes(length).toString('hex');
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object} –¢–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ
     */
    generateResetToken(userId) {
        const token = this.generateRandomToken(32);
        const expiresAt = new Date(Date.now() + 60 * 60 * 1000); // 1 —á–∞—Å

        return {
            token,
            userId,
            expiresAt: expiresAt.toISOString(),
            hash: crypto.createHash('sha256').update(token).digest('hex')
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
     * @param {string} token - –¢–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @param {string} storedHash - –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ö–µ—à
     * @param {string} expiresAt - –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
     * @returns {boolean} –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
     */
    verifyResetToken(token, storedHash, expiresAt) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            if (new Date() > new Date(expiresAt)) {
                return false;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∞
            const tokenHash = crypto.createHash('sha256').update(token).digest('hex');
            return tokenHash === storedHash;
        } catch (error) {
            console.error('‚ùå AuthService: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            return false;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} user - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} options - –û–ø—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
     * @returns {Object} –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
     */
    createUserSession(user, options = {}) {
        const sessionId = this.generateRandomToken();
        const token = this.generateToken({
            id: user.id,
            email: user.email,
            username: user.username,
            sessionId
        });

        return {
            sessionId,
            token,
            user: {
                id: user.id,
                email: user.email,
                username: user.username,
                createdAt: user.createdAt
            },
            expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 –¥–Ω–µ–π
            ...options
        };
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
     * @param {string} token - –¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
     * @returns {string} –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω
     */
    refreshToken(token) {
        try {
            const decoded = this.decodeToken(token);
            if (!decoded) {
                throw new Error('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω');
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            return this.generateToken({
                id: decoded.id,
                email: decoded.email,
                username: decoded.username,
                sessionId: decoded.sessionId
            });
        } catch (error) {
            console.error('‚ùå AuthService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
            throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è
     * @param {string} password - –ü–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    checkPasswordStrength(password) {
        const checks = {
            length: password.length >= 8,
            hasLower: /[a-z]/.test(password),
            hasUpper: /[A-Z]/.test(password),
            hasNumber: /[0-9]/.test(password),
            hasSpecial: /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password),
            noCommon: !this.isCommonPassword(password)
        };

        let score = 0;
        Object.values(checks).forEach(check => {
            if (check) score++;
        });

        let level;
        if (score < 3) {
            level = 'weak';
        } else if (score < 4) {
            level = 'fair';
        } else if (score < 5) {
            level = 'good';
        } else {
            level = 'strong';
        }

        return {
            level,
            score,
            checks,
            valid: score >= 3
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
     * @param {string} password - –ü–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {boolean} –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–æ–ª—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–º
     */
    isCommonPassword(password) {
        const commonPasswords = [
            'password', '123456', '123456789', 'qwerty', 'abc123',
            'password123', 'admin', 'letmein', 'welcome', 'monkey',
            '1234567890', 'password1', 'qwerty123', 'dragon', 'master',
            'hello', 'welcome', 'login', 'master', 'princess'
        ];
        
        return commonPasswords.includes(password.toLowerCase());
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è email
     * @param {string} email - Email –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     * @returns {boolean} –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å email
     */
    validateEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email) && email.length <= 254;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     * @returns {boolean} –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    validateUsername(username) {
        const usernameRegex = /^[a-zA-Z0-9_-]{3,30}$/;
        return usernameRegex.test(username) && !/^[0-9]/.test(username);
    }

    /**
     * –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏
     * @param {string} str - –°—Ç—Ä–æ–∫–∞ –¥–ª—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏
     * @returns {string} –°–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
     */
    sanitizeString(str) {
        if (typeof str !== 'string') return '';
        
        return str
            .trim()
            .replace(/[<>]/g, '') // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            .substring(0, 1000); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
     * @returns {Object} –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
     */
    getStatus() {
        return {
            isInitialized: this.isInitialized,
            jwtConfigured: this.jwtSecret !== 'default-secret-key',
            bcryptRounds: this.bcryptRounds,
            jwtExpiresIn: this.jwtExpiresIn,
            version: '1.0.0'
        };
    }
}

module.exports = AuthService;
