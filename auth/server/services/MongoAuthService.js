/**
 * MongoAuthService - –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å MongoDB
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –î–∞—Ç–∞: 11 –æ–∫—Ç—è–±—Ä—è 2024
 */

const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');
const MongooseUserModel = require('../models/MongooseUserModel');
const databaseConfig = require('../../../server/config/database');

class MongoAuthService {
    constructor() {
        this.jwtSecret = process.env.JWT_SECRET || 'default-secret-key';
        this.jwtExpiresIn = process.env.JWT_EXPIRES_IN || '7d';
        this.bcryptRounds = parseInt(process.env.BCRYPT_ROUNDS) || 12;
        this.isInitialized = false;
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
     */
    async init() {
        try {
            console.log('üîê MongoAuthService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
            if (!databaseConfig.isConnected) {
                console.log('üíæ MongoAuthService: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
                await databaseConfig.connectMongoDB();
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JWT —Å–µ–∫—Ä–µ—Ç–∞
            if (this.jwtSecret === 'default-secret-key') {
                console.warn('‚ö†Ô∏è MongoAuthService: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π JWT —Å–µ–∫—Ä–µ—Ç!');
            }

            this.isInitialized = true;
            console.log('‚úÖ MongoAuthService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå MongoAuthService: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
     * @param {string} password - –ü–∞—Ä–æ–ª—å –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {Promise<string>} –•–µ—à –ø–∞—Ä–æ–ª—è
     */
    async hashPassword(password) {
        try {
            return await bcrypt.hash(password, this.bcryptRounds);
        } catch (error) {
            console.error('‚ùå MongoAuthService: –û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è:', error);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
     * @param {string} password - –ü–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @param {string} hash - –•–µ—à –ø–∞—Ä–æ–ª—è
     * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    async verifyPassword(password, hash) {
        try {
            return await bcrypt.compare(password, hash);
        } catch (error) {
            console.error('‚ùå MongoAuthService: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:', error);
            throw error;
        }
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} userData - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     */
    async register(userData) {
        try {
            console.log('üîê MongoAuthService: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData.email);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const existingUser = await MongooseUserModel.findByEmail(userData.email);
            if (existingUser) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }

            // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
            const passwordHash = await this.hashPassword(userData.password);

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const newUser = new MongooseUserModel({
                email: userData.email.toLowerCase(),
                username: userData.username,
                passwordHash: passwordHash
            });

            await newUser.save();

            console.log('‚úÖ MongoAuthService: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', userData.email);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø–∞—Ä–æ–ª—è
            const userResponse = newUser.toJSON();
            return {
                success: true,
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
                user: userResponse
            };

        } catch (error) {
            console.error('‚ùå MongoAuthService: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} credentials - –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    async login(credentials) {
        try {
            console.log('üîê MongoAuthService: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', credentials.email);
            
            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
            const user = await MongooseUserModel.findByEmail(credentials.email);
            if (!user) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            const isPasswordValid = await user.checkPassword(credentials.password);
            if (!isPasswordValid) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
            await user.updateLastLogin();

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
            const token = this.generateToken(user);

            console.log('‚úÖ MongoAuthService: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', credentials.email);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø–∞—Ä–æ–ª—è
            const userResponse = user.toJSON();
            return {
                success: true,
                message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
                user: userResponse,
                token: token
            };

        } catch (error) {
            console.error('‚ùå MongoAuthService: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
     * @param {Object} user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {string} JWT —Ç–æ–∫–µ–Ω
     */
    generateToken(user) {
        try {
            const payload = {
                id: user.id,
                email: user.email,
                username: user.username
            };

            return jwt.sign(payload, this.jwtSecret, { 
                expiresIn: this.jwtExpiresIn 
            });
        } catch (error) {
            console.error('‚ùå MongoAuthService: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
            throw error;
        }
    }

    /**
     * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
     * @param {string} token - JWT —Ç–æ–∫–µ–Ω
     * @returns {Object} –î–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
     */
    async verifyToken(token) {
        try {
            const decoded = jwt.verify(token, this.jwtSecret);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const user = await MongooseUserModel.findById(decoded.id);
            if (!user || !user.isActive) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
            }

            return decoded;
        } catch (error) {
            if (error.name === 'TokenExpiredError') {
                throw new Error('–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
            } else if (error.name === 'JsonWebTokenError') {
                throw new Error('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω');
            } else {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞');
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
     * @param {string} token - JWT —Ç–æ–∫–µ–Ω
     * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getUserByToken(token) {
        try {
            const decoded = await this.verifyToken(token);
            const user = await MongooseUserModel.findById(decoded.id);
            
            if (!user) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            return user.toJSON();
        } catch (error) {
            console.error('‚ùå MongoAuthService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É:', error);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     * @param {string} token - JWT —Ç–æ–∫–µ–Ω
     * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    async isAuthenticated(token) {
        try {
            await this.verifyToken(token);
            return true;
        } catch (error) {
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} token - JWT —Ç–æ–∫–µ–Ω
     * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getCurrentUser(token) {
        try {
            return await this.getUserByToken(token);
        } catch (error) {
            console.error('‚ùå MongoAuthService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
     * @param {string} email - Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    async forgotPassword(email) {
        try {
            console.log('üîê MongoAuthService: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è:', email);
            
            const user = await MongooseUserModel.findByEmail(email);
            if (!user) {
                // –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                return {
                    success: true,
                    message: '–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞ –Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è'
                };
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            const resetToken = this.generateResetToken(user.id);
            
            // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å email —Å —Ç–æ–∫–µ–Ω–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ email
            
            console.log('‚úÖ MongoAuthService: –¢–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è:', email);
            
            return {
                success: true,
                message: '–°—Å—ã–ª–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à email'
            };

        } catch (error) {
            console.error('‚ùå MongoAuthService: –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:', error);
            throw error;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object} –¢–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ
     */
    generateResetToken(userId) {
        const token = crypto.randomBytes(32).toString('hex');
        const expiresAt = new Date(Date.now() + 60 * 60 * 1000); // 1 —á–∞—Å

        return {
            token,
            userId,
            expiresAt: expiresAt.toISOString(),
            hash: crypto.createHash('sha256').update(token).digest('hex')
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
const mongoAuthService = new MongoAuthService();
module.exports = mongoAuthService;
