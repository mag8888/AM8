/**
 * Error Handler - –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –î–∞—Ç–∞: 11 –æ–∫—Ç—è–±—Ä—è 2024
 */

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
 * @param {Error} err - –û—à–∏–±–∫–∞
 * @param {Object} req - –ó–∞–ø—Ä–æ—Å
 * @param {Object} res - –û—Ç–≤–µ—Ç
 * @param {Function} next - –°–ª–µ–¥—É—é—â–∏–π middleware
 */
const errorHandler = (err, req, res, next) => {
    console.error('‚ùå Error Handler:', {
        message: err.message,
        stack: err.stack,
        url: req.url,
        method: req.method,
        ip: req.ip,
        userAgent: req.get('User-Agent'),
        timestamp: new Date().toISOString()
    });

    // –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    const errorCount = req.app.get('errorCount') || 0;
    req.app.set('errorCount', errorCount + 1);

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
    let status = 500;
    let message = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
    let errors = [];

    // –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if (err.name === 'ValidationError') {
        status = 400;
        message = '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö';
        errors = [err.message];
    }

    // –û—à–∏–±–∫–∏ JWT
    if (err.name === 'JsonWebTokenError') {
        status = 401;
        message = '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω';
    }

    if (err.name === 'TokenExpiredError') {
        status = 401;
        message = '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫';
    }

    // –û—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (err.name === 'UnauthorizedError') {
        status = 401;
        message = '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø';
    }

    if (err.name === 'ForbiddenError') {
        status = 403;
        message = '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω';
    }

    // –û—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if (err.name === 'MongoError' || err.name === 'MongooseError') {
        status = 500;
        message = '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö';
    }

    // –û—à–∏–±–∫–∏ —Å–µ—Ç–∏
    if (err.code === 'ECONNREFUSED' || err.code === 'ETIMEDOUT') {
        status = 503;
        message = '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    }

    // –û—à–∏–±–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    if (err.code === 'ENOENT') {
        status = 404;
        message = '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω';
    }

    // –û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
    if (err instanceof SyntaxError && err.status === 400 && 'body' in err) {
        status = 400;
        message = '–ù–µ–≤–µ—Ä–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç';
    }

    // –û—à–∏–±–∫–∏ –ª–∏–º–∏—Ç–æ–≤
    if (err.type === 'entity.too.large') {
        status = 413;
        message = '–†–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ª–∏–º–∏—Ç';
    }

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    const errorResponse = {
        success: false,
        message,
        timestamp: new Date().toISOString(),
        path: req.path,
        method: req.method
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (errors.length > 0) {
        errorResponse.errors = errors;
    }

    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏
    if (process.env.NODE_ENV === 'development') {
        errorResponse.stack = err.stack;
        errorResponse.details = err;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    res.status(status).json(errorResponse);
};

/**
 * Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 404 –æ—à–∏–±–æ–∫
 * @param {Object} req - –ó–∞–ø—Ä–æ—Å
 * @param {Object} res - –û—Ç–≤–µ—Ç
 * @param {Function} next - –°–ª–µ–¥—É—é—â–∏–π middleware
 */
const notFoundHandler = (req, res, next) => {
    const error = new Error(`–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${req.method} ${req.originalUrl}`);
    error.status = 404;
    next(error);
};

/**
 * Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
 */
const unhandledRejectionHandler = () => {
    process.on('unhandledRejection', (reason, promise) => {
        console.error('‚ùå Unhandled Rejection:', {
            reason: reason?.message || reason,
            stack: reason?.stack,
            promise,
            timestamp: new Date().toISOString()
        });
    });
};

/**
 * Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
 */
const uncaughtExceptionHandler = () => {
    process.on('uncaughtException', (error) => {
        console.error('‚ùå Uncaught Exception:', {
            message: error.message,
            stack: error.stack,
            timestamp: new Date().toISOString()
        });
        
        // Graceful shutdown
        process.exit(1);
    });
};

/**
 * Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
 * @param {Error} err - –û—à–∏–±–∫–∞
 * @param {Object} req - –ó–∞–ø—Ä–æ—Å
 * @param {Object} res - –û—Ç–≤–µ—Ç
 * @param {Function} next - –°–ª–µ–¥—É—é—â–∏–π middleware
 */
const errorLogger = (err, req, res, next) => {
    const logData = {
        timestamp: new Date().toISOString(),
        level: 'error',
        message: err.message,
        stack: err.stack,
        request: {
            method: req.method,
            url: req.url,
            headers: req.headers,
            body: req.body,
            query: req.query,
            params: req.params,
            ip: req.ip,
            userAgent: req.get('User-Agent')
        },
        user: req.user || null,
        status: err.status || 500
    };

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    console.error('üö® Error Log:', JSON.stringify(logData, null, 2));

    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å
    if (process.env.NODE_ENV === 'production') {
        // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å
    }

    next(err);
};

/**
 * Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ CORS
 * @param {Object} req - –ó–∞–ø—Ä–æ—Å
 * @param {Object} res - –û—Ç–≤–µ—Ç
 * @param {Function} next - –°–ª–µ–¥—É—é—â–∏–π middleware
 */
const corsErrorHandler = (err, req, res, next) => {
    if (err.message.includes('CORS')) {
        return res.status(403).json({
            success: false,
            message: 'CORS –æ—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
            origin: req.headers.origin
        });
    }
    next(err);
};

/**
 * Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ rate limiting
 * @param {Object} req - –ó–∞–ø—Ä–æ—Å
 * @param {Object} res - –û—Ç–≤–µ—Ç
 * @param {Function} next - –°–ª–µ–¥—É—é—â–∏–π middleware
 */
const rateLimitErrorHandler = (err, req, res, next) => {
    if (err.message && err.message.includes('Too many requests')) {
        return res.status(429).json({
            success: false,
            message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
            retryAfter: err.retryAfter
        });
    }
    next(err);
};

/**
 * Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @param {Object} req - –ó–∞–ø—Ä–æ—Å
 * @param {Object} res - –û—Ç–≤–µ—Ç
 * @param {Function} next - –°–ª–µ–¥—É—é—â–∏–π middleware
 */
const validationErrorHandler = (err, req, res, next) => {
    if (err.name === 'ValidationError') {
        const errors = Object.values(err.errors).map(error => error.message);
        return res.status(400).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
            errors
        });
    }
    next(err);
};

module.exports = {
    errorHandler,
    notFoundHandler,
    unhandledRejectionHandler,
    uncaughtExceptionHandler,
    errorLogger,
    corsErrorHandler,
    rateLimitErrorHandler,
    validationErrorHandler
};
