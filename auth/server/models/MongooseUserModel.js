/**
 * MongooseUserModel - –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è MongoDB Atlas
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –î–∞—Ç–∞: 12 –æ–∫—Ç—è–±—Ä—è 2024
 */

const mongoose = require('mongoose');
const bcrypt = require('bcrypt');

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userSchema = new mongoose.Schema({
    email: {
        type: String,
        required: true,
        unique: true,
        lowercase: true,
        trim: true,
        maxlength: 254,
        match: [/^[^\s@]+@[^\s@]+\.[^\s@]+$/, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email']
    },
    username: {
        type: String,
        required: true,
        unique: true,
        trim: true,
        minlength: 3,
        maxlength: 30,
        match: [/^[a-zA-Z0-9_-]+$/, '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è']
    },
    passwordHash: {
        type: String,
        required: true
    },
    isActive: {
        type: Boolean,
        default: true
    },
    emailVerified: {
        type: Boolean,
        default: false
    },
    lastLogin: {
        type: Date,
        default: null
    },
    stats: {
        gamesPlayed: {
            type: Number,
            default: 0
        },
        totalWins: {
            type: Number,
            default: 0
        },
        totalEarnings: {
            type: Number,
            default: 0
        },
        totalTimePlayed: {
            type: Number,
            default: 0
        }
    },
    preferences: {
        theme: {
            type: String,
            default: 'dark',
            enum: ['dark', 'light']
        },
        language: {
            type: String,
            default: 'ru',
            enum: ['ru', 'en']
        },
        notifications: {
            type: Boolean,
            default: true
        },
        soundEnabled: {
            type: Boolean,
            default: true
        }
    },
    profile: {
        avatar: {
            type: String,
            default: null
        },
        bio: {
            type: String,
            default: '',
            maxlength: 500
        },
        location: {
            type: String,
            default: '',
            maxlength: 100
        },
        website: {
            type: String,
            default: '',
            maxlength: 200
        }
    },
    resetPasswordToken: {
        type: String,
        default: null
    },
    resetPasswordExpires: {
        type: Date,
        default: null
    }
}, {
    timestamps: true,
    collection: 'users'
});

// –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
userSchema.index({ email: 1 });
userSchema.index({ username: 1 });
userSchema.index({ createdAt: -1 });
userSchema.index({ lastLogin: -1 });
userSchema.index({ 'stats.gamesPlayed': -1 });

// –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è ID
userSchema.virtual('id').get(function() {
    return this._id.toHexString();
});

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ JSON
userSchema.set('toJSON', {
    virtuals: true,
    transform: function(doc, ret) {
        delete ret._id;
        delete ret.__v;
        delete ret.passwordHash;
        delete ret.resetPasswordToken;
        delete ret.resetPasswordExpires;
        return ret;
    }
});

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –æ–±—ä–µ–∫—Ç
userSchema.set('toObject', {
    virtuals: true,
    transform: function(doc, ret) {
        delete ret._id;
        delete ret.__v;
        delete ret.passwordHash;
        delete ret.resetPasswordToken;
        delete ret.resetPasswordExpires;
        return ret;
    }
});

class MongooseUserModel {
    constructor() {
        this.User = mongoose.model('User', userSchema);
        this.isInitialized = false;
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
     */
    async init() {
        try {
            console.log('üë§ MongooseUserModel: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if (mongoose.connection.readyState !== 1) {
                throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
            }

            this.isInitialized = true;
            console.log('‚úÖ MongooseUserModel: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå MongooseUserModel: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.isInitialized = false;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} userData - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    async createUser(userData) {
        try {
            const user = new this.User({
                email: userData.email,
                username: userData.username,
                passwordHash: userData.passwordHash
            });

            const savedUser = await user.save();
            console.log('‚úÖ MongooseUserModel: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', savedUser.email);
            return savedUser;
        } catch (error) {
            console.error('‚ùå MongooseUserModel: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
     * @param {string} email - Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<Object|null>} –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    async findByEmail(email) {
        try {
            return await this.User.findOne({ email: email.toLowerCase() });
        } catch (error) {
            console.error('‚ùå MongooseUserModel: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ email:', error);
            return null;
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
     * @param {string} username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<Object|null>} –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    async findByUsername(username) {
        try {
            return await this.User.findOne({ username });
        } catch (error) {
            console.error('‚ùå MongooseUserModel: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ username:', error);
            return null;
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
     * @param {string} id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<Object|null>} –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    async findById(id) {
        try {
            return await this.User.findById(id);
        } catch (error) {
            console.error('‚ùå MongooseUserModel: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ ID:', error);
            return null;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @returns {Promise<Object|null>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    async updateUser(id, updateData) {
        try {
            const updatedUser = await this.User.findByIdAndUpdate(
                id,
                { $set: updateData },
                { new: true, runValidators: true }
            );

            if (updatedUser) {
                console.log('‚úÖ MongooseUserModel: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', id);
            }
            return updatedUser;
        } catch (error) {
            console.error('‚ùå MongooseUserModel: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
     */
    async deleteUser(id) {
        try {
            const result = await this.User.findByIdAndDelete(id);
            if (result) {
                console.log('‚úÖ MongooseUserModel: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω:', id);
                return true;
            }
            return false;
        } catch (error) {
            console.error('‚ùå MongooseUserModel: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email
     * @param {string} email - Email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @param {string} excludeId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
     * @returns {Promise<boolean>} –£–Ω–∏–∫–∞–ª–µ–Ω –ª–∏ email
     */
    async isEmailUnique(email, excludeId = null) {
        try {
            const query = { email: email.toLowerCase() };
            if (excludeId) {
                query._id = { $ne: excludeId };
            }
            const user = await this.User.findOne(query);
            return !user;
        } catch (error) {
            console.error('‚ùå MongooseUserModel: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email:', error);
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ username
     * @param {string} username - Username –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @param {string} excludeId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
     * @returns {Promise<boolean>} –£–Ω–∏–∫–∞–ª–µ–Ω –ª–∏ username
     */
    async isUsernameUnique(username, excludeId = null) {
        try {
            const query = { username };
            if (excludeId) {
                query._id = { $ne: excludeId };
            }
            const user = await this.User.findOne(query);
            return !user;
        } catch (error) {
            console.error('‚ùå MongooseUserModel: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ username:', error);
            return false;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
     * @param {string} id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<Object|null>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    async updateLastLogin(id) {
        try {
            return await this.updateUser(id, {
                lastLogin: new Date()
            });
        } catch (error) {
            console.error('‚ùå MongooseUserModel: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞:', error);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
     * @param {string} id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<Object|null>} –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getUserProfile(id) {
        try {
            return await this.User.findById(id).select('-passwordHash -resetPasswordToken -resetPasswordExpires');
        } catch (error) {
            console.error('‚ùå MongooseUserModel: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
            return null;
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     * @param {Object} query - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
     * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    async searchUsers(query) {
        try {
            const { username, email, limit = 10, offset = 0 } = query;
            const searchQuery = {};

            if (username) {
                searchQuery.username = { $regex: username, $options: 'i' };
            }

            if (email) {
                searchQuery.email = { $regex: email, $options: 'i' };
            }

            return await this.User.find(searchQuery)
                .select('-passwordHash -resetPasswordToken -resetPasswordExpires')
                .limit(limit)
                .skip(offset)
                .sort({ createdAt: -1 });
        } catch (error) {
            console.error('‚ùå MongooseUserModel: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
     * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    async getAllUsers(options = {}) {
        try {
            const { limit = 50, offset = 0, activeOnly = false } = options;
            const query = activeOnly ? { isActive: true } : {};

            return await this.User.find(query)
                .select('-passwordHash -resetPasswordToken -resetPasswordExpires')
                .limit(limit)
                .skip(offset)
                .sort({ createdAt: -1 });
        } catch (error) {
            console.error('‚ùå MongooseUserModel: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    async getStats() {
        try {
            const totalUsers = await this.User.countDocuments();
            const activeUsers = await this.User.countDocuments({ isActive: true });
            const verifiedUsers = await this.User.countDocuments({ emailVerified: true });
            
            const totalGamesResult = await this.User.aggregate([
                { $group: { _id: null, totalGames: { $sum: '$stats.gamesPlayed' } } }
            ]);
            const totalGames = totalGamesResult.length > 0 ? totalGamesResult[0].totalGames : 0;

            return {
                totalUsers,
                activeUsers,
                verifiedUsers,
                totalGames
            };
        } catch (error) {
            console.error('‚ùå MongooseUserModel: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return {
                totalUsers: 0,
                activeUsers: 0,
                verifiedUsers: 0,
                totalGames: 0
            };
        }
    }

    /**
     * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
     * @param {Array} usersData - –ú–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
     */
    async migrateFromJson(usersData) {
        try {
            console.log('üîÑ MongooseUserModel: –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...');
            
            let migrated = 0;
            let errors = 0;

            for (const [id, userData] of usersData) {
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    const existingUser = await this.findByEmail(userData.email);
                    if (existingUser) {
                        console.log(`‚ö†Ô∏è MongooseUserModel: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                        continue;
                    }

                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await this.createUser({
                        email: userData.email,
                        username: userData.username,
                        passwordHash: userData.passwordHash
                    });

                    migrated++;
                } catch (error) {
                    console.error(`‚ùå MongooseUserModel: –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userData.email}:`, error);
                    errors++;
                }
            }

            console.log(`‚úÖ MongooseUserModel: –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${migrated}, –û—à–∏–±–æ–∫: ${errors}`);
            
            return {
                success: true,
                migrated,
                errors,
                total: usersData.length
            };
        } catch (error) {
            console.error('‚ùå MongooseUserModel: –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }
}

module.exports = MongooseUserModel;