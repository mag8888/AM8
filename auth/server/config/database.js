/**
 * Database Configuration - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö MongoDB Atlas
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –î–∞—Ç–∞: 12 –æ–∫—Ç—è–±—Ä—è 2024
 */

const mongoose = require('mongoose');

class DatabaseConfig {
    constructor() {
        this.isConnected = false;
        this.eventHandlersSet = false;
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ MongoDB –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        if (process.env.USE_MONGODB !== 'false') {
            this.connectionString = this.buildConnectionString();
            this.options = this.getConnectionOptions();
        }
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB Atlas
     * @returns {string} –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    buildConnectionString() {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        console.log('üìä Database: MONGODB_URI:', process.env.MONGODB_URI ? 'SET' : 'NOT SET');
        if (process.env.MONGODB_URI) {
            console.log('üìä Database: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MONGODB_URI');
            console.log('üìä Database: URI length:', process.env.MONGODB_URI.length);
            console.log('üìä Database: URI starts with:', process.env.MONGODB_URI.substring(0, 20));
            
            // –£–±–∏—Ä–∞–µ–º MONGODB_URI= –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ
            let uri = process.env.MONGODB_URI;
            if (uri.startsWith('MONGODB_URI=')) {
                uri = uri.substring(12); // –£–±–∏—Ä–∞–µ–º 'MONGODB_URI='
                console.log('üìä Database: –£–±—Ä–∞–ª–∏ MONGODB_URI= –∏–∑ –Ω–∞—á–∞–ª–∞');
            }
            
            return uri;
        }

        const username = process.env.MONGODB_USERNAME || 'aura_money_user';
        const password = process.env.MONGODB_PASSWORD || 'password123';
        const cluster = process.env.MONGODB_CLUSTER || 'cluster0.xyz123.mongodb.net';
        const database = process.env.MONGODB_DATABASE || 'aura_money';
        const options = process.env.MONGODB_OPTIONS || 'retryWrites=true&w=majority';

        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –ø–∞—Ä–æ–ª–µ
        const encodedPassword = encodeURIComponent(password);
        const connectionString = `mongodb+srv://${username}:${encodedPassword}@${cluster}/${database}?${options}`;
        
        console.log('üìä Database: Connection string built');
        console.log('üìä Database: Username:', username);
        console.log('üìä Database: Cluster:', cluster);
        console.log('üìä Database: Database:', database);
        
        return connectionString;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     * @returns {Object} –û–ø—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    getConnectionOptions() {
        return {
            maxPoolSize: 5,
            serverSelectionTimeoutMS: 5000,
            socketTimeoutMS: 45000,
            connectTimeoutMS: 10000,
            retryWrites: true,
            retryReads: true,
            maxIdleTimeMS: 30000,
            heartbeatFrequencyMS: 10000
        };
    }

    /**
     * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     * @returns {Promise<void>}
     */
    async connect() {
        try {
            if (this.isConnected) {
                console.log('üìä Database: –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ª–∏ –º—ã —É–∂–µ
            if (mongoose.connection.readyState === 1) {
                console.log('üìä Database: Mongoose —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
                this.isConnected = true;
                return;
            }

            console.log('üìä Database: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas...');
            console.log(`üìä Database: Cluster: ${process.env.MONGODB_CLUSTER || 'cluster0.xyz123.mongodb.net'}`);

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if (mongoose.connection.readyState !== 0) {
                console.log('üìä Database: –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
                await mongoose.disconnect();
            }

            await mongoose.connect(this.connectionString, this.options);

            this.isConnected = true;
            console.log('‚úÖ Database: –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB Atlas');

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
            if (!this.eventHandlersSet) {
                mongoose.connection.on('error', (error) => {
                    console.error('‚ùå Database: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
                    this.isConnected = false;
                });

                mongoose.connection.on('disconnected', () => {
                    console.log('‚ö†Ô∏è Database: –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
                    this.isConnected = false;
                });

                mongoose.connection.on('reconnected', () => {
                    console.log('üîÑ Database: –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
                    this.isConnected = true;
                });
                
                this.eventHandlersSet = true;
            }

        } catch (error) {
            console.error('‚ùå Database: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB Atlas:', error);
            this.isConnected = false;
            throw error;
        }
    }

    /**
     * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     * @returns {Promise<void>}
     */
    async disconnect() {
        try {
            if (!this.isConnected) {
                console.log('üìä Database: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
                return;
            }

            await mongoose.disconnect();
            this.isConnected = false;
            console.log('üõë Database: –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB Atlas');

        } catch (error) {
            console.error('‚ùå Database: –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', error);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     * @returns {Object} –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    getStatus() {
        return {
            isConnected: this.isConnected,
            connectionState: mongoose.connection.readyState,
            connectionStateText: this.getConnectionStateText(mongoose.connection.readyState),
            database: mongoose.connection.db ? mongoose.connection.db.databaseName : null,
            host: mongoose.connection.host,
            port: mongoose.connection.port,
            collections: mongoose.connection.collections ? Object.keys(mongoose.connection.collections) : []
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     * @param {number} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    getConnectionStateText(state) {
        const states = {
            0: 'disconnected',
            1: 'connected',
            2: 'connecting',
            3: 'disconnecting'
        };
        return states[state] || 'unknown';
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     * @returns {Promise<Object>} –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
     */
    async healthCheck() {
        try {
            if (!this.isConnected) {
                return {
                    status: 'error',
                    message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'
                };
            }

            // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            await mongoose.connection.db.admin().ping();
            
            return {
                status: 'ok',
                message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç',
                timestamp: new Date().toISOString(),
                collections: Object.keys(mongoose.connection.collections)
            };

        } catch (error) {
            console.error('‚ùå Database: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è:', error);
            return {
                status: 'error',
                message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
                error: error.message
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ mongoose
     * @returns {Object} –≠–∫–∑–µ–º–ø–ª—è—Ä mongoose
     */
    getMongoose() {
        return mongoose;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ –∏–º–µ–Ω–∏
     * @param {string} modelName - –ò–º—è –º–æ–¥–µ–ª–∏
     * @returns {Object|null} –ú–æ–¥–µ–ª—å Mongoose
     */
    getModel(modelName) {
        try {
            return mongoose.model(modelName);
        } catch (error) {
            console.error(`‚ùå Database: –ú–æ–¥–µ–ª—å ${modelName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:`, error);
            return null;
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const databaseConfig = new DatabaseConfig();

module.exports = DatabaseConfig;
module.exports.default = databaseConfig;
