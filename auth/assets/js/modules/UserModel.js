/**
 * UserModel - –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –î–∞—Ç–∞: 11 –æ–∫—Ç—è–±—Ä—è 2024
 */

class UserModel {
    constructor() {
        this.users = new Map();
        this.currentUser = null;
        this.isInitialized = false;
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
     */
    async init() {
        try {
            console.log('üë§ UserModel: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ localStorage (–¥–ª—è –¥–µ–º–æ)
            await this.loadFromStorage();
            
            this.isInitialized = true;
            console.log('‚úÖ UserModel: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå UserModel: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.isInitialized = false;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} userData - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    async createUser(userData) {
        try {
            const user = {
                id: this.generateId(),
                email: userData.email,
                username: userData.username,
                passwordHash: userData.passwordHash,
                createdAt: new Date().toISOString(),
                lastLogin: null,
                isActive: true,
                emailVerified: false,
                stats: {
                    gamesPlayed: 0,
                    totalWins: 0,
                    totalEarnings: 0,
                    totalTimePlayed: 0
                },
                preferences: {
                    theme: 'dark',
                    language: 'ru',
                    notifications: true,
                    soundEnabled: true
                },
                profile: {
                    avatar: null,
                    bio: '',
                    location: '',
                    website: ''
                }
            };

            this.users.set(user.id, user);
            await this.saveToStorage();
            
            console.log('‚úÖ UserModel: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', user.email);
            return user;
        } catch (error) {
            console.error('‚ùå UserModel: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
     * @param {string} email - Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object|null} –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    async findByEmail(email) {
        for (const user of this.users.values()) {
            if (user.email === email) {
                return user;
            }
        }
        return null;
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
     * @param {string} username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object|null} –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    async findByUsername(username) {
        for (const user of this.users.values()) {
            if (user.username === username) {
                return user;
            }
        }
        return null;
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
     * @param {string} id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object|null} –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    async findById(id) {
        return this.users.get(id) || null;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @returns {Object|null} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    async updateUser(id, updateData) {
        try {
            const user = this.users.get(id);
            if (!user) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
            const allowedFields = [
                'username', 'email', 'lastLogin', 'emailVerified',
                'stats', 'preferences', 'profile', 'isActive'
            ];

            for (const [key, value] of Object.entries(updateData)) {
                if (allowedFields.includes(key)) {
                    if (typeof value === 'object' && value !== null) {
                        user[key] = { ...user[key], ...value };
                    } else {
                        user[key] = value;
                    }
                }
            }

            this.users.set(id, user);
            await this.saveToStorage();
            
            console.log('‚úÖ UserModel: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', id);
            return user;
        } catch (error) {
            console.error('‚ùå UserModel: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
     */
    async deleteUser(id) {
        try {
            const deleted = this.users.delete(id);
            if (deleted) {
                await this.saveToStorage();
                console.log('‚úÖ UserModel: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω:', id);
            }
            return deleted;
        } catch (error) {
            console.error('‚ùå UserModel: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email
     * @param {string} email - Email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @param {string} excludeId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
     * @returns {boolean} –£–Ω–∏–∫–∞–ª–µ–Ω –ª–∏ email
     */
    async isEmailUnique(email, excludeId = null) {
        for (const [id, user] of this.users.entries()) {
            if (excludeId && id === excludeId) continue;
            if (user.email === email) {
                return false;
            }
        }
        return true;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ username
     * @param {string} username - Username –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @param {string} excludeId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
     * @returns {boolean} –£–Ω–∏–∫–∞–ª–µ–Ω –ª–∏ username
     */
    async isUsernameUnique(username, excludeId = null) {
        for (const [id, user] of this.users.entries()) {
            if (excludeId && id === excludeId) continue;
            if (user.username === username) {
                return false;
            }
        }
        return true;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
     * @param {string} id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object|null} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    async updateLastLogin(id) {
        try {
            return await this.updateUser(id, {
                lastLogin: new Date().toISOString()
            });
        } catch (error) {
            console.error('‚ùå UserModel: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞:', error);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object|null} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getUserStats(id) {
        const user = await this.findById(id);
        return user ? user.stats : null;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} statsUpdate - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @returns {Object|null} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    async updateUserStats(id, statsUpdate) {
        try {
            const user = await this.findById(id);
            if (!user) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            const updatedStats = { ...user.stats, ...statsUpdate };
            return await this.updateUser(id, { stats: updatedStats });
        } catch (error) {
            console.error('‚ùå UserModel: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object|null} –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getUserPreferences(id) {
        const user = await this.findById(id);
        return user ? user.preferences : null;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} preferencesUpdate - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
     * @returns {Object|null} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    async updateUserPreferences(id, preferencesUpdate) {
        try {
            const user = await this.findById(id);
            if (!user) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            const updatedPreferences = { ...user.preferences, ...preferencesUpdate };
            return await this.updateUser(id, { preferences: updatedPreferences });
        } catch (error) {
            console.error('‚ùå UserModel: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object|null} –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getUserProfile(id) {
        const user = await this.findById(id);
        if (!user) return null;

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return {
            id: user.id,
            username: user.username,
            email: user.email,
            createdAt: user.createdAt,
            lastLogin: user.lastLogin,
            stats: user.stats,
            profile: user.profile,
            preferences: {
                theme: user.preferences.theme,
                language: user.preferences.language
            }
        };
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     * @param {Object} query - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    async searchUsers(query) {
        const { username, email, limit = 10, offset = 0 } = query;
        const results = [];

        for (const user of this.users.values()) {
            let matches = true;

            if (username && !user.username.toLowerCase().includes(username.toLowerCase())) {
                matches = false;
            }

            if (email && !user.email.toLowerCase().includes(email.toLowerCase())) {
                matches = false;
            }

            if (matches) {
                results.push(await this.getUserProfile(user.id));
            }

            if (results.length >= limit) break;
        }

        return results.slice(offset, offset + limit);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è)
     * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    async getAllUsers(options = {}) {
        const { limit = 50, offset = 0, activeOnly = false } = options;
        const results = [];

        for (const user of this.users.values()) {
            if (activeOnly && !user.isActive) continue;
            
            results.push(await this.getUserProfile(user.id));
        }

        return results.slice(offset, offset + limit);
    }

    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {boolean} isActive - –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     * @returns {Object|null} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    async setUserActive(id, isActive) {
        try {
            return await this.updateUser(id, { isActive });
        } catch (error) {
            console.error('‚ùå UserModel: –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return null;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
     * @returns {string} –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
     */
    generateId() {
        return `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
     */
    async saveToStorage() {
        try {
            const data = Array.from(this.users.entries());
            localStorage.setItem('aura_money_users', JSON.stringify(data));
        } catch (error) {
            console.error('‚ùå UserModel: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
     */
    async loadFromStorage() {
        try {
            const data = localStorage.getItem('aura_money_users');
            if (data) {
                const usersArray = JSON.parse(data);
                this.users = new Map(usersArray);
                console.log(`üìÅ UserModel: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.users.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ localStorage`);
            }
        } catch (error) {
            console.error('‚ùå UserModel: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', error);
            this.users = new Map();
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async clearAll() {
        this.users.clear();
        localStorage.removeItem('aura_money_users');
        console.log('üóëÔ∏è UserModel: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    getUserCount() {
        return this.users.size;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    getStats() {
        let activeCount = 0;
        let verifiedCount = 0;
        let totalGames = 0;

        for (const user of this.users.values()) {
            if (user.isActive) activeCount++;
            if (user.emailVerified) verifiedCount++;
            totalGames += user.stats.gamesPlayed || 0;
        }

        return {
            totalUsers: this.users.size,
            activeUsers: activeCount,
            verifiedUsers: verifiedCount,
            totalGames
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏
const userModel = new UserModel();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.UserModel = UserModel;
    window.userModel = userModel;
}
