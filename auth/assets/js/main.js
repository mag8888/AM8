/**
 * –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –î–∞—Ç–∞: 11 –æ–∫—Ç—è–±—Ä—è 2024
 */

// –ú–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã

class AuthManager {
    constructor() {
        this.currentForm = 'login';
        this.isLoading = false;
        this.forms = {
            login: document.getElementById('login-form'),
            register: document.getElementById('register-form'),
            forgot: document.getElementById('forgot-form')
        };
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    async init() {
        try {
            console.log('üöÄ AuthManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
            await Promise.all([
                window.window.authService.init(),
                window.userModel.init()
            ]);

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.setupEventListeners();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if (window.window.authService.isAuthenticated()) {
                this.handleAuthenticatedUser();
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if (typeof window.Router !== 'undefined') {
                this.initRouter();
            }

            console.log('‚úÖ AuthManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå AuthManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            window.window.notificationService.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã');
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–æ—Ä–º
        document.getElementById('show-register')?.addEventListener('click', (e) => {
            e.preventDefault();
            this.switchForm('register');
        });

        document.getElementById('show-login')?.addEventListener('click', (e) => {
            e.preventDefault();
            this.switchForm('login');
        });

        document.getElementById('forgot-password')?.addEventListener('click', (e) => {
            e.preventDefault();
            this.switchForm('forgot');
        });

        document.getElementById('back-to-login')?.addEventListener('click', (e) => {
            e.preventDefault();
            this.switchForm('login');
        });

        // –ö–Ω–æ–ø–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
        document.getElementById('fill-test-data-1')?.addEventListener('click', (e) => {
            e.preventDefault();
            this.fillTestData('roman');
        });

        document.getElementById('fill-test-data-2')?.addEventListener('click', (e) => {
            e.preventDefault();
            this.fillTestData('testuser');
        });

        document.getElementById('fill-test-data-3')?.addEventListener('click', (e) => {
            e.preventDefault();
            this.fillTestData('admin');
        });

        // –ö–Ω–æ–ø–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        document.getElementById('fill-test-data-register-1')?.addEventListener('click', (e) => {
            e.preventDefault();
            this.fillTestData('roman');
        });

        document.getElementById('fill-test-data-register-2')?.addEventListener('click', (e) => {
            e.preventDefault();
            this.fillTestData('testuser');
        });

        document.getElementById('fill-test-data-register-3')?.addEventListener('click', (e) => {
            e.preventDefault();
            this.fillTestData('admin');
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º
        this.setupFormHandlers();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª–µ–π
        this.setupFieldHandlers();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        this.setupKeyboardHandlers();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ä–º
     */
    setupFormHandlers() {
        // –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
        const loginForm = this.forms.login?.querySelector('form');
        if (loginForm) {
            loginForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleLogin(e);
            });
        }

        // –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        const registerForm = this.forms.register?.querySelector('form');
        if (registerForm) {
            registerForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleRegister(e);
            });
        }

        // –§–æ—Ä–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
        const forgotForm = this.forms.forgot?.querySelector('form');
        if (forgotForm) {
            forgotForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleForgotPassword(e);
            });
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª–µ–π
     */
    setupFieldHandlers() {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        this.setupRealTimeValidation();

        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è
        this.setupPasswordStrengthIndicator();

        // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
        this.setupAutofillHandlers();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
     */
    setupRealTimeValidation() {
        // Email –ø–æ–ª—è
        document.querySelectorAll('input[type="email"]').forEach(input => {
            input.addEventListener('blur', () => {
                this.validateField(input, 'email');
            });
        });

        // Username –ø–æ–ª—è
        document.querySelectorAll('input[name="username"]').forEach(input => {
            input.addEventListener('blur', () => {
                this.validateField(input, 'username');
            });
        });

        // –ü–∞—Ä–æ–ª–∏
        document.querySelectorAll('input[name="password"]').forEach(input => {
            input.addEventListener('blur', () => {
                this.validateField(input, 'password');
            });
        });

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        const confirmPassword = document.getElementById('register-confirm-password');
        if (confirmPassword) {
            confirmPassword.addEventListener('blur', () => {
                this.validateConfirmPassword();
            });
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è
     */
    setupPasswordStrengthIndicator() {
        const passwordInput = document.getElementById('register-password');
        const strengthBar = document.querySelector('.strength-fill');
        const strengthText = document.querySelector('.strength-text');

        if (passwordInput && strengthBar && strengthText) {
            passwordInput.addEventListener('input', (e) => {
                const strength = window.validationService.calculatePasswordStrength(e.target.value);
                
                strengthBar.className = `strength-fill ${strength.level}`;
                strengthText.textContent = this.getStrengthText(strength.level);
            });
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    setupAutofillHandlers() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
        setTimeout(() => {
            document.querySelectorAll('input').forEach(input => {
                if (input.value) {
                    input.classList.add('filled');
                }
            });
        }, 100);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    setupKeyboardHandlers() {
        document.addEventListener('keydown', (e) => {
            // Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if (e.key === 'Escape') {
                window.notificationService.hideAll();
            }

            // Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º
            if (e.key === 'Enter' && e.ctrlKey) {
                const activeForm = document.querySelector('.auth-form.active form');
                if (activeForm) {
                    activeForm.dispatchEvent(new Event('submit'));
                }
            }
        });
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞–º–∏
     * @param {string} formName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã
     */
    switchForm(formName) {
        if (this.isLoading) return;

        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º—ã
        Object.values(this.forms).forEach(form => {
            if (form) {
                form.classList.remove('active');
            }
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Ñ–æ—Ä–º—É
        if (this.forms[formName]) {
            this.forms[formName].classList.add('active');
            this.currentForm = formName;
            
            // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏
            this.clearAllErrors();
            
            // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–æ–ª–µ
            const firstInput = this.forms[formName].querySelector('input');
            if (firstInput) {
                setTimeout(() => firstInput.focus(), 100);
            }

            console.log(`üìù AuthManager: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º—É ${formName}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} userType - –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object} –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getTestUserData(userType) {
        const testUsers = {
            roman: {
                username: 'Roman',
                email: 'Roman@Roman.com',
                password: 'password123'
            },
            testuser: {
                username: 'TestUser',
                email: 'test@example.com',
                password: 'testpass123'
            },
            admin: {
                username: 'Admin',
                email: 'admin@example.com',
                password: 'admin123'
            }
        };
        
        return testUsers[userType] || testUsers.roman;
    }

    /**
     * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
     * @param {string} userType - –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: 'roman', 'testuser', 'admin'
     */
    fillTestData(userType = 'roman') {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = this.getTestUserData(userType);
        if (this.currentForm === 'login') {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
            const emailInput = document.getElementById('login-email');
            const passwordInput = document.getElementById('login-password');
            
            if (emailInput && passwordInput) {
                emailInput.value = userData.email;
                passwordInput.value = userData.password;
                
                // –£–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                emailInput.classList.remove('error');
                passwordInput.classList.remove('error');
                
                // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
                const emailError = document.getElementById('login-email-error');
                const passwordError = document.getElementById('login-password-error');
                
                if (emailError) emailError.textContent = '';
                if (passwordError) passwordError.textContent = '';
                
                // –§–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
                const loginButton = document.querySelector('#login-form .auth-button.primary');
                if (loginButton) {
                    loginButton.focus();
                }
                
                window.notificationService.success(`–ü–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userData.username}`);
                console.log(`üß™ AuthManager: –ó–∞–ø–æ–ª–Ω–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ (${userType})`);
            }
        } else if (this.currentForm === 'register') {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            const usernameInput = document.getElementById('register-username');
            const emailInput = document.getElementById('register-email');
            const passwordInput = document.getElementById('register-password');
            const confirmPasswordInput = document.getElementById('register-confirm-password');
            const agreeTermsCheckbox = document.getElementById('agree-terms');
            
            if (usernameInput && emailInput && passwordInput && confirmPasswordInput) {
                // –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                const timestamp = Date.now();
                const uniqueUsername = userType === 'admin' ? 'Admin' : 
                                     userType === 'testuser' ? 'TestUser' : 'Roman';
                
                usernameInput.value = `${uniqueUsername}_${timestamp}`;
                emailInput.value = userType === 'admin' ? `admin_${timestamp}@example.com` :
                                 userType === 'testuser' ? `testuser_${timestamp}@example.com` :
                                 `roman_${timestamp}@example.com`;
                passwordInput.value = userData.password;
                confirmPasswordInput.value = userData.password;
                
                if (agreeTermsCheckbox) {
                    agreeTermsCheckbox.checked = true;
                }
                
                // –£–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                [usernameInput, emailInput, passwordInput, confirmPasswordInput].forEach(input => {
                    input.classList.remove('error');
                });
                
                // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
                const errorElements = [
                    'register-username-error',
                    'register-email-error', 
                    'register-password-error',
                    'register-confirm-password-error'
                ];
                
                errorElements.forEach(id => {
                    const errorElement = document.getElementById(id);
                    if (errorElement) errorElement.textContent = '';
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è
                if (window.validationService) {
                    window.validationService.checkPasswordStrength(passwordInput.value);
                }
                
                window.notificationService.success(`–ü–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${uniqueUsername}`);
                console.log(`üß™ AuthManager: –ó–∞–ø–æ–ª–Ω–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (${userType})`);
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
     * @param {Event} e - –°–æ–±—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã
     */
    async handleLogin(e) {
        if (this.isLoading) return;

        const formData = new FormData(e.target);
        const data = {
            email: formData.get('email'),
            password: formData.get('password'),
            remember: formData.get('remember') === 'on'
        };

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        const validation = window.validationService.validateLoginForm(data);
        if (!validation.valid) {
            this.showFieldErrors(validation.fieldErrors);
            return;
        }

        await this.performLogin(data);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     * @param {Event} e - –°–æ–±—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã
     */
    async handleRegister(e) {
        if (this.isLoading) return;

        const formData = new FormData(e.target);
        const data = {
            username: formData.get('username'),
            email: formData.get('email'),
            password: formData.get('password'),
            confirmPassword: formData.get('confirmPassword'),
            agreeTerms: formData.get('agreeTerms') === 'on'
        };

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        const validation = window.validationService.validateRegistrationForm(data);
        if (!validation.valid) {
            this.showFieldErrors(validation.fieldErrors);
            return;
        }

        await this.performRegister(data);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
     * @param {Event} e - –°–æ–±—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã
     */
    async handleForgotPassword(e) {
        if (this.isLoading) return;

        const formData = new FormData(e.target);
        const data = {
            email: formData.get('email')
        };

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        const validation = window.validationService.validateForgotPasswordForm(data);
        if (!validation.valid) {
            this.showFieldErrors(validation.fieldErrors);
            return;
        }

        await this.performForgotPassword(data);
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥–∞
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
     */
    async performLogin(data) {
        this.setLoading(true);

        try {
            const result = await window.authService.loginUser(data.email, data.password, data.remember);
            
            if (result.success) {
                window.notificationService.success('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
                this.handleAuthenticatedUser();
            } else {
                window.notificationService.error(result.message);
                this.showFieldErrors(result.errors);
            }
        } catch (error) {
            console.error('‚ùå AuthManager: –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            window.notificationService.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ');
        } finally {
            this.setLoading(false);
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     */
    async performRegister(data) {
        this.setLoading(true);

        try {
            const result = await window.authService.registerUser(data);
            
            if (result.success) {
                window.notificationService.success('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
                this.handleAuthenticatedUser();
            } else {
                window.notificationService.error(result.message);
                this.showFieldErrors(result.errors);
            }
        } catch (error) {
            console.error('‚ùå AuthManager: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            window.notificationService.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        } finally {
            this.setLoading(false);
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async performForgotPassword(data) {
        this.setLoading(true);

        try {
            const result = await window.authService.forgotPassword(data.email);
            
            if (result.success) {
                window.notificationService.success('–°—Å—ã–ª–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à email');
                this.switchForm('login');
            } else {
                window.notificationService.error(result.message);
                this.showFieldErrors(result.errors);
            }
        } catch (error) {
            console.error('‚ùå AuthManager: –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:', error);
            window.notificationService.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è');
        } finally {
            this.setLoading(false);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    handleAuthenticatedUser() {
        const user = window.authService.getCurrentUser();
        if (user) {
            console.log('üë§ AuthManager: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.username);
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–æ—É—Ç–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if (typeof window.Router !== 'undefined' && window.router) {
                setTimeout(() => {
                    window.router.navigate('/rooms');
                }, 1500);
            } else {
                // Fallback: –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–º–Ω–∞—Ç
                setTimeout(() => {
                    window.location.href = '../pages/rooms.html';
                }, 1500);
            }
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
     * @param {HTMLElement} input - –ü–æ–ª–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     * @param {string} type - –¢–∏–ø –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    validateField(input, type) {
        const value = input.value.trim();
        let validation;

        switch (type) {
            case 'email':
                validation = window.validationService.validateEmail(value);
                break;
            case 'username':
                validation = window.validationService.validateUsername(value);
                break;
            case 'password':
                validation = window.validationService.validatePassword(value);
                break;
            default:
                return;
        }

        this.showFieldError(input, validation);
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
     */
    validateConfirmPassword() {
        const password = document.getElementById('register-password')?.value;
        const confirmPassword = document.getElementById('register-confirm-password')?.value;
        
        if (password && confirmPassword) {
            const validation = window.validationService.validateConfirmPassword(password, confirmPassword);
            const confirmInput = document.getElementById('register-confirm-password');
            if (confirmInput) {
                this.showFieldError(confirmInput, validation);
            }
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –ø–æ–ª—è
     * @param {HTMLElement} input - –ü–æ–ª–µ
     * @param {Object} validation - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    showFieldError(input, validation) {
        const fieldName = input.name;
        const errorElement = document.getElementById(`${this.currentForm}-${fieldName}-error`);
        
        if (errorElement) {
            if (validation.valid) {
                errorElement.classList.remove('show');
                input.classList.remove('error');
            } else {
                errorElement.textContent = validation.errors[0];
                errorElement.classList.add('show');
                input.classList.add('error');
            }
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª–µ–π
     * @param {Object} errors - –û—à–∏–±–∫–∏ –ø–æ –ø–æ–ª—è–º
     */
    showFieldErrors(errors) {
        for (const [field, fieldErrors] of Object.entries(errors)) {
            const input = document.querySelector(`input[name="${field}"]`);
            const errorElement = document.getElementById(`${this.currentForm}-${field}-error`);
            
            if (input && errorElement && fieldErrors.length > 0) {
                errorElement.textContent = fieldErrors[0];
                errorElement.classList.add('show');
                input.classList.add('error');
            }
        }
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏
     */
    clearAllErrors() {
        document.querySelectorAll('.error-message').forEach(error => {
            error.classList.remove('show');
        });
        
        document.querySelectorAll('input.error').forEach(input => {
            input.classList.remove('error');
        });
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
     * @param {boolean} loading - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    setLoading(loading) {
        this.isLoading = loading;
        
        const activeForm = document.querySelector('.auth-form.active');
        if (activeForm) {
            const button = activeForm.querySelector('.auth-button');
            const inputs = activeForm.querySelectorAll('input');
            
            if (button) {
                button.disabled = loading;
                const text = button.querySelector('.button-text');
                const loader = button.querySelector('.button-loader');
                
                if (loading) {
                    text.style.display = 'none';
                    loader.style.display = 'inline-block';
                } else {
                    text.style.display = 'inline-block';
                    loader.style.display = 'none';
                }
            }
            
            inputs.forEach(input => {
                input.disabled = loading;
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è
     * @param {string} level - –£—Ä–æ–≤–µ–Ω—å —Å–∏–ª—ã
     * @returns {string} –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è
     */
    getStrengthText(level) {
        const texts = {
            weak: '–°–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å',
            fair: '–ü—Ä–∏–µ–º–ª–µ–º—ã–π –ø–∞—Ä–æ–ª—å',
            good: '–•–æ—Ä–æ—à–∏–π –ø–∞—Ä–æ–ª—å',
            strong: '–û—Ç–ª–∏—á–Ω—ã–π –ø–∞—Ä–æ–ª—å'
        };
        return texts[level] || '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å';
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
     */
    initRouter() {
        try {
            console.log('üó∫Ô∏è AuthManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞');
            
            // –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (!window.router) {
                window.router = new Router();
            }
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
            window.router.route('/auth', () => {
                console.log('üó∫Ô∏è AuthManager: –ê–∫—Ç–∏–≤–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            }, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
            
            window.router.route('/auth/', () => {
                console.log('üó∫Ô∏è AuthManager: –ê–∫—Ç–∏–≤–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Å–ª–µ—à)');
            }, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
            
            window.router.route('/rooms', () => {
                console.log('üó∫Ô∏è AuthManager: –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–º–Ω–∞—Ç–∞–º');
                window.location.href = '../pages/rooms.html';
            }, '–ö–æ–º–Ω–∞—Ç—ã');
            
            console.log('‚úÖ AuthManager: –†–æ—É—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå AuthManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–∞:', error);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Aura Money');
    new AuthManager();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof window !== 'undefined') {
    window.AuthManager = AuthManager;
}
