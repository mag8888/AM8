/**
 * Test MongoDB Connection - –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB Atlas
 * –í–µ—Ä—Å–∏—è: 1.0.0
 */

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
// –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –Ω–µ —Ö–∞—Ä–¥–∫–æ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã!
process.env.MONGODB_USERNAME = process.env.MONGODB_USERNAME || 'test_user';
process.env.MONGODB_PASSWORD = process.env.MONGODB_PASSWORD || 'test_password';
process.env.MONGODB_CLUSTER = process.env.MONGODB_CLUSTER || 'test-cluster.mongodb.net';
process.env.MONGODB_DATABASE = process.env.MONGODB_DATABASE || 'test_database';
process.env.MONGODB_OPTIONS = process.env.MONGODB_OPTIONS || 'retryWrites=true&w=majority';
process.env.USE_MONGODB = 'true';

const databaseConfig = require('./server/config/database');
const MongooseUserModel = require('./server/models/MongooseUserModel');

async function testConnection() {
    try {
        console.log('üß™ Test: –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB Atlas');
        console.log('=====================================');
        console.log(`üìä Database: ${process.env.MONGODB_DATABASE}`);
        console.log(`üåê Cluster: ${process.env.MONGODB_CLUSTER}`);
        console.log(`üë§ Username: ${process.env.MONGODB_USERNAME}`);
        console.log('=====================================\n');

        // 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        console.log('1Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas...');
        await databaseConfig.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!\n');

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ë–î
        console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        const health = await databaseConfig.healthCheck();
        console.log('üìä –°—Ç–∞—Ç—É—Å:', health);
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç!\n');

        // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
        console.log('3Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        const userModel = new MongooseUserModel();
        await userModel.init();
        console.log('‚úÖ –ú–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!\n');

        // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        console.log('4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        const stats = await userModel.getStats();
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n');

        // 5. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('5Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        const bcrypt = require('bcrypt');
        const passwordHash = await bcrypt.hash('test123', 12);
        
        try {
            const testUser = await userModel.createUser({
                email: 'test@railway.app',
                username: 'RailwayTestUser',
                passwordHash
            });
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', testUser.email);
        } catch (error) {
            if (error.code === 11000) {
                console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å test@railway.app —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            } else {
                throw error;
            }
        }
        console.log();

        // 6. –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('6Ô∏è‚É£ –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        const foundUser = await userModel.findByEmail('test@railway.app');
        if (foundUser) {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', {
                id: foundUser.id,
                email: foundUser.email,
                username: foundUser.username
            });
        } else {
            console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        console.log();

        // 7. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('7Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        const users = await userModel.getAllUsers({ limit: 5 });
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
        users.forEach((user, index) => {
            console.log(`   ${index + 1}. ${user.username} (${user.email})`);
        });
        console.log();

        // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log('=====================================');
        console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
        console.log('=====================================');
        const finalStats = await userModel.getStats();
        console.log('üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        console.log(`   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${finalStats.totalUsers}`);
        console.log(`   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${finalStats.activeUsers}`);
        console.log(`   ‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: ${finalStats.verifiedUsers}`);
        console.log(`   ‚Ä¢ –í—Å–µ–≥–æ –∏–≥—Ä: ${finalStats.totalGames}`);
        console.log('=====================================\n');

        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å MongoDB Atlas!');
        console.log('‚úÖ –ú–æ–∂–Ω–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—Ç—å –Ω–∞ Railway!');

    } catch (error) {
        console.error('\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:', error.message);
        console.error('üìã –î–µ—Ç–∞–ª–∏:', error);
    } finally {
        // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        console.log('\nüõë –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB Atlas...');
        await databaseConfig.disconnect();
        console.log('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–æ');
        process.exit(0);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testConnection();
