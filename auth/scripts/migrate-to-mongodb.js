/**
 * Migration Script - –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –≤ MongoDB Atlas
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –î–∞—Ç–∞: 12 –æ–∫—Ç—è–±—Ä—è 2024
 */

const fs = require('fs').promises;
const path = require('path');

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –º–æ–¥–µ–ª–∏
const databaseConfig = require('../server/config/database');
const MongooseUserModel = require('../server/models/MongooseUserModel');

class MigrationScript {
    constructor() {
        this.dataFile = path.join(__dirname, '../data/users.json');
        this.userModel = null;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
     */
    async init() {
        try {
            console.log('üöÄ Migration: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏...');
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
            await databaseConfig.connect();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
            this.userModel = new MongooseUserModel();
            await this.userModel.init();
            
            console.log('‚úÖ Migration: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå Migration: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
     */
    async loadJsonData() {
        try {
            console.log('üìÅ Migration: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞...');
            
            const data = await fs.readFile(this.dataFile, 'utf8');
            const usersData = JSON.parse(data);
            
            console.log(`‚úÖ Migration: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${usersData.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON`);
            return usersData;
        } catch (error) {
            console.error('‚ùå Migration: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON:', error);
            throw error;
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
     */
    async migrate() {
        try {
            console.log('üîÑ Migration: –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
            const usersData = await this.loadJsonData();
            
            // –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            const result = await this.userModel.migrateFromJson(usersData);
            
            console.log('‚úÖ Migration: –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', result);
            return result;
        } catch (error) {
            console.error('‚ùå Migration: –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏
     */
    async verifyMigration() {
        try {
            console.log('üîç Migration: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏...');
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const stats = await this.userModel.getStats();
            console.log('üìä Migration: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:', stats);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const users = await this.userModel.getAllUsers({ limit: 10 });
            console.log(`üë• Migration: –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ MongoDB`);
            
            return {
                stats,
                usersCount: users.length,
                users: users.map(user => ({
                    id: user.id,
                    email: user.email,
                    username: user.username,
                    createdAt: user.createdAt
                }))
            };
        } catch (error) {
            console.error('‚ùå Migration: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
     */
    async run() {
        try {
            console.log('üéØ Migration: –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏...');
            console.log('=====================================');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await this.init();
            
            // –ú–∏–≥—Ä–∞—Ü–∏—è
            const migrationResult = await this.migrate();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞
            const verificationResult = await this.verifyMigration();
            
            console.log('=====================================');
            console.log('üéâ Migration: –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
            console.log(`   - –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${migrationResult.migrated}`);
            console.log(`   - –û—à–∏–±–æ–∫: ${migrationResult.errors}`);
            console.log(`   - –í—Å–µ–≥–æ –≤ MongoDB: ${verificationResult.stats.totalUsers}`);
            console.log(`   - –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${verificationResult.stats.activeUsers}`);
            
            return {
                success: true,
                migration: migrationResult,
                verification: verificationResult
            };
            
        } catch (error) {
            console.error('‚ùå Migration: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            return {
                success: false,
                error: error.message
            };
        } finally {
            // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await databaseConfig.disconnect();
            console.log('üõë Migration: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞, –µ—Å–ª–∏ –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const migration = new MigrationScript();
    
    migration.run()
        .then((result) => {
            if (result.success) {
                console.log('‚úÖ Migration: –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                process.exit(0);
            } else {
                console.error('‚ùå Migration: –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π');
                process.exit(1);
            }
        })
        .catch((error) => {
            console.error('‚ùå Migration: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = MigrationScript;
