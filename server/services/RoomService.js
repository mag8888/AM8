const crypto = require('crypto');
const databaseConfig = require('../config/database');
const RoomModel = require('../models/RoomModel');

/**
 * RoomService - –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç,
 * —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏ –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö
 */
class RoomService {
    constructor() {
        console.log('üè† RoomService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        
        // In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        this.rooms = new Map();
        
        // –ú–æ–¥–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        this.roomModel = new RoomModel();
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = {
            minPlayers: 2,
            maxPlayers: 8,
            minTurnTime: 10,
            maxTurnTime: 120,
            defaultTurnTime: 30,
            defaultMaxPlayers: 4,
            roomCleanupInterval: 8 * 60 * 60 * 1000, // 8 —á–∞—Å–æ–≤
            defaultTurnTimeMs: 30 * 1000
        };
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.init();
        
        console.log('‚úÖ RoomService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
     */
    async init() {
        try {
            // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–Ω–∞—Ç –∏–∑ MongoDB –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            await this.loadRoomsFromMongoDB();
            
            // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç
            this.startCleanupTimer();
            
            console.log('‚úÖ RoomService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
     * @param {Object} roomData - –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
     * @param {Object} creator - –°–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Object} –°–æ–∑–¥–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞
     */
    async createRoom(roomData, creator) {
        try {
            console.log('üè† RoomService: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', roomData.name);
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            this.validateRoomData(roomData);
            this.validateCreator(creator);
            
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
            const roomId = this.generateRoomId();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏
            if (this.getRoomByName(roomData.name)) {
                throw new Error('Room name already exists');
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–º–Ω–∞—Ç—ã
            const room = {
                id: roomId,
                name: roomData.name,
                creatorId: creator.id,
                creatorName: creator.name || creator.username || 'Unknown',
                creatorAvatar: creator.avatar || '',
                maxPlayers: roomData.maxPlayers || this.config.defaultMaxPlayers,
                minPlayers: this.config.minPlayers,
                turnTime: roomData.turnTime || this.config.defaultTurnTime,
                assignProfessions: roomData.assignProfessions || false,
                players: [],
                gameState: null,
                isStarted: false,
                isFinished: false,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏–≥—Ä–æ–∫–∞-—Å–æ–∑–¥–∞—Ç–µ–ª—è
            const hostPlayer = {
                userId: creator.id,
                name: creator.name || creator.username || 'Host',
                username: creator.username || '',
                avatar: creator.avatar || '',
                isHost: true,
                isReady: false,
                position: 0,
                profession: null,
                joinedAt: new Date()
            };
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            room.players.push(hostPlayer);
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
            this.rooms.set(roomId, room);
            await this.saveRoomToDatabases(room);
            
            console.log(`‚úÖ RoomService: –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${roomId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${creator.name}`);
            
            return this.sanitizeRoom(room);
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            throw new Error(`Failed to create room: ${error.message}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –∫–æ–º–Ω–∞—Ç
     */
    getAllRooms() {
        try {
            console.log('üè† RoomService: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç');
            
            // –ï—Å–ª–∏ Map –ø—É—Å—Ç–∞—è, –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ MongoDB
            if (this.rooms.size === 0) {
                this.loadRoomsFromMongoDB().catch(error => {
                    console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç –∏–∑ MongoDB:', error);
                });
            }
            
            const rooms = Array.from(this.rooms.values())
                .map(room => this.sanitizeRoom(room))
                .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
            
            console.log(`‚úÖ RoomService: –ü–æ–ª—É—á–µ–Ω–æ ${rooms.length} –∫–æ–º–Ω–∞—Ç`);
            return rooms;
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:', error);
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ ID
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Object|null} –ö–æ–º–Ω–∞—Ç–∞ –∏–ª–∏ null
     */
    getRoomById(roomId) {
        try {
            console.log('üè† RoomService: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ ID:', roomId);
            
            let room = this.rooms.get(roomId);
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏, –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ MongoDB
            if (!room) {
                this.loadRoomFromMongoDB(roomId).then(loadedRoom => {
                    if (loadedRoom) {
                        this.rooms.set(roomId, loadedRoom);
                    }
                }).catch(error => {
                    console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ MongoDB:', error);
                });
            }
            
            if (room) {
                console.log(`‚úÖ RoomService: –ö–æ–º–Ω–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞: ${roomId}`);
                return this.sanitizeRoom(room);
            } else {
                console.log(`‚ùå RoomService: –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${roomId}`);
                return null;
            }
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ –∏–º–µ–Ω–∏
     * @param {string} roomName - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Object|null} –ö–æ–º–Ω–∞—Ç–∞ –∏–ª–∏ null
     */
    getRoomByName(roomName) {
        try {
            console.log('üè† RoomService: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ –∏–º–µ–Ω–∏:', roomName);
            
            // –ü–æ–∏—Å–∫ –≤ in-memory Map
            for (const room of this.rooms.values()) {
                if (room.name === roomName) {
                    console.log(`‚úÖ RoomService: –ö–æ–º–Ω–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –∏–º–µ–Ω–∏: ${roomName}`);
                    return this.sanitizeRoom(room);
                }
            }
            
            console.log(`‚ùå RoomService: –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –∏–º–µ–Ω–∏: ${roomName}`);
            return null;
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç—ã –ø–æ –∏–º–µ–Ω–∏:', error);
            return null;
        }
    }

    /**
     * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∫ –∫–æ–º–Ω–∞—Ç–µ
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {Object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @returns {Object} –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞
     */
    async joinRoom(roomId, player) {
        try {
            console.log('üè† RoomService: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∫ –∫–æ–º–Ω–∞—Ç–µ:', roomId);
            
            const room = this.rooms.get(roomId);
            if (!room) {
                throw new Error('Room not found');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–º–Ω–∞—Ç—ã
            if (room.players.length >= room.maxPlayers) {
                throw new Error('Room is full');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞
            if (room.isStarted) {
                throw new Error('Game already started');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ
            const existingPlayer = room.players.find(p => p.userId === player.userId);
            if (existingPlayer) {
                throw new Error('Player already in room');
            }
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
            this.validatePlayer(player);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏–≥—Ä–æ–∫–∞
            const newPlayer = {
                userId: player.userId,
                name: player.name || player.username || 'Player',
                username: player.username || '',
                avatar: player.avatar || '',
                isHost: false,
                isReady: false,
                position: 0,
                profession: null,
                joinedAt: new Date()
            };
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
            room.players.push(newPlayer);
            room.updatedAt = new Date();
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
            await this.saveRoomToDatabases(room);
            
            console.log(`‚úÖ RoomService: –ò–≥—Ä–æ–∫ ${player.name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
            
            return this.sanitizeRoom(room);
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Å—Ç–æ–º)
     * @returns {Object} –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º gameState
     */
    async startGame(roomId, userId) {
        try {
            console.log('üè† RoomService: –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ:', roomId);
            
            const room = this.rooms.get(roomId);
            if (!room) {
                throw new Error('Room not found');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ö–æ—Å—Ç
            const hostPlayer = room.players.find(p => p.isHost);
            if (!hostPlayer || hostPlayer.userId !== userId) {
                throw new Error('Only host can start the game');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
            if (room.players.length < room.minPlayers) {
                throw new Error(`Need at least ${room.minPlayers} players to start`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–∞
            if (room.isStarted) {
                throw new Error('Game already started');
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è gameState
            const gameState = {
                activePlayerIndex: 0,
                hasRolledThisTurn: false,
                currentPhase: 'waiting',
                turnStartTime: Date.now(),
                gameStartTime: Date.now(),
                diceResult: null,
                lastMove: null,
                turnTimer: room.turnTime * 1000
            };
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
            room.gameState = gameState;
            room.isStarted = true;
            room.updatedAt = new Date();
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
            await this.saveRoomToDatabases(room);
            
            console.log(`‚úÖ RoomService: –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
            
            return this.sanitizeRoom(room);
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', error);
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @param {Object} updates - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @returns {Object} –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞
     */
    async updateRoom(roomId, updates) {
        try {
            console.log('üè† RoomService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', roomId);
            
            const room = this.rooms.get(roomId);
            if (!room) {
                throw new Error('Room not found');
            }
            
            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            Object.assign(room, updates);
            room.updatedAt = new Date();
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
            await this.saveRoomToDatabases(room);
            
            console.log(`‚úÖ RoomService: –ö–æ–º–Ω–∞—Ç–∞ ${roomId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
            
            return this.sanitizeRoom(room);
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            throw error;
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @returns {boolean} true - —É—Å–ø–µ—à–Ω–æ, false - –æ—à–∏–±–∫–∞
     */
    async deleteRoom(roomId) {
        try {
            console.log('üè† RoomService: –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', roomId);
            
            const room = this.rooms.get(roomId);
            if (!room) {
                console.log(`‚ùå RoomService: –ö–æ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);
                return false;
            }
            
            // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ in-memory Map
            this.rooms.delete(roomId);
            
            // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
            await this.deleteRoomFromDatabases(roomId);
            
            console.log(`‚úÖ RoomService: –ö–æ–º–Ω–∞—Ç–∞ ${roomId} —É–¥–∞–ª–µ–Ω–∞`);
            
            return true;
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
            return false;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
     * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
     */
    async cleanupOldRooms() {
        try {
            console.log('üè† RoomService: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç');
            
            const cutoffTime = new Date(Date.now() - this.config.roomCleanupInterval);
            let deletedCount = 0;
            
            for (const [roomId, room] of this.rooms.entries()) {
                // –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—ã —Å—Ç–∞—Ä—à–µ cutoff –≤—Ä–µ–º–µ–Ω–∏ –∏ –Ω–µ –Ω–∞—á–∞—Ç—ã–µ
                if (room.createdAt < cutoffTime && !room.isStarted) {
                    await this.deleteRoom(roomId);
                    deletedCount++;
                }
            }
            
            console.log(`‚úÖ RoomService: –û—á–∏—â–µ–Ω–æ ${deletedCount} —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç`);
            
            return deletedCount;
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç:', error);
            return 0;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É
     * @param {Object} room - –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Object} –û—á–∏—â–µ–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
     */
    sanitizeRoom(room) {
        try {
            // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–æ–º–Ω–∞—Ç—ã
            const sanitized = { ...room };
            
            // –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö –ø–æ–ª–µ–π
            delete sanitized._id;
            delete sanitized.__v;
            
            // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            sanitized.playerCount = room.players.length;
            sanitized.readyCount = room.players.filter(p => p.isReady).length;
            sanitized.canStart = room.players.length >= room.minPlayers && !room.isStarted;
            sanitized.isFull = room.players.length >= room.maxPlayers;
            
            return sanitized;
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –∫–æ–º–Ω–∞—Ç—ã:', error);
            return room;
        }
    }

    // ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∫–æ–º–Ω–∞—Ç—ã
     * @returns {string} UUID
     */
    generateRoomId() {
        return crypto.randomUUID();
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
     * @param {Object} roomData - –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
     */
    validateRoomData(roomData) {
        if (!roomData.name || typeof roomData.name !== 'string' || roomData.name.trim().length === 0) {
            throw new Error('Room name is required');
        }
        
        if (roomData.maxPlayers && (roomData.maxPlayers < this.config.minPlayers || roomData.maxPlayers > this.config.maxPlayers)) {
            throw new Error(`Max players must be between ${this.config.minPlayers} and ${this.config.maxPlayers}`);
        }
        
        if (roomData.turnTime && (roomData.turnTime < this.config.minTurnTime || roomData.turnTime > this.config.maxTurnTime)) {
            throw new Error(`Turn time must be between ${this.config.minTurnTime} and ${this.config.maxTurnTime} seconds`);
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–º–Ω–∞—Ç—ã
     * @param {Object} creator - –°–æ–∑–¥–∞—Ç–µ–ª—å
     */
    validateCreator(creator) {
        if (!creator.id || typeof creator.id !== 'string') {
            throw new Error('Creator ID is required');
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
     * @param {Object} player - –ò–≥—Ä–æ–∫
     */
    validatePlayer(player) {
        if (!player.userId || typeof player.userId !== 'string') {
            throw new Error('Player user ID is required');
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
     */
    startCleanupTimer() {
        // –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
        setInterval(() => {
            this.cleanupOldRooms();
        }, 2 * 60 * 60 * 1000);
    }

    // ==================== –†–ê–ë–û–¢–ê –° –ë–ê–ó–ê–ú–ò –î–ê–ù–ù–´–• ====================

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     * @param {Object} room - –ö–æ–º–Ω–∞—Ç–∞
     */
    async saveRoomToDatabases(room) {
        try {
            console.log('üíæ RoomService: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', room.id);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
            if (databaseConfig.getStatus().isConnected) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –≤ –±–∞–∑–µ
                const existingRoom = await this.roomModel.findById(room.id);
                
                if (existingRoom) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–Ω–∞—Ç—É
                    await this.roomModel.updateRoom(room.id, room);
                    console.log('‚úÖ RoomService: –ö–æ–º–Ω–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ MongoDB:', room.id);
                } else {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
                    await this.roomModel.createRoom(room);
                    console.log('‚úÖ RoomService: –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ MongoDB:', room.id);
                }
            } else {
                console.log('‚ö†Ô∏è RoomService: MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
            }
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç –∏–∑ MongoDB
     */
    async loadRoomsFromMongoDB() {
        try {
            console.log('üíæ RoomService: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–Ω–∞—Ç –∏–∑ MongoDB');
            
            if (!databaseConfig.getStatus().isConnected) {
                console.log('‚ö†Ô∏è RoomService: MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
                return;
            }
            
            const rooms = await this.roomModel.findAll();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã –≤ –ø–∞–º—è—Ç—å
            for (const room of rooms) {
                this.rooms.set(room._id, room);
            }
            
            console.log(`‚úÖ RoomService: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${rooms.length} –∫–æ–º–Ω–∞—Ç –∏–∑ MongoDB`);
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ MongoDB:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ MongoDB –ø–æ ID
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     * @returns {Object|null} –ö–æ–º–Ω–∞—Ç–∞ –∏–ª–∏ null
     */
    async loadRoomFromMongoDB(roomId) {
        try {
            console.log('üíæ RoomService: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ MongoDB:', roomId);
            
            if (!databaseConfig.getStatus().isConnected) {
                console.log('‚ö†Ô∏è RoomService: MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
                return null;
            }
            
            const room = await this.roomModel.findById(roomId);
            
            if (room) {
                // –ö–µ—à–∏—Ä—É–µ–º –≤ –ø–∞–º—è—Ç–∏
                this.rooms.set(roomId, room);
                console.log('‚úÖ RoomService: –ö–æ–º–Ω–∞—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ MongoDB:', roomId);
                return room;
            }
            
            return null;
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ MongoDB:', error);
            return null;
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
     * @param {string} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
     */
    async deleteRoomFromDatabases(roomId) {
        try {
            console.log('üíæ RoomService: –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö:', roomId);
            
            if (databaseConfig.getStatus().isConnected) {
                await this.roomModel.deleteRoom(roomId);
                console.log('‚úÖ RoomService: –ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ MongoDB:', roomId);
            } else {
                console.log('‚ö†Ô∏è RoomService: MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ');
            }
            
        } catch (error) {
            console.error('‚ùå RoomService: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
const roomService = new RoomService();
module.exports = roomService;
