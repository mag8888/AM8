const mongoose = require('mongoose');

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
 */

class DatabaseConfig {
    constructor() {
        console.log('üíæ DatabaseConfig: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        
        this.mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/aura-money';
        this.isConnected = false;
        
        console.log('‚úÖ DatabaseConfig: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    /**
     * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
     */
    async connectMongoDB() {
        try {
            if (this.isConnected) {
                console.log('üíæ DatabaseConfig: MongoDB —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
                return;
            }

            console.log('üíæ DatabaseConfig: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
            console.log('üíæ DatabaseConfig: URI:', this.mongoUri.replace(/\/\/.*@/, '//***:***@')); // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –≤ –ª–æ–≥–∞—Ö
            
            await mongoose.connect(this.mongoUri, {
                useNewUrlParser: true,
                useUnifiedTopology: true,
                maxPoolSize: 10,
                serverSelectionTimeoutMS: 10000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
                socketTimeoutMS: 45000,
                connectTimeoutMS: 10000,
                bufferCommands: false, // –û—Ç–∫–ª—é—á–∞–µ–º –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥
                bufferMaxEntries: 0
            });

            this.isConnected = true;
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            mongoose.connection.on('connected', () => {
                console.log('‚úÖ DatabaseConfig: MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
            });

            mongoose.connection.on('error', (error) => {
                console.error('‚ùå DatabaseConfig: –û—à–∏–±–∫–∞ MongoDB:', error);
                this.isConnected = false;
            });

            mongoose.connection.on('disconnected', () => {
                console.log('‚ö†Ô∏è DatabaseConfig: MongoDB –æ—Ç–∫–ª—é—á–µ–Ω–∞');
                this.isConnected = false;
            });

            // Graceful shutdown
            process.on('SIGINT', async () => {
                await this.disconnect();
                process.exit(0);
            });

            console.log('‚úÖ DatabaseConfig: MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            
        } catch (error) {
            console.error('‚ùå DatabaseConfig: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
            this.isConnected = false;
            throw error;
        }
    }

    /**
     * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB
     */
    async disconnect() {
        try {
            if (!this.isConnected) {
                console.log('üíæ DatabaseConfig: MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
                return;
            }

            console.log('üíæ DatabaseConfig: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB...');
            
            await mongoose.connection.close();
            this.isConnected = false;
            
            console.log('‚úÖ DatabaseConfig: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            
        } catch (error) {
            console.error('‚ùå DatabaseConfig: –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç MongoDB:', error);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    getStatus() {
        return {
            isConnected: this.isConnected,
            mongoUri: this.mongoUri,
            readyState: mongoose.connection.readyState
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
     */
    getConnection() {
        return mongoose.connection;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
const databaseConfig = new DatabaseConfig();
module.exports = databaseConfig;
