/**
 * API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –î–∞—Ç–∞: 12 –æ–∫—Ç—è–±—Ä—è 2024
 */

const express = require('express');
const router = express.Router();

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º PushService
const PushService = require('../services/PushService');

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä PushService
let pushService;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PushService –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
const initPushService = () => {
    if (!pushService) {
        pushService = new PushService();
        console.log('üì° Push API: PushService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    return pushService;
};

/**
 * POST /api/push/register
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
router.post('/register', async (req, res) => {
    try {
        const pushService = initPushService();
        
        const { clientId, userInfo } = req.body;
        
        if (!clientId) {
            return res.status(400).json({
                success: false,
                error: 'clientId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            });
        }

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        pushService.registerClient(clientId, userInfo);

        console.log(`üì± Push API: –ö–ª–∏–µ–Ω—Ç ${clientId} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);

        res.json({
            success: true,
            message: '–ö–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
            clientId: clientId,
            stats: pushService.getStats()
        });
    } catch (error) {
        console.error('‚ùå Push API: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞'
        });
    }
});

/**
 * POST /api/push/unregister
 * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
router.post('/unregister', async (req, res) => {
    try {
        const pushService = initPushService();
        
        const { clientId } = req.body;
        
        if (!clientId) {
            return res.status(400).json({
                success: false,
                error: 'clientId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            });
        }

        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        pushService.unregisterClient(clientId);

        console.log(`üì± Push API: –ö–ª–∏–µ–Ω—Ç ${clientId} –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);

        res.json({
            success: true,
            message: '–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
            clientId: clientId,
            stats: pushService.getStats()
        });
    } catch (error) {
        console.error('‚ùå Push API: –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞'
        });
    }
});

/**
 * GET /api/push/poll
 * Polling endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
router.get('/poll', async (req, res) => {
    try {
        const pushService = initPushService();
        
        const { clientId } = req.query;
        
        if (!clientId) {
            return res.status(400).json({
                success: false,
                error: 'clientId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º ping –∫–ª–∏–µ–Ω—Ç–∞
        const clientInfo = pushService.connectedClients.get(clientId);
        if (clientInfo) {
            clientInfo.lastPing = Date.now();
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã long polling)
        res.json({
            success: true,
            message: 'Polling —É—Å–ø–µ—à–µ–Ω',
            timestamp: new Date().toISOString(),
            stats: pushService.getStats()
        });
    } catch (error) {
        console.error('‚ùå Push API: –û—à–∏–±–∫–∞ polling:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ polling'
        });
    }
});

/**
 * POST /api/push/broadcast
 * –û—Ç–ø—Ä–∞–≤–∫–∞ broadcast push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
router.post('/broadcast', async (req, res) => {
    try {
        const pushService = initPushService();
        
        const { type, data, excludeClientId } = req.body;
        
        if (!type || !data) {
            return res.status(400).json({
                success: false,
                error: 'type –∏ data –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º broadcast push
        const pushResult = await pushService.broadcastPush(type, data, excludeClientId);

        console.log(`üì° Push API: Broadcast push –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (${type})`);

        res.json({
            success: true,
            message: 'Broadcast push –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
            pushId: pushResult.id,
            type: pushResult.type,
            timestamp: pushResult.timestamp,
            stats: pushService.getStats()
        });
    } catch (error) {
        console.error('‚ùå Push API: –û—à–∏–±–∫–∞ broadcast push:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ broadcast push'
        });
    }
});

/**
 * GET /api/push/stats
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ push-—Å–µ—Ä–≤–∏—Å–∞
 */
router.get('/stats', async (req, res) => {
    try {
        const pushService = initPushService();
        
        const stats = pushService.getStats();
        const activeClients = pushService.getActiveClients();

        res.json({
            success: true,
            stats: stats,
            activeClients: activeClients
        });
    } catch (error) {
        console.error('‚ùå Push API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
        });
    }
});

module.exports = router;
