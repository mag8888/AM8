const express = require('express');
const router = express.Router();
const roomService = require('../services/RoomService');

/**
 * –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏
 */

/**
 * GET /api/rooms
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
 */
router.get('/', async (req, res, next) => {
    try {
        console.log('üì° API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç');
        
        const rooms = roomService.getAllRooms();
        
        res.status(200).json({
            success: true,
            data: rooms,
            count: rooms.length,
            message: `–ù–∞–π–¥–µ–Ω–æ ${rooms.length} –∫–æ–º–Ω–∞—Ç`
        });
        
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:', error);
        next(error);
    }
});

/**
 * GET /api/rooms/stats
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–Ω–∞—Ç
 */
router.get('/stats', async (req, res, next) => {
    try {
        console.log('üì° API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–Ω–∞—Ç');
        
        const rooms = roomService.getAllRooms();
        
        const stats = {
            totalRooms: rooms.length,
            activeRooms: rooms.filter(r => !r.isFinished).length,
            startedGames: rooms.filter(r => r.isStarted && !r.isFinished).length,
            totalPlayers: rooms.reduce((sum, r) => sum + r.playerCount, 0),
            averagePlayersPerRoom: rooms.length > 0 ? 
                Math.round(rooms.reduce((sum, r) => sum + r.playerCount, 0) / rooms.length * 100) / 100 : 0,
            fullRooms: rooms.filter(r => r.isFull).length,
            readyToStart: rooms.filter(r => r.canStart && !r.isStarted).length
        };
        
        res.status(200).json({
            success: true,
            data: stats,
            message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞'
        });
        
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        next(error);
    }
});

/**
 * GET /api/rooms/:roomId
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ ID
 */
router.get('/:roomId', async (req, res, next) => {
    try {
        const { roomId } = req.params;
        console.log('üì° API: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ ID:', roomId);
        
        const room = roomService.getRoomById(roomId);
        
        if (!room) {
            return res.status(404).json({
                success: false,
                message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                roomId
            });
        }
        
        res.status(200).json({
            success: true,
            data: room,
            message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞'
        });
        
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
        next(error);
    }
});

/**
 * GET /api/rooms/name/:roomName
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ –∏–º–µ–Ω–∏
 */
router.get('/name/:roomName', async (req, res, next) => {
    try {
        const { roomName } = req.params;
        console.log('üì° API: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ –∏–º–µ–Ω–∏:', roomName);
        
        const room = roomService.getRoomByName(roomName);
        
        if (!room) {
            return res.status(404).json({
                success: false,
                message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                roomName
            });
        }
        
        res.status(200).json({
            success: true,
            data: room,
            message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞'
        });
        
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç—ã –ø–æ –∏–º–µ–Ω–∏:', error);
        next(error);
    }
});

/**
 * POST /api/rooms
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
 */
router.post('/', async (req, res, next) => {
    try {
        const { roomData, creator } = req.body;
        console.log('üì° API: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', roomData?.name);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!roomData || !creator) {
            return res.status(400).json({
                success: false,
                message: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è'
            });
        }
        
        if (!creator.id) {
            return res.status(400).json({
                success: false,
                message: 'ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            });
        }
        
        if (!roomData.name || roomData.name.trim().length === 0) {
            return res.status(400).json({
                success: false,
                message: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
            });
        }
        
        const room = await roomService.createRoom(roomData, creator);
        
        res.status(201).json({
            success: true,
            data: room,
            message: '–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
        });
        
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
        
        if (error.message.includes('already exists')) {
            return res.status(409).json({
                success: false,
                message: '–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            });
        }
        
        next(error);
    }
});

/**
 * POST /api/rooms/:roomId/join
 * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∫ –∫–æ–º–Ω–∞—Ç–µ
 */
router.post('/:roomId/join', async (req, res, next) => {
    try {
        const { roomId } = req.params;
        const { player } = req.body;
        console.log('üì° API: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∫ –∫–æ–º–Ω–∞—Ç–µ:', roomId);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!player || !player.userId) {
            return res.status(400).json({
                success: false,
                message: '–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏ user ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }
        
        const room = await roomService.joinRoom(roomId, player);
        
        res.status(200).json({
            success: true,
            data: room,
            message: '–ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ'
        });
        
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
        
        if (error.message === 'Room not found') {
            return res.status(404).json({
                success: false,
                message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }
        
        if (error.message === 'Room is full') {
            return res.status(409).json({
                success: false,
                message: '–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞'
            });
        }
        
        if (error.message === 'Game already started') {
            return res.status(409).json({
                success: false,
                message: '–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å'
            });
        }
        
        if (error.message === 'Player already in room') {
            return res.status(409).json({
                success: false,
                message: '–ò–≥—Ä–æ–∫ —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ'
            });
        }
        
        next(error);
    }
});

/**
 * POST /api/rooms/:roomId/start
 * –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ
 */
router.post('/:roomId/start', async (req, res, next) => {
    try {
        const { roomId } = req.params;
        const { userId } = req.body;
        console.log('üì° API: –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ:', roomId);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!userId) {
            return res.status(400).json({
                success: false,
                message: 'User ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            });
        }
        
        const room = await roomService.startGame(roomId, userId);
        
        res.status(200).json({
            success: true,
            data: room,
            message: '–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞'
        });
        
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', error);
        
        if (error.message === 'Room not found') {
            return res.status(404).json({
                success: false,
                message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }
        
        if (error.message === 'Only host can start the game') {
            return res.status(403).json({
                success: false,
                message: '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É'
            });
        }
        
        if (error.message.includes('Need at least')) {
            return res.status(409).json({
                success: false,
                message: error.message
            });
        }
        
        if (error.message === 'Game already started') {
            return res.status(409).json({
                success: false,
                message: '–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å'
            });
        }
        
        next(error);
    }
});

/**
 * PUT /api/rooms/:roomId
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
 */
router.put('/:roomId', async (req, res, next) => {
    try {
        const { roomId } = req.params;
        const { updates } = req.body;
        console.log('üì° API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', roomId);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!updates || typeof updates !== 'object') {
            return res.status(400).json({
                success: false,
                message: '–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }
        
        const room = await roomService.updateRoom(roomId, updates);
        
        res.status(200).json({
            success: true,
            data: room,
            message: '–ö–æ–º–Ω–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
        });
        
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
        
        if (error.message === 'Room not found') {
            return res.status(404).json({
                success: false,
                message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }
        
        next(error);
    }
});

/**
 * DELETE /api/rooms/:roomId
 * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
 */
router.delete('/:roomId', async (req, res, next) => {
    try {
        const { roomId } = req.params;
        console.log('üì° API: –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:', roomId);
        
        const success = await roomService.deleteRoom(roomId);
        
        if (!success) {
            return res.status(404).json({
                success: false,
                message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }
        
        res.status(200).json({
            success: true,
            message: '–ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞'
        });
        
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
        next(error);
    }
});

/**
 * POST /api/rooms/cleanup
 * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
 */
router.post('/cleanup', async (req, res, next) => {
    try {
        console.log('üì° API: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç');
        
        const deletedCount = await roomService.cleanupOldRooms();
        
        res.status(200).json({
            success: true,
            data: { deletedCount },
            message: `–£–¥–∞–ª–µ–Ω–æ ${deletedCount} —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç`
        });
        
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–º–Ω–∞—Ç:', error);
        next(error);
    }
});

/**
 * PUT /api/rooms/:roomId/player
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
 */
router.put('/:roomId/player', async (req, res, next) => {
    try {
        const { roomId } = req.params;
        const playerData = req.body;
        console.log('üì° API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ:', roomId);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!playerData || !playerData.userId) {
            return res.status(400).json({
                success: false,
                message: '–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏ user ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }
        
        const room = await roomService.updatePlayerInRoom(roomId, playerData);
        
        res.status(200).json({
            success: true,
            data: room,
            message: '–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
        });
        
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', error);
        
        if (error.message === 'Room not found') {
            return res.status(404).json({
                success: false,
                message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }
        
        if (error.message === 'Player not found') {
            return res.status(404).json({
                success: false,
                message: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ'
            });
        }
        
        next(error);
    }
});

/**
 * POST /api/rooms/:roomId/notifications
 * –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç—É
 */
router.post('/:roomId/notifications', async (req, res, next) => {
    try {
        const { roomId } = req.params;
        const notification = req.body;
        
        console.log('üì° API: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç—É:', roomId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
        const room = roomService.getRoomById(roomId);
        if (!room) {
            return res.status(404).json({
                success: false,
                message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (!notification.type || !notification.data) {
            return res.status(400).json({
                success: false,
                message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
            });
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã WebSocket)
        console.log('üì± API: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', notification.type);
        
        res.status(200).json({
            success: true,
            message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            data: notification
        });
        
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        next(error);
    }
});

/**
 * POST /api/rooms/:roomId/roll
 * –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
 */
router.post('/:roomId/roll', async (req, res, next) => {
    try {
        const { roomId } = req.params;
        const { diceChoice = 'single', isReroll = false } = req.body;
        
        console.log(`üé≤ API: –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
        const room = roomService.getRoomById(roomId);
        if (!room) {
            return res.status(404).json({
                success: false,
                message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
        const diceResult = {
            value: Math.floor(Math.random() * 6) + 1,
            diceChoice,
            isReroll,
            timestamp: new Date().toISOString()
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        const gameState = {
            canRoll: false,
            canMove: true,
            canEndTurn: false,
            lastDiceResult: diceResult,
            activePlayer: room.players[room.currentPlayerIndex]
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
        room.gameState = gameState;
        room.lastDiceRoll = diceResult;
        
        console.log(`üé≤ API: –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞: ${diceResult.value}`);
        
        res.status(200).json({
            success: true,
            data: {
                diceResult,
                state: gameState
            },
            message: `–í—ã–ø–∞–ª–æ: ${diceResult.value}`
        });
        
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞:', error);
        next(error);
    }
});

/**
 * POST /api/rooms/:roomId/move
 * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
 */
router.post('/:roomId/move', async (req, res, next) => {
    try {
        const { roomId } = req.params;
        const { steps } = req.body;
        
        console.log(`üö∂ API: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ ${steps} —à–∞–≥–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
        const room = roomService.getRoomById(roomId);
        if (!room) {
            return res.status(404).json({
                success: false,
                message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        const activePlayer = room.players[room.currentPlayerIndex];
        if (!activePlayer) {
            return res.status(400).json({
                success: false,
                message: '–ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
        const newPosition = (activePlayer.position + steps) % 68; // 44 + 24 = 68 –æ–±—â–∏—Ö –∫–ª–µ—Ç–æ–∫
        activePlayer.position = newPosition;
        
        // –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        const moveResult = {
            playerId: activePlayer.id,
            oldPosition: activePlayer.position - steps,
            newPosition,
            steps,
            timestamp: new Date().toISOString()
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        const gameState = {
            canRoll: false,
            canMove: false,
            canEndTurn: true,
            activePlayer,
            lastDiceResult: room.lastDiceRoll
        };
        
        room.gameState = gameState;
        
        console.log(`üö∂ API: –ò–≥—Ä–æ–∫ ${activePlayer.username} –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${newPosition}`);
        
        res.status(200).json({
            success: true,
            data: {
                moveResult,
                state: gameState
            },
            message: `–ò–≥—Ä–æ–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ ${steps} —à–∞–≥–æ–≤`
        });
        
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:', error);
        next(error);
    }
});

/**
 * POST /api/rooms/:roomId/end-turn
 * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞
 */
router.post('/:roomId/end-turn', async (req, res, next) => {
    try {
        const { roomId } = req.params;
        
        console.log(`üèÅ API: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
        const room = roomService.getRoomById(roomId);
        if (!room) {
            return res.status(404).json({
                success: false,
                message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
        room.currentPlayerIndex = (room.currentPlayerIndex + 1) % room.players.length;
        const nextPlayer = room.players[room.currentPlayerIndex];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        const gameState = {
            canRoll: true,
            canMove: false,
            canEndTurn: false,
            activePlayer: nextPlayer,
            lastDiceResult: null
        };
        
        room.gameState = gameState;
        room.lastDiceRoll = null;
        
        console.log(`üèÅ API: –•–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω –∏–≥—Ä–æ–∫—É ${nextPlayer.username}`);
        
        res.status(200).json({
            success: true,
            data: {
                activePlayerIndex: room.currentPlayerIndex,
                nextPlayer,
                state: gameState
            },
            message: `–•–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω –∏–≥—Ä–æ–∫—É ${nextPlayer.username}`
        });
        
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞:', error);
        next(error);
    }
});

/**
 * GET /api/rooms/:roomId/game-state
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
 */
router.get('/:roomId/game-state', async (req, res, next) => {
    try {
        const { roomId } = req.params;
        
        console.log(`üìä API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
        const room = roomService.getRoomById(roomId);
        if (!room) {
            return res.status(404).json({
                success: false,
                message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }
        
        res.status(200).json({
            success: true,
            data: {
                players: room.players,
                currentPlayerIndex: room.currentPlayerIndex,
                gameState: room.gameState || {
                    canRoll: true,
                    canMove: false,
                    canEndTurn: false,
                    activePlayer: room.players[room.currentPlayerIndex],
                    lastDiceResult: null
                },
                isStarted: room.isStarted,
                createdAt: room.createdAt
            },
            message: '–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø–æ–ª—É—á–µ–Ω–æ'
        });
        
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', error);
        next(error);
    }
});

/**
 * GET /api/rooms/:roomId/players
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
 */
router.get('/:roomId/players', async (req, res, next) => {
    try {
        const { roomId } = req.params;
        
        console.log(`üë• API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
        const room = roomService.getRoomById(roomId);
        if (!room) {
            return res.status(404).json({
                success: false,
                message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }
        
        res.status(200).json({
            success: true,
            data: room.players,
            message: `–ù–∞–π–¥–µ–Ω–æ ${room.players.length} –∏–≥—Ä–æ–∫–æ–≤`
        });
        
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤:', error);
        next(error);
    }
});

module.exports = router;
