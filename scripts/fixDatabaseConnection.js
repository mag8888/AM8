#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

class DatabaseFixer {
    constructor() {
        this.atlasConfig = {
            username: 'xqrmedia_db_user',
            password: 'pOs1rKxSv9Y3e7rl',
            cluster: 'cluster0.wvumcaj.mongodb.net',
            database: 'energy_money_game',
            options: 'retryWrites=true&w=majority&appName=Cluster0'
        };
    }

    generateAtlasUri() {
        const { username, password, cluster, database, options } = this.atlasConfig;
        return `mongodb+srv://${username}:${password}@${cluster}/${database}?${options}`;
    }

    checkCurrentConfig() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        console.log('=' .repeat(60));
        
        const currentVars = [
            'MONGODB_URI',
            'MONGO_URL', 
            'RAILWAY_MONGODB_URI',
            'RAILWAY_MONGODB_DATABASE'
        ];
        
        console.log('\nüìã –¢–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
        for (const varName of currentVars) {
            const value = process.env[varName];
            if (value) {
                const masked = this.maskValue(value);
                console.log(`  ‚úÖ ${varName}: ${masked}`);
            } else {
                console.log(`  ‚ùå ${varName}: NOT SET`);
            }
        }
    }

    maskValue(value) {
        if (!value) return 'NOT SET';
        
        if (value.includes('mongodb://') || value.includes('mongodb+srv://')) {
            return value.replace(/(mongodb[+]?srv?:\/\/)([^:]+):([^@]+)@/, '$1***:***@');
        }
        
        return value.substring(0, 20) + '...';
    }

    generateFixCommands() {
        console.log('\nüîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è MongoDB Atlas:');
        console.log('=' .repeat(50));
        
        const atlasUri = this.generateAtlasUri();
        
        console.log('\nüìù Railway CLI –∫–æ–º–∞–Ω–¥—ã:');
        console.log(`railway variables set MONGODB_URI="${atlasUri}"`);
        console.log(`railway variables set MONGODB_DATABASE="energy_money_game"`);
        console.log(`railway variables delete RAILWAY_MONGODB_URI`);
        console.log(`railway variables delete RAILWAY_MONGODB_DATABASE`);
        
        console.log('\nüìù –ò–ª–∏ —á–µ—Ä–µ–∑ Railway Dashboard:');
        console.log('1. –ó–∞–π–¥–∏—Ç–µ –≤ Railway Dashboard');
        console.log('2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç AM8');
        console.log('3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "Variables"');
        console.log('4. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
        console.log(`   MONGODB_URI = ${atlasUri}`);
        console.log(`   MONGODB_DATABASE = energy_money_game`);
        console.log('5. –£–¥–∞–ª–∏—Ç–µ Railway MongoDB –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)');
        console.log('6. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å');
    }

    testConnection() {
        console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB Atlas...');
        
        const { MongoClient } = require('mongodb');
        const uri = this.generateAtlasUri();
        
        return new Promise((resolve, reject) => {
            const client = new MongoClient(uri);
            
            client.connect()
                .then(() => {
                    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas —É—Å–ø–µ—à–Ω–æ!');
                    return client.db('energy_money_game').admin().ping();
                })
                .then(() => {
                    console.log('‚úÖ Ping –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–µ–Ω!');
                    resolve(true);
                })
                .catch(error => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB Atlas:', error.message);
                    reject(error);
                })
                .finally(() => {
                    client.close();
                });
        });
    }

    async run() {
        console.log('üöÄ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        console.log('üìÖ –í—Ä–µ–º—è:', new Date().toISOString());
        
        this.checkCurrentConfig();
        
        try {
            await this.testConnection();
            console.log('\n‚úÖ MongoDB Atlas –¥–æ—Å—Ç—É–ø–µ–Ω!');
            this.generateFixCommands();
        } catch (error) {
            console.log('\n‚ùå MongoDB Atlas –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!');
            console.log('\nüîß –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
            console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
            console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MongoDB Atlas');
            console.log('3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Railway MongoDB (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)');
        }
    }
}

if (require.main === module) {
    const fixer = new DatabaseFixer();
    fixer.run()
        .then(() => {
            console.log('\nüéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
            process.exit(1);
        });
}

module.exports = DatabaseFixer;
