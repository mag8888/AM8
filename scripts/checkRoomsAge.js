#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∫–æ–º–Ω–∞—Ç –≤ MongoDB
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∫–æ–º–Ω–∞—Ç
 */

const { MongoClient } = require('mongodb');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MongoDB
const CONFIG = {
    MONGODB_USERNAME: process.env.MONGODB_USERNAME || 'xqrmedia_db_user',
    MONGODB_PASSWORD: process.env.MONGODB_PASSWORD || 'pOs1rKxSv9Y3e7rl',
    MONGODB_CLUSTER: process.env.MONGODB_CLUSTER || 'cluster0.wvumcaj.mongodb.net',
    MONGODB_DATABASE: process.env.MONGODB_DATABASE || process.env.MONGODB_DB || 'aura_money',
    MONGODB_OPTIONS: process.env.MONGODB_OPTIONS || 'retryWrites=true&w=majority&appName=Cluster0'
};

async function checkRoomsAge() {
    let client = null;
    
    try {
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        const uri = `mongodb+srv://${CONFIG.MONGODB_USERNAME}:${CONFIG.MONGODB_PASSWORD}@${CONFIG.MONGODB_CLUSTER}/${CONFIG.MONGODB_DATABASE}?${CONFIG.MONGODB_OPTIONS}`;
        
        console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas...');
        client = new MongoClient(uri);
        await client.connect();
        
        const db = client.db(CONFIG.MONGODB_DATABASE);
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã
        const rooms = await db.collection('rooms').find({}).toArray();
        console.log(`üìä –í—Å–µ–≥–æ –∫–æ–º–Ω–∞—Ç: ${rooms.length}`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫–æ–º–Ω–∞—Ç
        const now = new Date();
        const ageStats = {
            lessThan1Hour: 0,
            lessThan5Hours: 0,
            lessThan24Hours: 0,
            moreThan24Hours: 0,
            noCreatedAt: 0
        };
        
        const roomAges = [];
        
        rooms.forEach(room => {
            if (!room.created_at) {
                ageStats.noCreatedAt++;
                return;
            }
            
            const createdAt = new Date(room.created_at);
            const ageMs = now - createdAt;
            const ageHours = ageMs / (60 * 60 * 1000);
            
            roomAges.push({
                id: room.id,
                name: room.name,
                ageHours: Math.round(ageHours * 100) / 100,
                status: room.status || 'waiting',
                createdAt: room.created_at
            });
            
            if (ageHours < 1) {
                ageStats.lessThan1Hour++;
            } else if (ageHours < 5) {
                ageStats.lessThan5Hours++;
            } else if (ageHours < 24) {
                ageStats.lessThan24Hours++;
            } else {
                ageStats.moreThan24Hours++;
            }
        });
        
        // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∫–æ–º–Ω–∞—Ç:');
        console.log(`  –ú–µ–Ω–µ–µ 1 —á–∞—Å–∞: ${ageStats.lessThan1Hour}`);
        console.log(`  –ú–µ–Ω–µ–µ 5 —á–∞—Å–æ–≤: ${ageStats.lessThan5Hours}`);
        console.log(`  –ú–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤: ${ageStats.lessThan24Hours}`);
        console.log(`  –ë–æ–ª–µ–µ 24 —á–∞—Å–æ–≤: ${ageStats.moreThan24Hours}`);
        console.log(`  –ë–µ–∑ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è: ${ageStats.noCreatedAt}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        const sortedRooms = roomAges.sort((a, b) => b.ageHours - a.ageHours);
        console.log('\nüïê –¢–æ–ø-10 —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç:');
        sortedRooms.slice(0, 10).forEach((room, index) => {
            console.log(`  ${index + 1}. ${room.name} - ${room.ageHours}—á (${room.status})`);
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        console.log('\nüÜï –¢–æ–ø-10 —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç:');
        sortedRooms.slice(-10).reverse().forEach((room, index) => {
            console.log(`  ${index + 1}. ${room.name} - ${room.ageHours}—á (${room.status})`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –ø—Ä–∏ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (5 —á–∞—Å–æ–≤)
        const roomsToDelete = sortedRooms.filter(room => room.ageHours > 5);
        console.log(`\nüóëÔ∏è –ö–æ–º–Ω–∞—Ç —Å—Ç–∞—Ä—à–µ 5 —á–∞—Å–æ–≤ (–±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã): ${roomsToDelete.length}`);
        
        if (roomsToDelete.length > 0) {
            console.log('\nüìã –ö–æ–º–Ω–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
            roomsToDelete.forEach(room => {
                console.log(`  - ${room.name} - ${room.ageHours}—á (${room.status})`);
            });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        if (client) {
            await client.close();
            console.log('\n‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        }
    }
}

checkRoomsAge();
