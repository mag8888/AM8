#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç –∏–∑ MongoDB
 * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏—Ö —Å—Ç–∞—Ç—É—Å–∞
 */

const { MongoClient } = require('mongodb');
const config = require('../config/database');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    ...config.MONGODB,
    DRY_RUN: process.argv.includes('--dry-run'),
    VERBOSE: process.argv.includes('--verbose')
};

async function deleteAllRooms() {
    let client = null;
    
    try {
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        const uri = CONFIG.URI;
        
        console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas...');
        client = new MongoClient(uri);
        await client.connect();
        
        const db = client.db(CONFIG.DATABASE);
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã
        const rooms = await db.collection(config.COLLECTIONS.ROOMS).find({}).toArray();
        console.log(`üìä –í—Å–µ–≥–æ –∫–æ–º–Ω–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${rooms.length}`);
        
        if (rooms.length === 0) {
            console.log('‚úÖ –ö–æ–º–Ω–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        if (CONFIG.DRY_RUN) {
            console.log('\nüîç –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
            console.log('\nüìã –ö–æ–º–Ω–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
            rooms.forEach((room, index) => {
                console.log(`  ${index + 1}. ${room.name} (${room.id}) - ${room.status || 'waiting'}`);
            });
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã
        console.log('\nüóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç...');
        
        let deletedCount = 0;
        let errorsCount = 0;
        
        for (const room of rooms) {
            try {
                        // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
                        const playersResult = await db.collection(config.COLLECTIONS.PLAYERS).deleteMany({ room_id: room.id });
                console.log(`‚úÖ –£–¥–∞–ª–µ–Ω—ã –∏–≥—Ä–æ–∫–∏ –∫–æ–º–Ω–∞—Ç—ã ${room.name} (${playersResult.deletedCount} –∑–∞–ø–∏—Å–µ–π)`);
                
                // –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–º–Ω–∞—Ç—É
                const roomResult = await db.collection(config.COLLECTIONS.ROOMS).deleteOne({ _id: room._id });
                
                if (roomResult.deletedCount > 0) {
                    deletedCount++;
                    if (CONFIG.VERBOSE) {
                        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞: ${room.name} (${room.status || 'waiting'})`);
                    }
                } else {
                    console.log(`‚ö†Ô∏è –ö–æ–º–Ω–∞—Ç–∞ ${room.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);
                }
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã ${room.name}:`, error.message);
                errorsCount++;
            }
        }
        
        console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:`);
        console.log(`  –í—Å–µ–≥–æ –∫–æ–º–Ω–∞—Ç: ${rooms.length}`);
        console.log(`  –£–¥–∞–ª–µ–Ω–æ –∫–æ–º–Ω–∞—Ç: ${deletedCount}`);
        console.log(`  –û—à–∏–±–æ–∫: ${errorsCount}`);
        
        if (deletedCount > 0) {
            console.log('üéâ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('‚ÑπÔ∏è –ö–æ–º–Ω–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const remainingRooms = await db.collection(config.COLLECTIONS.ROOMS).find({}).count();
        console.log(`üìä –û—Å—Ç–∞–ª–æ—Å—å –∫–æ–º–Ω–∞—Ç –≤ –±–∞–∑–µ: ${remainingRooms}`);
        
        if (remainingRooms === 0) {
            console.log('‚úÖ –í—Å–µ –∫–æ–º–Ω–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!');
        } else {
            console.log(`‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –∫–æ–º–Ω–∞—Ç—ã –≤ –±–∞–∑–µ: ${remainingRooms}`);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        if (client) {
            await client.close();
            console.log('\n‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        }
    }
}

deleteAllRooms();

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç –∏–∑ MongoDB
 * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏—Ö —Å—Ç–∞—Ç—É—Å–∞
 */

const { MongoClient } = require('mongodb');
const config = require('../config/database');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    ...config.MONGODB,
    DRY_RUN: process.argv.includes('--dry-run'),
    VERBOSE: process.argv.includes('--verbose')
};

async function deleteAllRooms() {
    let client = null;
    
    try {
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        const uri = CONFIG.URI;
        
        console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas...');
        client = new MongoClient(uri);
        await client.connect();
        
        const db = client.db(CONFIG.DATABASE);
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã
        const rooms = await db.collection(config.COLLECTIONS.ROOMS).find({}).toArray();
        console.log(`üìä –í—Å–µ–≥–æ –∫–æ–º–Ω–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${rooms.length}`);
        
        if (rooms.length === 0) {
            console.log('‚úÖ –ö–æ–º–Ω–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        if (CONFIG.DRY_RUN) {
            console.log('\nüîç –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
            console.log('\nüìã –ö–æ–º–Ω–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
            rooms.forEach((room, index) => {
                console.log(`  ${index + 1}. ${room.name} (${room.id}) - ${room.status || 'waiting'}`);
            });
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã
        console.log('\nüóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç...');
        
        let deletedCount = 0;
        let errorsCount = 0;
        
        for (const room of rooms) {
            try {
                        // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
                        const playersResult = await db.collection(config.COLLECTIONS.PLAYERS).deleteMany({ room_id: room.id });
                console.log(`‚úÖ –£–¥–∞–ª–µ–Ω—ã –∏–≥—Ä–æ–∫–∏ –∫–æ–º–Ω–∞—Ç—ã ${room.name} (${playersResult.deletedCount} –∑–∞–ø–∏—Å–µ–π)`);
                
                // –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–º–Ω–∞—Ç—É
                const roomResult = await db.collection(config.COLLECTIONS.ROOMS).deleteOne({ _id: room._id });
                
                if (roomResult.deletedCount > 0) {
                    deletedCount++;
                    if (CONFIG.VERBOSE) {
                        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞: ${room.name} (${room.status || 'waiting'})`);
                    }
                } else {
                    console.log(`‚ö†Ô∏è –ö–æ–º–Ω–∞—Ç–∞ ${room.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);
                }
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã ${room.name}:`, error.message);
                errorsCount++;
            }
        }
        
        console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:`);
        console.log(`  –í—Å–µ–≥–æ –∫–æ–º–Ω–∞—Ç: ${rooms.length}`);
        console.log(`  –£–¥–∞–ª–µ–Ω–æ –∫–æ–º–Ω–∞—Ç: ${deletedCount}`);
        console.log(`  –û—à–∏–±–æ–∫: ${errorsCount}`);
        
        if (deletedCount > 0) {
            console.log('üéâ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('‚ÑπÔ∏è –ö–æ–º–Ω–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const remainingRooms = await db.collection(config.COLLECTIONS.ROOMS).find({}).count();
        console.log(`üìä –û—Å—Ç–∞–ª–æ—Å—å –∫–æ–º–Ω–∞—Ç –≤ –±–∞–∑–µ: ${remainingRooms}`);
        
        if (remainingRooms === 0) {
            console.log('‚úÖ –í—Å–µ –∫–æ–º–Ω–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!');
        } else {
            console.log(`‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –∫–æ–º–Ω–∞—Ç—ã –≤ –±–∞–∑–µ: ${remainingRooms}`);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        if (client) {
            await client.close();
            console.log('\n‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        }
    }
}

deleteAllRooms();
