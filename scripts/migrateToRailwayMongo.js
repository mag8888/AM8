#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB Atlas –≤ MongoDB –Ω–∞ Railway
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/migrateToRailwayMongo.js [--dry-run] [--verbose]
 */

const { MongoClient } = require('mongodb');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    // –ò—Å—Ö–æ–¥–Ω–∞—è –±–∞–∑–∞ (MongoDB Atlas)
    SOURCE: {
        URI: process.env.MONGODB_URI || 'mongodb+srv://xqrmedia_db_user:pOs1rKxSv9Y3e7rl@cluster0.wvumcaj.mongodb.net/energy_money_game?retryWrites=true&w=majority&appName=Cluster0',
        DATABASE: 'energy_money_game'
    },
    
    // –¶–µ–ª–µ–≤–∞—è –±–∞–∑–∞ (Railway MongoDB)
    TARGET: {
        URI: process.env.RAILWAY_MONGODB_URI || process.env.MONGODB_URI_RAILWAY,
        DATABASE: process.env.RAILWAY_MONGODB_DATABASE || 'energy_money_game'
    },
    
    // –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
    COLLECTIONS: ['rooms', 'room_players', 'users'],
    
    // –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    DRY_RUN: process.argv.includes('--dry-run'),
    VERBOSE: process.argv.includes('--verbose')
};

class MongoMigrator {
    constructor() {
        this.sourceClient = null;
        this.targetClient = null;
        this.sourceDb = null;
        this.targetDb = null;
        this.stats = {
            totalDocuments: 0,
            migratedDocuments: 0,
            errors: 0,
            collections: {}
        };
    }

    async connect() {
        console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (MongoDB Atlas)...');
        this.sourceClient = new MongoClient(CONFIG.SOURCE.URI);
        await this.sourceClient.connect();
        this.sourceDb = this.sourceClient.db(CONFIG.SOURCE.DATABASE);
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        if (!CONFIG.TARGET.URI) {
            throw new Error('‚ùå RAILWAY_MONGODB_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å URI Railway MongoDB');
        }

        console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (Railway MongoDB)...');
        this.targetClient = new MongoClient(CONFIG.TARGET.URI);
        await this.targetClient.connect();
        this.targetDb = this.targetClient.db(CONFIG.TARGET.DATABASE);
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }

    async disconnect() {
        if (this.sourceClient) {
            await this.sourceClient.close();
            console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB Atlas –∑–∞–∫—Ä—ã—Ç–æ');
        }
        if (this.targetClient) {
            await this.targetClient.close();
            console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Railway MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
        }
    }

    async migrateCollection(collectionName) {
        console.log(`\nüì¶ –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ${collectionName}`);
        
        try {
            const sourceCollection = this.sourceDb.collection(collectionName);
            const targetCollection = this.targetDb.collection(collectionName);

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            const documents = await sourceCollection.find({}).toArray();
            const documentCount = documents.length;
            
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${documentCount}`);
            
            if (documentCount === 0) {
                console.log(`‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è ${collectionName} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                return;
            }

            this.stats.totalDocuments += documentCount;
            this.stats.collections[collectionName] = {
                source: documentCount,
                migrated: 0,
                errors: 0
            };

            if (CONFIG.DRY_RUN) {
                console.log(`üîç DRY RUN: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é ${collectionName}`);
                this.stats.collections[collectionName].migrated = documentCount;
                return;
            }

            // –û—á–∏—â–∞–µ–º —Ü–µ–ª–µ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            const existingCount = await targetCollection.countDocuments();
            if (existingCount > 0) {
                console.log(`üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ ${collectionName} (${existingCount} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)`);
                await targetCollection.deleteMany({});
            }

            // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Ü–µ–ª–µ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
            if (documents.length > 0) {
                const result = await targetCollection.insertMany(documents);
                console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${result.insertedCount}`);
                
                this.stats.migratedDocuments += result.insertedCount;
                this.stats.collections[collectionName].migrated = result.insertedCount;
            }

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ${collectionName}:`, error);
            this.stats.errors++;
            this.stats.collections[collectionName].errors++;
        }
    }

    async migrate() {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...');
        console.log(`üìÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${new Date().toISOString()}`);
        console.log(`üîç –†–µ–∂–∏–º: ${CONFIG.DRY_RUN ? 'DRY RUN (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)' : '–ü–†–û–î–ê–ö–®–ù'}`);
        console.log(`üìù –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º: ${CONFIG.VERBOSE ? '–í–ö–õ–Æ–ß–ï–ù' : '–í–´–ö–õ–Æ–ß–ï–ù'}`);

        await this.connect();

        try {
            // –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
            for (const collectionName of CONFIG.COLLECTIONS) {
                await this.migrateCollection(collectionName);
            }

            console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            this.printStats();

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
            this.stats.errors++;
        } finally {
            await this.disconnect();
        }
    }

    printStats() {
        console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:');
        console.log(`  –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${this.stats.totalDocuments}`);
        console.log(`  –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${this.stats.migratedDocuments}`);
        console.log(`  –û—à–∏–±–æ–∫: ${this.stats.errors}`);
        
        console.log('\nüì¶ –ü–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º:');
        for (const [collectionName, stats] of Object.entries(this.stats.collections)) {
            console.log(`  ${collectionName}: ${stats.migrated}/${stats.source} (–æ—à–∏–±–æ–∫: ${stats.errors})`);
        }
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function checkEnvironment() {
    if (!CONFIG.TARGET.URI) {
        console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è RAILWAY_MONGODB_URI');
        console.log('üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
        console.log('   export RAILWAY_MONGODB_URI="mongodb://..."');
        process.exit(1);
    }
}

if (require.main === module) {
    checkEnvironment();
    
    const migrator = new MongoMigrator();
    migrator.migrate()
        .then(() => {
            console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
            process.exit(1);
        });
}

module.exports = MongoMigrator;
