#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç
 * –£–¥–∞–ª—è–µ—Ç –∫–æ–º–Ω–∞—Ç—ã —Å—Ç–∞—Ä—à–µ 5 —á–∞—Å–æ–≤
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/cleanupOldRooms.js
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç —á–µ—Ä–µ–∑ cron:
 * 0,30 * * * * cd /path/to/project && node scripts/cleanupOldRooms.js
 */

const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    ROOM_MAX_AGE_HOURS: 5, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∫–æ–º–Ω–∞—Ç—ã –≤ —á–∞—Å–∞—Ö
    DRY_RUN: process.argv.includes('--dry-run'), // –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è
    VERBOSE: process.argv.includes('--verbose') // –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
};

class RoomCleanupService {
    constructor() {
        this.dbPath = path.join(__dirname, '..', 'database', 'aura_money.db');
        this.db = null;
        this.stats = {
            totalRooms: 0,
            oldRooms: 0,
            deletedRooms: 0,
            errors: 0
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    async initialize() {
        return new Promise((resolve, reject) => {
            this.db = new sqlite3.Database(this.dbPath, (err) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
                    reject(err);
                } else {
                    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                    resolve();
                }
            });
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã
     */
    async getAllRooms() {
        return new Promise((resolve, reject) => {
            const query = `
                SELECT 
                    id,
                    name,
                    status,
                    created_at,
                    updated_at,
                    creator_id
                FROM rooms 
                WHERE status != 'deleted'
                ORDER BY created_at DESC
            `;

            this.db.all(query, [], (err, rows) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:', err.message);
                    reject(err);
                } else {
                    resolve(rows || []);
                }
            });
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–Ω–∞—Ç–∞ —Å—Ç–∞—Ä–æ–π
     */
    isRoomOld(createdAt) {
        const roomCreatedTime = new Date(createdAt).getTime();
        const currentTime = Date.now();
        const maxAgeMs = CONFIG.ROOM_MAX_AGE_HOURS * 60 * 60 * 1000; // 5 —á–∞—Å–æ–≤ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        return (currentTime - roomCreatedTime) > maxAgeMs;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –∫–æ–º–Ω–∞—Ç—ã –≤ —á–∞—Å–∞—Ö
     */
    getRoomAgeHours(createdAt) {
        const roomCreatedTime = new Date(createdAt).getTime();
        const currentTime = Date.now();
        const ageMs = currentTime - roomCreatedTime;
        return Math.round(ageMs / (60 * 60 * 1000) * 100) / 100; // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É
     */
    async deleteRoom(roomId) {
        return new Promise((resolve, reject) => {
            const query = `
                UPDATE rooms 
                SET status = 'deleted', 
                    updated_at = ?
                WHERE id = ?
            `;

            this.db.run(query, [new Date().toISOString(), roomId], function(err) {
                if (err) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}:`, err.message);
                    reject(err);
                } else {
                    console.log(`‚úÖ –ö–æ–º–Ω–∞—Ç–∞ ${roomId} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–∞—è`);
                    resolve(this.changes);
                }
            });
        });
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
     */
    async deleteRoomPlayers(roomId) {
        return new Promise((resolve, reject) => {
            const query = `
                DELETE FROM room_players 
                WHERE room_id = ?
            `;

            this.db.run(query, [roomId], function(err) {
                if (err) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã ${roomId}:`, err.message);
                    reject(err);
                } else {
                    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω—ã –∏–≥—Ä–æ–∫–∏ –∫–æ–º–Ω–∞—Ç—ã ${roomId} (${this.changes} –∑–∞–ø–∏—Å–µ–π)`);
                    resolve(this.changes);
                }
            });
        });
    }

    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É
     */
    async cleanup() {
        try {
            console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç...');
            console.log(`üìÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∫–æ–º–Ω–∞—Ç: ${CONFIG.ROOM_MAX_AGE_HOURS} —á–∞—Å–æ–≤`);
            console.log(`üîç –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${CONFIG.DRY_RUN ? '–î–ê' : '–ù–ï–¢'}`);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã
            const rooms = await this.getAllRooms();
            this.stats.totalRooms = rooms.length;
            
            console.log(`üìä –í—Å–µ–≥–æ –∫–æ–º–Ω–∞—Ç –≤ –±–∞–∑–µ: ${this.stats.totalRooms}`);
            
            if (rooms.length === 0) {
                console.log('‚ÑπÔ∏è –ö–æ–º–Ω–∞—Ç—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return;
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–Ω–∞—Ç—ã
            const oldRooms = rooms.filter(room => this.isRoomOld(room.created_at));
            this.stats.oldRooms = oldRooms.length;
            
            console.log(`‚è∞ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç: ${this.stats.oldRooms}`);
            
            if (oldRooms.length === 0) {
                console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return;
            }

            // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö
            console.log('\nüìã –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç:');
            oldRooms.forEach(room => {
                const ageHours = this.getRoomAgeHours(room.created_at);
                console.log(`  - ${room.id} | ${room.name} | –í–æ–∑—Ä–∞—Å—Ç: ${ageHours}—á | –°—Ç–∞—Ç—É—Å: ${room.status}`);
            });

            if (CONFIG.DRY_RUN) {
                console.log('\nüîç –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
                return;
            }

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–Ω–∞—Ç—ã
            console.log('\nüóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç...');
            
            for (const room of oldRooms) {
                try {
                    // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
                    await this.deleteRoomPlayers(room.id);
                    
                    // –ü–æ–º–µ—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—É—é
                    await this.deleteRoom(room.id);
                    
                    this.stats.deletedRooms++;
                    
                    if (CONFIG.VERBOSE) {
                        const ageHours = this.getRoomAgeHours(room.created_at);
                        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞: ${room.name} (–≤–æ–∑—Ä–∞—Å—Ç: ${ageHours}—á)`);
                    }
                    
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã ${room.id}:`, error.message);
                    this.stats.errors++;
                }
            }

            // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏:');
            console.log(`  –í—Å–µ–≥–æ –∫–æ–º–Ω–∞—Ç: ${this.stats.totalRooms}`);
            console.log(`  –°—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç: ${this.stats.oldRooms}`);
            console.log(`  –£–¥–∞–ª–µ–Ω–æ –∫–æ–º–Ω–∞—Ç: ${this.stats.deletedRooms}`);
            console.log(`  –û—à–∏–±–æ–∫: ${this.stats.errors}`);
            
            if (this.stats.deletedRooms > 0) {
                console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            } else {
                console.log('‚ÑπÔ∏è –ö–æ–º–Ω–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error.message);
            this.stats.errors++;
        }
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
     */
    async close() {
        if (this.db) {
            return new Promise((resolve) => {
                this.db.close((err) => {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err.message);
                    } else {
                        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
                    }
                    resolve();
                });
            });
        }
    }

    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–∏—Å—Ç–∫—É
     */
    async run() {
        try {
            await this.initialize();
            await this.cleanup();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏:', error.message);
            process.exit(1);
        } finally {
            await this.close();
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    const cleanupService = new RoomCleanupService();
    cleanupService.run().then(() => {
        console.log('üéâ –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
        process.exit(0);
    }).catch(error => {
        console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    });
}

module.exports = RoomCleanupService;
