#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è created_at –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö MongoDB
 * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ created_at –∫ –∫–æ–º–Ω–∞—Ç–∞–º, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ–≥–æ –Ω–µ—Ç
 */

const { MongoClient } = require('mongodb');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MongoDB
const CONFIG = {
    MONGODB_USERNAME: process.env.MONGODB_USERNAME || 'xqrmedia_db_user',
    MONGODB_PASSWORD: process.env.MONGODB_PASSWORD || 'pOs1rKxSv9Y3e7rl',
    MONGODB_CLUSTER: process.env.MONGODB_CLUSTER || 'cluster0.wvumcaj.mongodb.net',
    MONGODB_DATABASE: process.env.MONGODB_DATABASE || 'energy_money_game',
    MONGODB_OPTIONS: process.env.MONGODB_OPTIONS || 'retryWrites=true&w=majority&appName=Cluster0',
    DRY_RUN: process.argv.includes('--dry-run'),
    VERBOSE: process.argv.includes('--verbose')
};

async function fixRoomsCreatedAt() {
    let client = null;
    
    try {
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        const uri = `mongodb+srv://${CONFIG.MONGODB_USERNAME}:${CONFIG.MONGODB_PASSWORD}@${CONFIG.MONGODB_CLUSTER}/${CONFIG.MONGODB_DATABASE}?${CONFIG.MONGODB_OPTIONS}`;
        
        console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas...');
        client = new MongoClient(uri);
        await client.connect();
        
        const db = client.db(CONFIG.MONGODB_DATABASE);
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—ã –±–µ–∑ –ø–æ–ª—è created_at
        const roomsWithoutCreatedAt = await db.collection('rooms').find({
            created_at: { $exists: false }
        }).toArray();
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–Ω–∞—Ç –±–µ–∑ –ø–æ–ª—è created_at: ${roomsWithoutCreatedAt.length}`);
        
        if (roomsWithoutCreatedAt.length === 0) {
            console.log('‚úÖ –í—Å–µ –∫–æ–º–Ω–∞—Ç—ã —É–∂–µ –∏–º–µ—é—Ç –ø–æ–ª–µ created_at');
            return;
        }
        
        if (CONFIG.DRY_RUN) {
            console.log('\nüîç –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
            console.log('\nüìã –ö–æ–º–Ω–∞—Ç—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
            roomsWithoutCreatedAt.forEach((room, index) => {
                console.log(`  ${index + 1}. ${room.name} (${room.id})`);
            });
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ created_at –∫ –∫–æ–º–Ω–∞—Ç–∞–º
        console.log('\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—ã...');
        
        const now = new Date().toISOString();
        let updatedCount = 0;
        
        for (const room of roomsWithoutCreatedAt) {
            try {
                // –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –¥–∞—Ç—É –≤ –ø—Ä–æ—à–ª–æ–º (–æ—Ç 1 —á–∞—Å–∞ –¥–æ 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
                const randomHoursAgo = Math.floor(Math.random() * (7 * 24 - 1)) + 1;
                const createdAt = new Date(Date.now() - randomHoursAgo * 60 * 60 * 1000).toISOString();
                
                await db.collection('rooms').updateOne(
                    { _id: room._id },
                    { 
                        $set: { 
                            created_at: createdAt,
                            updated_at: now
                        } 
                    }
                );
                
                updatedCount++;
                
                if (CONFIG.VERBOSE) {
                    const ageHours = Math.round((Date.now() - new Date(createdAt).getTime()) / (60 * 60 * 1000) * 100) / 100;
                    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞: ${room.name} (–≤–æ–∑—Ä–∞—Å—Ç: ${ageHours}—á)`);
                }
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã ${room.id}:`, error.message);
            }
        }
        
        console.log(`\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–º–Ω–∞—Ç: ${updatedCount}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const remainingRooms = await db.collection('rooms').find({
            created_at: { $exists: false }
        }).count();
        
        console.log(`üìä –û—Å—Ç–∞–ª–æ—Å—å –∫–æ–º–Ω–∞—Ç –±–µ–∑ created_at: ${remainingRooms}`);
        
        if (remainingRooms === 0) {
            console.log('üéâ –í—Å–µ –∫–æ–º–Ω–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        if (client) {
            await client.close();
            console.log('\n‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        }
    }
}

fixRoomsCreatedAt();
