#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ Railway —Å–µ—Ä–≤–µ—Ä–µ
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Å—Ä–µ–¥–µ Railway, –≥–¥–µ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */

const { MongoClient } = require('mongodb');

async function runMigrationOnRailway() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ Railway —Å–µ—Ä–≤–µ—Ä–µ...');
    console.log('üìÖ –í—Ä–µ–º—è:', new Date().toISOString());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const railwayMongoUri = process.env.RAILWAY_MONGODB_URI;
    const railwayMongoDb = process.env.RAILWAY_MONGODB_DATABASE || 'energy_money_game';
    const atlasMongoUri = process.env.MONGODB_URI;
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    console.log('  RAILWAY_MONGODB_URI:', railwayMongoUri ? '‚úÖ SET' : '‚ùå NOT SET');
    console.log('  RAILWAY_MONGODB_DATABASE:', railwayMongoDb);
    console.log('  MONGODB_URI (Atlas):', atlasMongoUri ? '‚úÖ SET' : '‚ùå NOT SET');
    
    if (!railwayMongoUri) {
        console.error('‚ùå –û—à–∏–±–∫–∞: RAILWAY_MONGODB_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
        process.exit(1);
    }
    
    if (!atlasMongoUri) {
        console.error('‚ùå –û—à–∏–±–∫–∞: MONGODB_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
        process.exit(1);
    }
    
    let sourceClient = null;
    let targetClient = null;
    
    try {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB Atlas (–∏—Å—Ö–æ–¥–Ω–∞—è –±–∞–∑–∞)
        console.log('\nüîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas...');
        sourceClient = new MongoClient(atlasMongoUri);
        await sourceClient.connect();
        const sourceDb = sourceClient.db('energy_money_game');
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Railway MongoDB (—Ü–µ–ª–µ–≤–∞—è –±–∞–∑–∞)
        console.log('\nüîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway MongoDB...');
        targetClient = new MongoClient(railwayMongoUri);
        await targetClient.connect();
        const targetDb = targetClient.db(railwayMongoDb);
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
        const collections = ['rooms', 'room_players', 'users'];
        
        console.log('\nüì¶ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∫–æ–ª–ª–µ–∫—Ü–∏–π...');
        
        for (const collectionName of collections) {
            console.log(`\nüì¶ –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ${collectionName}`);
            
            const sourceCollection = sourceDb.collection(collectionName);
            const targetCollection = targetDb.collection(collectionName);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            const documents = await sourceCollection.find({}).toArray();
            const documentCount = documents.length;
            
            console.log(`  üìä –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${documentCount}`);
            
            if (documentCount === 0) {
                console.log(`  ‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è ${collectionName} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                continue;
            }
            
            // –û—á–∏—â–∞–µ–º —Ü–µ–ª–µ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
            const existingCount = await targetCollection.countDocuments();
            if (existingCount > 0) {
                console.log(`  üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (${existingCount} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)`);
                await targetCollection.deleteMany({});
            }
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Ü–µ–ª–µ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
            if (documents.length > 0) {
                const result = await targetCollection.insertMany(documents);
                console.log(`  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${result.insertedCount}`);
            }
        }
        
        console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:');
        for (const collectionName of collections) {
            const count = await targetClient.db(railwayMongoDb).collection(collectionName).countDocuments();
            console.log(`  ${collectionName}: ${count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
        process.exit(1);
    } finally {
        if (sourceClient) {
            await sourceClient.close();
            console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB Atlas –∑–∞–∫—Ä—ã—Ç–æ');
        }
        if (targetClient) {
            await targetClient.close();
            console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Railway MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
        }
    }
}

if (require.main === module) {
    runMigrationOnRailway()
        .then(() => {
            console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
            process.exit(1);
        });
}

module.exports = runMigrationOnRailway;
